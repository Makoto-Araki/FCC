================================================================================
[X1] インストールおよび環境構築時の記録
[01] Store Data with Sass Variables
[02] Nest CSS with Sass
[03] Create Reusable CSS with Mixins
[04] Use @if and @else to Add Logic To Your Styles
[05] Use @for to Create a Sass Loop
[06] Use @each to Map Over Items in a List
[07] Apply a Style Until a Condition is Met with @while
[08] Split Your Styles into Smaller Chunks with Partials
[09] Extend One Set of CSS Styles to Another Element
================================================================================
[X1]
  インストールおよび環境構築時の記録
  
[内容]
  インストールおよび環境構築時の記録
  
[確認]
  # cd $HOME
  # cat /etc/redhat-release
  
  コマンドの動作結果
  --------------------------------------------------
  CentOS Linux release 7.9.2009 (Core)
  --------------------------------------------------
  
  # cd $HOME
  # yum list installed | grep ruby
  
  コマンドの動作結果
  --------------------------------------------------
  (インストールされていない)
  --------------------------------------------------
  
  # cd $HOME
  # yum list installed | grep ruby-devel
  
  コマンドの動作結果
  --------------------------------------------------
  (インストールされていない)
  --------------------------------------------------
  
  # cd $HOME
  # yum list installed | grep rubygems
  
  コマンドの動作結果
  --------------------------------------------------
  (インストールされていない)
  --------------------------------------------------
  
  # cd $HOME
  # which gcc
  
  コマンドの動作結果
  --------------------------------------------------
  /bin/gcc
  --------------------------------------------------
  
  # cd $HOME
  # which git
  
  コマンドの動作結果
  --------------------------------------------------
  /bin/git
  --------------------------------------------------
  
  # cd $HOME
  # git clone https://github.com/rbenv/rbenv.git .rbenv
  
  コマンドの動作結果
  --------------------------------------------------
  Cloning into '.rbenv'...  // 隠しディレクトリ
  remote: Enumerating objects: 3013, done.
  remote: Counting objects: 100% (117/117), done.
  remote: Compressing objects: 100% (66/66), done.
  remote: Total 3013 (delta 62), reused 91 (delta 51), pack-reused 2896
  Receiving objects: 100% (3013/3013), 606.48 KiB | 0 bytes/s, done.
  Resolving deltas: 100% (1871/1871), done.
  --------------------------------------------------
  
  # cd $HOME
  # echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> .bash_profile
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし) => プログラム「rbenv」のパス開通
  --------------------------------------------------
  
  # cd $HOME
  # .rbenv/bin/rbenv init
  
  コマンドの動作結果
  --------------------------------------------------
  # Load rbenv automatically by appending
  # the following to ~/.bash_profile:
  --------------------------------------------------
  
  # cd $HOME
  # source .bash_profile
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし) => 設定を反映
  --------------------------------------------------
  
  # cd $HOME
  # rbenv -v
  
  コマンドの動作結果
  --------------------------------------------------
  rbenv 1.2.0-14-gc6cc0a1
  --------------------------------------------------
  
  # cd $HOME
  # git clone https://github.com/rbenv/ruby-build.git .rbenv/plugins/ruby-build
  
  コマンドの動作結果
  --------------------------------------------------
  Cloning into '.rbenv/plugins/ruby-build'...
  remote: Enumerating objects: 12227, done.
  remote: Counting objects: 100% (920/920), done.
  remote: Compressing objects: 100% (317/317), done.
  remote: Total 12227 (delta 624), reused 801 (delta 543), pack-reused 11307
  Receiving objects: 100% (12227/12227), 2.55 MiB | 0 bytes/s, done.
  Resolving deltas: 100% (8091/8091), done.
  --------------------------------------------------
  
  # cd $HOME
  # .rbenv/plugins/ruby-build/install.sh
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プログラム「ruby-build」のインストール
  --------------------------------------------------
  
  # cd $HOME
  # rbenv install -l
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => インストール可能な「ruby」のバージョン表示
  --------------------------------------------------
  
  # cd $HOME
  # yum -y install openssl-devel zlib-devel
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => この手順がないと次の手順でエラー
  --------------------------------------------------
  
  # cd $HOME
  # rbenv install 3.1.2
  
  コマンドの動作結果
  --------------------------------------------------
  Installing ruby-3.1.2...
  Installed ruby-3.1.2 to /root/.rbenv/versions/3.1.2
  --------------------------------------------------
  
  # cd $HOME
  # echo 'eval "$(rbenv init -)"' >> .bash_profile
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし) => プログラム「ruby 3.1.2」のパス開通
  --------------------------------------------------
  
  # cd $HOME
  # source .bash_profile
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし) => プログラム「ruby 3.1.2」のパス開通
  --------------------------------------------------
  
  # cd $HOME
  # rbenv global 3.1.2
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし) => プログラム「ruby 3.1.2」をデフォルト
  --------------------------------------------------
  
  # cd $HOME
  # ruby -v
  
  コマンドの動作結果
  --------------------------------------------------
  ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
  --------------------------------------------------
  
  # cd $HOME
  # yum -y install ruby-devel
  
  コマンドの動作結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  # cd $HOME
  # yum -y install rubygems
  
  コマンドの動作結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  # cd $HOME
  # gem update --system
  
  コマンドの動作結果
  --------------------------------------------------
  RubyGems system software updated
  --------------------------------------------------
  
  # cd $HOME
  # gem install compass
  
  コマンドの動作結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  # cd $HOME
  # gem install sass
  
  コマンドの動作結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  # cd $HOME
  # compass -v
  
  コマンドの動作結果
  --------------------------------------------------
  Compass 1.0.3 (Polaris)
  Copyright (c) 2008-2022 Chris Eppstein
  Released under the MIT License.
  Compass is charityware.
  Please make a tax deductable donation for a worthy cause: http://umdf.org/compass
  --------------------------------------------------
  
  # cd $HOME
  # sass -v
  
  コマンドの動作結果
  --------------------------------------------------
  Ruby Sass 3.7.4
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[01]
  Store Data with Sass Variables
  
[内容]
  Sass変数
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas01.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // SASS変数
  $P1: red;
  $P2: 1.2em;
  $P3: normal;
  
  // クラス
  .SAM {
    color: $P1;
    font-size: $P2;
    font-weight: $P3;
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas01.scss:css/sas01.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas01.css
  
  コマンドの動作結果
  --------------------------------------------------
  .SAM {
    color: red;
    font-size: 1.2em;
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[02]
  Nest CSS with Sass
  
[内容]
  HTMLと同じ構造で「Sass」を記述
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas02.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas02.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // SASS変数
  $P1: red;
  $P2: 1.2em;
  $P3: normal;
  
  // HTMLと同じ構造で記述
  div {
    .SAM {
      color: $P1;
      font-size: $P2;
      font-weight: $P3;
    }
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas02.scss:css/sas02.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas02.css
  
  コマンドの動作結果
  --------------------------------------------------
  div .SAM {
    color: red;
    font-size: 1.2em;
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[03]
  Create Reusable CSS with Mixins
  
[内容]
  関数を使用して「Sass」を記述
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas03.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas03.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // 関数記述
  @mixin myFunc($P1: black, $P2: 1em, $P3: normal) {
    color: $P1;
    font-size: $P2;
    font-weight: $P3;
  }
  
  // HTMLと同じ構造で記述
  div {
    .SAM {
      @include myFunc(blue, 1.2em, normal);
    }
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas03.scss:css/sas03.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas03.css
  
  コマンドの動作結果
  --------------------------------------------------
  div .SAM {
    color: blue;
    font-size: 1.2em;
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[04]
  Use @if and @else to Add Logic To Your Styles
  
[内容]
  関数内で構文「if」を使用
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas04.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas04.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // 関数記述1
  @mixin myFunc1($P1: black, $P2: 1em, $P3: normal) {
    color: $P1;
    font-size: $P2;
    font-weight: $P3;
  }
  
  // 関数記述2
  @mixin myFunc2($P1: 1) {
    @if $P1 == 1 {
      @include myFunc1(blue, 1.2em, normal);
    }
    @else if $P1 == 2 {
      @include myFunc1(lime, 1.2em, normal);
    }
    @else {
      @include myFunc();
    }
  }

  // HTMLと同じ構造で記述
  div {
    .SAM {
      @include myFunc2(2);
    }
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas04.scss:css/sas04.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas04.css
  
  コマンドの動作結果
  --------------------------------------------------
  div .SAM {
    color: lime;
    font-size: 1.2em;
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[05]
  Use @for to Create a Sass Loop
  
[内容]
  構文「for」を使用
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas05.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas05.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // 関数記述1
  @mixin myFunc1($P1: black, $P2: 1em, $P3: normal) {
    color: $P1;
    font-size: $P2;
    font-weight: $P3;
  }
  
  // 関数記述2
  @mixin myFunc2() {
    @for $i from 1 through 2 {
      #P#{$i} {
        @include myFunc1(blue, 1.2em, normal);
      }
    }
    @for $i from 3 through 4 {
      #P#{$i} {
        @include myFunc1(lime, 1.2em, normal);
      }
    }
  }

  // HTMLと同じ構造で記述
  div {
    @include myFunc2();
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas05.scss:css/sas05.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas05.css
  
  コマンドの動作結果
  --------------------------------------------------
  div #P1 {
    color: blue;
    font-size: 1.2em;
    font-weight: normal; }
  div #P2 {
    color: blue;
    font-size: 1.2em;
    font-weight: normal; }
  div #P3 {
    color: lime;
    font-size: 1.2em;
    font-weight: normal; }
  div #P4 {
    color: lime;
    font-size: 1.2em;
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[06]
  Use @each to Map Over Items in a List
  
[内容]
  構文「each」を使用
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas06.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas06.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // 関数記述
  @mixin myFunc() {
    @each $key, $val in ('color': blue, 'font-size': 1.2em, 'font-weight': normal) {
      #P1, #P2 {
        #{$key}: $val;
      }
    }
    @each $key, $val in ('color': lime, 'font-size': 1.2em, 'font-weight': normal) {
      #P3, #P4 {
        #{$key}: $val;
      }
    }
  }
  
  // HTMLと同じ構造で記述
  div {
    @include myFunc();
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas06.scss:css/sas06.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas06.css
  
  コマンドの動作結果
  --------------------------------------------------
  div #P1, div #P2 {
    color: blue; }
  div #P1, div #P2 {
    font-size: 1.2em; }
  div #P1, div #P2 {
    font-weight: normal; }
  div #P3, div #P4 {
    color: lime; }
  div #P3, div #P4 {
    font-size: 1.2em; }
  div #P3, div #P4 {
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[07]
  Apply a Style Until a Condition is Met with @while
  
[内容]
  構文「while」を使用
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas07.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas07.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // 変数定義と初期化
  $idx: 1;
  
  // 構文「while」を使用
  @while $idx <= 4 {
    div #P#{$idx} {
      color: blue;
      font-size: 1.2em;
      font-weight: normal;
    }
    $idx: $idx + 1;
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas07.scss:css/sas07.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas07.css
  
  コマンドの動作結果
  --------------------------------------------------
  div #P1 {
    color: blue;
    font-size: 1.2em;
    font-weight: normal; }
  
  div #P2 {
    color: blue;
    font-size: 1.2em;
    font-weight: normal; }
  
  div #P3 {
    color: blue;
    font-size: 1.2em;
    font-weight: normal; }
  
  div #P4 {
    color: blue;
    font-size: 1.2em;
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[08]
  Split Your Styles into Smaller Chunks with Partials
  
[内容]
  ファイル分割
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas08.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas/mod01.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // 関数記述
  @mixin myFunc($P1: black, $P2: 1em, $P3: normal) {
    color: $P1;
    font-size: $P2;
    font-weight: $P3;
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas08.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // インポート
  @import 'mod01';

  // HTMLと同じ構造で記述
  div {
    #P1, #P2 {
      @include myFunc(blue, 1em, normal);
    }
    #P3, #P4 {
      @include myFunc(lime, 1em, normal);
    }
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas08.scss:css/sas08.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas08.css
  
  コマンドの動作結果
  --------------------------------------------------
  div #P1, div #P2 {
    color: blue;
    font-size: 1em;
    font-weight: normal; }
  div #P3, div #P4 {
    color: lime;
    font-size: 1em;
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
[09]
  Extend One Set of CSS Styles to Another Element
  
[内容]
  構文「extend」で継承・拡張
  
[確認]
  # cd /var/www/html/www
  # vi sample.html
  
  コマンドの動作結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas09.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div>
    <p class='SAM' id='P1'>Hello World</p>
    <p class='SAM' id='P2'>Hello World</p>
  </div>
  <hr>
  <div>
    <p class='SAM' id='P3'>Hello World</p>
    <p class='SAM' id='P4'>Hello World</p>
  </div>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas/mod01.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // 関数記述
  @mixin myFunc($P1: black, $P2: 1em, $P3: normal) {
    color: $P1;
    font-size: $P2;
    font-weight: $P3;
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas09.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // インポート
  @import 'mod01';
  
  // 複製元のID => HTML上では該当要素なし
  #AAA {
    @include myFunc(blue, 1.2em, bold);
  }
  
  // 複製元のID => HTML上では該当要素なし
  #BBB {
    @include myFunc(blue, 1.2em, bold);
  }
  
  // HTMLと同じ構造で記述
  div {
    #P1, #P2 {
      @extend #AAA;
      font-weight: normal;  // オーバーライド
    }
    #P3, #P4 {
      @extend #BBB;
      font-weight: normal;  // オーバーライド
    }
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas09.scss:css/sas09.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # cat css/sas09.css
  
  コマンドの動作結果
  --------------------------------------------------
  #AAA, div #P1, div #P2 {
    color: blue;
    font-size: 1.2em;
    font-weight: bold; }
  
  #BBB, div #P3, div #P4 {
    color: blue;
    font-size: 1.2em;
    font-weight: bold; }
  
  div #P1, div #P2 {
    font-weight: normal; }
  
  div #P3, div #P4 {
    font-weight: normal; }
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了！
  
================================================================================
