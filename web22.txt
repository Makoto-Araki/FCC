================================================================================
[00] Introduction to the React Challenges
[01] Create a Simple JSX Element
[02] Create a Complex JSX Element
[03] Add Comments in JSX
[04] Render HTML Elements to the DOM
[05] Define an HTML Class in JSX
[06] Learn About Self-Closing JSX Tags
[07] Create a Stateless Functional Component
[08] Create a React Component
[09] Create a Component with Composition
[10] Use React to Render Nested Components
[11] Compose React Components
[12] Render a Class Component to the DOM
[13] Write a React Component from Scratch
[14] Pass Props to a Stateless Functional Component
[15] Pass an Array as Props
[16] Use Default Props
[17] Override Default Props
[18] Use PropTypes to Define the Props You Expect
[19] Access Props Using this.props
[20] Review Using Props with Stateless Functional Components
[21] Create a Stateful Component
[22] Render State in the User Interface
[23] Render State in the User Interface Another Way
[24] Set State with this.setState
[25] Bind 'this' to a Class Method
[26] Use State to Toggle an Element
[27] Write a Simple Counter
[28] Create a Controlled Input
[29] Create a Controlled Form
[30] Pass State as Props to Child Components
[31] Pass a Callback as Props
[32] Use the Lifecycle Method componentWillMount
[33] Use the Lifecycle Method componentDidMount
[34] Add Event Listeners
[35] Optimize Re-Renders with shouldComponentUpdate
[36] Introducing Inline Styles
[37] Add Inline Styles in React
[38] Use Advanced JavaScript in React Render Method
[39] Render with an If-Else Condition
[40] Use && for a More Concise Conditional
[41] Use a Ternary Expression for Conditional Rendering
[42] Render Conditionally from Props
[43] Change Inline CSS Conditionally Based on Component State
[44] Use Array.map() to Dynamically Render Elements
[45] Give Sibling Elements a Unique Key Attribute
[46] Use Array.filter() to Dynamically Filter an Array
[47] Render React on the Server with renderToString
================================================================================
[01]
  Create a Simple JSX Element
  
[内容]
  要素「JSX」を作成
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 要素「JSX」
    const JSX = (
      <div>
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
        <hr />
        <div id='DS1'>
          <p className='SAM1'>Hello!</p>
          <p className='SAM1'>Hello!</p>
        </div>
        <hr />
        <div id='DS2'>
          <p className='SAM2'>Hello!</p>
          <p className='SAM2'>Hello!</p>
        </div>
      </div>
    );
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      JSX,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[02]
  Create a Complex JSX Element
  
[内容]
  要素「JSX」の直下は「一つの要素」であることに注意
  
  // 正常なコード
  const JSX = (
    <div>
      <p>Hello</p>
      <p>Hello</p>
    </div>
  );
  
  // 無効なコード
  const JSX = (
    <p>Hello</p>
    <p>Hello</p>
    <p>Hello</p>
    <p>Hello</p>
  );
  
[確認]
  // 上記「01」を参照
  
================================================================================
[03]
  Add Comments in JSX
  
[内容]
  コメント -> 本来は「{/* コメント */}」だが、このファイル内では「// コメント」で記述
  
  {/* 要素「JSX」 */}
  const JSX = <h1>Hello</h1>;
  
[確認]
  // 省略
  
================================================================================
[04]
  Render HTML Elements to the DOM
  
[内容]
  要素「JSX」を描画指示
  
  // 要素「JSX」を描画指示
  ReactDOM.render(
    <h1>Hello</h1>,                 // 要素「JSX」
    document.getElementById('APP')  // 描画先コンテンツ
  );
  
[確認]
  // 省略
  
================================================================================
[05]
  Define an HTML Class in JSX
  
[内容]
  クラス属性を付与
  
  // キーワード「class」は使用不可で「className」を使用すること
  <h1 className='クラス名'>Hello JSX!</h1>
  
[確認]
  // 上記「01」を参照
  
================================================================================
[06]
  Learn About Self-Closing JSX Tags
  
[内容]
  終了タグが存在しない場合の記述例
  
  <br />                  // 改行
  <hr />                  // 水平線
  <img src="#" alt="" />  // 画像
  
[確認]
  // 上記「01」を参照
  
================================================================================
[07]
  Create a Stateless Functional Component
  
[内容]
  関数コンポーネント
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const DS1 = () => {
      return (
        <div id='DS1'>
          <p className='SAM1'>Hello!</p>
          <p className='SAM1'>Hello!</p>
        </div>
      );
    }
    
    // 関数コンポーネント
    const DS2 = () => {
      return (
        <div id='DS2'>
          <p className='SAM2'>Hello!</p>
          <p className='SAM2'>Hello!</p>
        </div>
      );
    }
    
    // メイン関数コンポーネント
    const MAIN = () => {
      return (
        <div>
          <BTN />  // ボタン配置
          <HRZ />  // 水平線タグ
          <DS1 />  // 文字列(赤色)
          <HRZ />  // 水平線タグ
          <DS2 />  // 文字列(緑色)
        </div>
      );
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[08]
  Create a React Component
  
[内容]
  クラスコンポーネント
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // クラスコンポーネント
    class BTN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div className='d-flex justify-content-center'>
            <button className='btn-default' id='MV1'>移動1</button>
            <button className='btn-default' id='MV2'>移動2</button>
          </div>
        );
      }
    }
    
    // クラスコンポーネント
    class HRZ extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <hr />
        );
      }
    }
    
    // クラスコンポーネント
    class DS1 extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='DS1'>
            <p className='SAM1'>Hello!</p>
            <p className='SAM1'>Hello!</p>
          </div>
        );
      }
    }
    
    // クラスコンポーネント
    class DS2 extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='DS2'>
            <p className='SAM2'>Hello!</p>
            <p className='SAM2'>Hello!</p>
          </div>
        );
      }
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div>
            <BTN />  // ボタン配置
            <HRZ />  // 水平線タグ
            <DS1 />  // 文字列(赤色)
            <HRZ />  // 水平線タグ
            <DS2 />  // 文字列(緑色)
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[09]
  Create a Component with Composition
  
[内容]
  クラスコンポーネント内で関数コンポーネントを呼び出す -> これが一般的な形らしい
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const DS1 = () => {
      return (
        <div id='DS1'>
          <p className='SAM1'>Hello!</p>
          <p className='SAM1'>Hello!</p>
        </div>
      );
    }
    
    // 関数コンポーネント
    const DS2 = () => {
      return (
        <div id='DS2'>
          <p className='SAM2'>Hello!</p>
          <p className='SAM2'>Hello!</p>
        </div>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div>
            <BTN />  // ボタン配置
            <HRZ />  // 水平線タグ
            <DS1 />  // 文字列(赤色)
            <HRZ />  // 水平線タグ
            <DS2 />  // 文字列(緑色)
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[10]
  Use React to Render Nested Components
  
[内容]
  関数コンポーネントから別の関数コンポーネントを呼ぶ -> コンポーネントのネスト化
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const SAM1 = () => {
      return (
        <div>
          <p className='SAM1'>Hello!</p>
          <p className='SAM1'>Hello!</p>
        </div>
      )
    }
    
    // 関数コンポーネント
    const SAM2 = () => {
      return (
        <div>
          <p className='SAM2'>Hello!</p>
          <p className='SAM2'>Hello!</p>
        </div>
      )
    }
    
    // 関数コンポーネント
    const DS1 = () => {
      return (
        <div id='DS1'>
          <SAM1 />
        </div>
      );
    }
    
    // 関数コンポーネント
    const DS2 = () => {
      return (
        <div id='DS2'>
          <SAM2 />
        </div>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div>
            <BTN />  // ボタン配置
            <HRZ />  // 水平線タグ
            <DS1 />  // 文字列(赤色)
            <HRZ />  // 水平線タグ
            <DS2 />  // 文字列(緑色)
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[11]
  Compose React Components
  
[内容]
  クラスコンポーネント内でクラスコンポーネントを呼出
  
[確認]
  // 省略
  
================================================================================
[12]
  Render a Class Component to the DOM
  
[内容]
  クラスコンポーネントをReactDOMに描画指示
  
[確認]
  // 省略
  
================================================================================
[13]
  Write a React Component from Scratch
  
[内容]
  クラスコンポーネントをReactDOMに描画指示 -> 全て一から自作の演習
  
[確認]
  // 省略
  
================================================================================
[14]
  Pass Props to a Stateless Functional Component
  
[内容]
  関数コンポーネントをパラメータ指定可能 -> 関数コンポーネント「DSP」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const DSP = (props) => {
      return (
        <div id={props.P1}>
          <p className={props.P2}>Hello!</p>
          <p className={props.P2}>Hello!</p>
        </div>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div>
            <BTN />
            <HRZ />
            <DSP P1='DS1' P2='SAM1'/>
            <HRZ />
            <DSP P1='DS2' P2='SAM2'/>
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[15]
  Pass an Array as Props

[内容]
  関数コンポーネントに配列のパラメータを渡す -> 関数コンポーネント「DSP」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <BTN />
            <HRZ />
            <DSP P1='DS1' P2='SAM1' ARR={WRD} />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[16]
  Use Default Props
  
[内容]
  関数コンポーネントへ渡されるパラメータのデフォルト値 -> 関数コンポーネント「DSP」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <BTN />
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[17]
  Override Default Props
  
[内容]
  パラメータ指定でデフォルト値を上書き
  
[確認]
  // 上記「16」を参照
  
================================================================================
[18]
  Use PropTypes to Define the Props You Expect
  
[内容]
  プロトタイプで関数コンポーネントのパラメータのデータ型チェック -> 関数コンポーネント「DSP」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <BTN />
            <HRZ />
            <DSP P1='DS1' P2='SAM1' ARR='AAA' />  // 実行時に警告 -> 後の処理でエラー
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[19]
  Access Props Using this.props
  
[内容]
  関数コンポーネントをクラスコンポーネントに書き換え -> 関数コンポーネント「DSP」に注目
  
  主な注意点としてパラメータ記述が異なる(例. ARR)
    props.ARR       -> 関数コンポーネント
    this.props.ARR  -> クラスコンポーネント
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // クラスコンポーネント
    class DSP extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        const arr = this.props.ARR;
        const ret = arr.map((val, idx) => <p key={idx} className={this.props.P2}>{val}</p>);
        
        return (
          <div id={this.props.P1}>
            {ret}
          </div>
        );
      }
    }
    
    // クラスコンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // クラスコンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <BTN />
            <HRZ />
            <DSP P1='DS1' P2='SAM1' ARR='AAA' />  // 実行時に警告 -> 後の処理でエラー
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[20]
  Review Using Props with Stateless Functional Components
  
[内容]
  関数コンポーネントのパラメータへのアクセスを復習
  
[確認]
  // 省略
  
================================================================================
[21]
  Create a Stateful Component
  
[内容]
  内部情報「state」を保有するコンポーネント
  クラスコンポーネント「MAIN」に注目
  
  内部情報「state」
  内部パラメータ「Count(クリック数)」を保持して「0」で初期化
  
  内部パラメータ「Count」
  画面下部に現在のクリック数を表示
  
  イベントハンドラ
  クラスコンポーネント内に「JQuery」のコードで実装可能
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1' onClick={this.MV1Click}>移動1</button>
              <button className='btn-default' id='MV2' onClick={this.MV2Click}>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <p id='CNT'>Click : {this.state.Count}</p>
          </div>
        );
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
    // クリック数の文字デザイン
    #CNT {
      color: black;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[22]
  Render State in the User Interface
  
[内容]
  内部情報「state」の内部パラメータ値を画面に描画
  
[確認]
  // 上記「21」を参照
  
================================================================================
[23]
  Render State in the User Interface Another Way
  
[内容]
  内部情報「state」の内部パラメータ値にアクセス
  
[確認]
  // 上記「21」を参照
  
================================================================================
[24]
  Set State with this.setState
  
[内容]
  内部情報「state」の内部パラメータ値を更新
  
[確認]
  // 上記「21」を参照
  
================================================================================
[25]
  Bind 'this' to a Class Method
  
[内容]
  画面に描画された要素に「MV1Click」や「MV2Click」のような内部メソッドへのアクセス権を与える
  
  // コンストラクタ内に記述
  this.MV1Click = this.MV1Click.bind(this);
  this.MV2Click = this.MV2Click.bind(this);
  
[確認]
  // 上記「21」を参照
  
================================================================================
[26]
  Use State to Toggle an Element
  
[内容]
  内部情報「state」の内部パラメータ値の更新時に注意
    メソッド「setState」の従来の記述では、リアルタイムで更新されない場合がある
  
  // 従来の記述
  this.setState({ Count: this.state.Count + 1 });
  
  // 正しい記述
  this.setState(state => ({ Count: this.state.Count + 1 }));
  
[確認]
  // 上記「21」を参照
  
================================================================================
[27]
  Write a Simple Counter
  
[内容]
  カウンター作成
  
[確認]
  // 上記「21」を参照
  
================================================================================
[28]
  Create a Controlled Input
  
[内容]
  フォームのテキストボックス作成
    一文字入力のたびに内部情報「state」の内部パラメータ値に保存 -> イベント「onChange」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { STR: '' }
        this.EDTChange = this.EDTChange.bind(this);
        this.BTNSubmit = this.BTNSubmit.bind(this);
      }
      
      // テキストボックス入力
      EDTChange(event) {
        event.persist();  // これが無いとeventがクリアされてエラー
        this.setState(state => ({STR: event.target.value}));
      }
      
      // 出力ボタン押下
      BTNSubmit(event) {
        console.log(`内部パラメータ値 : ${this.state.STR}`);
        event.preventDefault();
      }
      
      // 描画処理
      render() {
        return (
          <div>
            <form id='FRM' onSubmit={this.BTNSubmit.bind(this)}>
              <input id='EDT' type='text' onChange={this.EDTChange.bind(this)}></input>
              <input id='BTN' type='submit' value='出力'></input>
            </form>
            <hr />
            <p id='STR'>内部パラメータ値 : {this.state.STR}</p>
          </div>
        );
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 入力フォームのデザイン
    #FRM {
      margin: 5px;
      padding: 5px;
    }
    
    // 内部パラメータ値テキストのデザイン
    #STR {
      margin: 5px;
      padding: 5px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[29]
  Create a Controlled Form
  
[内容]
  フォームのボタン作成
    内部情報「state」の内部パラメータ値をコンソール出力
  
[確認]
  // 上記「28」を参照
  
================================================================================
[30]
  Pass State as Props to Child Components
  
[内容]
  内部情報「state」の内部パラメータ値を別の関数コンポーネントのパラメータ「props」として渡す
    関数コンポーネント「CNT」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT'>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1' onClick={this.MV1Click}>移動1</button>
              <button className='btn-default' id='MV2' onClick={this.MV2Click}>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <CNT P1={this.state.Count} />
          </div>
        );
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
    // クリック数の文字デザイン
    #CNT {
      color: black;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[31]
  Pass a Callback as Props
  
[内容]
  クラスコンポーネントの内部メソッドを別の関数コンポーネントのパラメータ「props」として渡す
    関数コンポーネント「MVB」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const MVB = (props) => {
      return (
        <button className='btn-default' id={props.P1} onClick={props.P2}>{props.P3}</button>
      );
    }
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT'>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <MVB P1='MV1' P2={this.MV1Click} P3='移動1' />
              <MVB P1='MV2' P2={this.MV2Click} P3='移動2' />
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <CNT P1={this.state.Count} />
          </div>
        );
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
    // クリック数の文字デザイン
    #CNT {
      color: black;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[32]
  Use the Lifecycle Method componentWillMount
  
[内容]
  ライフサイクルメソッド「componentWillMount」
    コンポーネントがDOMにマウント前に実行
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const MVB = (props) => {
      return (
        <button className='btn-default' id={props.P1} onClick={props.P2}>{props.P3}</button>
      );
    }
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT'>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // コンポーネントのマウント前
      componentWillMount() {
        console.log('コンポーネントのマウント前');
      }
      
      // 描画処理
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <MVB P1='MV1' P2={this.MV1Click} P3='移動1' />
              <MVB P1='MV2' P2={this.MV2Click} P3='移動2' />
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <CNT P1={this.state.Count} />
          </div>
        );
      }
      
      // コンポーネントのマウント後
      componentDidMount() {
        console.log('コンポーネントのマウント後');
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
    // クリック数の文字デザイン
    #CNT {
      color: black;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[33]
  Use the Lifecycle Method componentDidMount
  
[内容]
  ライフサイクルメソッド「componentDidMount」
    コンポーネントがDOMにマウント後に実行
  
[確認]
  // 上記「32」を参照
  
================================================================================
[34]
  Add Event Listeners
  
[内容]
  ライフサイクルメソッド「componentDidMount」
    コンポーネントのマウント後
  
  ライフサイクルメソッド「componentWillUnmount」
    コンポーネントのアンマウント前
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT'>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1'>移動1</button>
              <button className='btn-default' id='MV2'>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <CNT P1={this.state.Count} />
          </div>
        );
      }
      
      // コンポーネントのマウント後にイベント登録
      componentDidMount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.addEventListener('click', this.MV1Click);
        mv2.addEventListener('click', this.MV2Click);
      }
      
      // コンポーネントのアンマウント前にイベント削除
      componentWillUnmount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.removeEventListener('click', this.MV1Click);
        mv2.removeEventListener('click', this.MV2Click);
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
    // クリック数の文字デザイン
    #CNT {
      color: black;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[35]
  Optimize Re-Renders with shouldComponentUpdate
  
[内容]
  ライフサイクルメソッド「shouldComponentUpdate」
    コンポーネントが再描画される際のチェック処理に使用 -> 戻り値が「true」で再描画
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT'>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1'>移動1</button>
              <button className='btn-default' id='MV2'>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <CNT P1={this.state.Count} />
          </div>
        );
      }
      
      // コンポーネントのマウント後にイベント登録
      componentDidMount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.addEventListener('click', this.MV1Click);
        mv2.addEventListener('click', this.MV2Click);
      }
      
      // コンポーネントのアンマウント前にイベント削除
      componentWillUnmount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.removeEventListener('click', this.MV1Click);
        mv2.removeEventListener('click', this.MV2Click);
      }
      
      // クリック数が100回以内ならクリック数を更新する
      shouldComponentUpdate(nextProps, nextState) {
        return (nextState.Count <= 100) ? true : false ;
      }      
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
    // クリック数の文字デザイン
    #CNT {
      color: black;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[36]
  Introducing Inline Styles
  
[内容]
  インラインCSS
    要素の属性「style」にオブジェクト指定
  
  オブジェクト
    例. const OBJ1 = {color: 'red'};
    例. const OBJ2 = {color: 'red', fontSize: 15};
  
  指定方法
    例. <p style={OBJ1}>Hello!</p>
    例. <p style={OBJ2}>Hello!</p>
  
  プロパティ名が通常と異なる
    例. font-size   -> fontSize
    例. font-weight -> fontWeight
  
  長さの単位はデフォルトでピクセル、それ以外の単位は引用符が必要
    例. 40px → 40でOK
    例. 20em → '20em'
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // オブジェクト
    const OBJ1 = {color: 'aqua', fontSize: 15};
    const OBJ2 = {color: 'pink', fontSize: 15};
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT' style={OBJ2}>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        const WRD = ['Hello!', 'Hello!'];
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1'>移動1</button>
              <button className='btn-default' id='MV2'>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <CNT P1={this.state.Count} />
          </div>
        );
      }
      
      // コンポーネントのマウント後にイベント登録
      componentDidMount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.addEventListener('click', this.MV1Click);
        mv2.addEventListener('click', this.MV2Click);
      }
      
      // コンポーネントのアンマウント前にイベント削除
      componentWillUnmount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.removeEventListener('click', this.MV1Click);
        mv2.removeEventListener('click', this.MV2Click);
      }
      
      // クリック数が100回以内ならクリック数を更新する
      shouldComponentUpdate(nextProps, nextState) {
        return (nextState.Count <= 100) ? true : false ;
      }      
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
    // クリック数の文字デザイン
    #CNT {
      color: black;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[37]
  Add Inline Styles in React
  
[内容]
  インラインCSSの復習
  
[確認]
  // 上記「36」を参照
  
================================================================================
[38]
  Use Advanced JavaScript in React Render Method
  
[内容]
  JSX内でJSコード記述
    メソッド「render」内の「return」より前の部分で記述可能
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // CSSオブジェクト
    const CUNT = {
      color: 'black',
      fontSize: 15
    };
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT' style={CUNT}>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        
        // JS コード
        const WRD = ['Hello!', 'Hello!'];
        
        // JS コード - 構文「if」を使用して描画内容を決定
        let WRK = 'XX';
        
        // クリック数が「10」の倍数の時のみ「XX」からクリック数を表示
        if (this.state.Count % 10 === 0) {
          WRK = this.state.Count;
        }
        
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1'>移動1</button>
              <button className='btn-default' id='MV2'>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <CNT P1={WRK} />
          </div>
        );
      }
      
      // コンポーネントのマウント後にイベント登録
      componentDidMount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.addEventListener('click', this.MV1Click);
        mv2.addEventListener('click', this.MV2Click);
      }
      
      // コンポーネントのアンマウント前にイベント削除
      componentWillUnmount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.removeEventListener('click', this.MV1Click);
        mv2.removeEventListener('click', this.MV2Click);
      }
      
      // クリック数が100回以内ならクリック数を更新する
      shouldComponentUpdate(nextProps, nextState) {
        return (nextState.Count <= 100) ? true : false ;
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[39]
  Render with an If-Else Condition
  
[内容]
  構文「if」を使用して描画内容を決定
    メソッド「render」内の「return」より前の部分で記述可能
  
[確認]
  // 上記「38」を参照
  
================================================================================
[40]
  Use && for a More Concise Conditional
  
[内容]
  条件文「{(条件) && HTML要素}」で描画の可否を決定
    メソッド「render」内の「return」内で記述可能
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // CSSオブジェクト
    const CUNT = {
      color: 'black',
      fontSize: 15
    };
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT' style={CUNT}>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        
        // JS コード
        const WRD = ['Hello!', 'Hello!'];
        
        // JS コード
        let WRK = this.state.Count;
        
        // クリック数が「10」の倍数の時のみ関数コンポーネント「CNT」を実行
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1'>移動1</button>
              <button className='btn-default' id='MV2'>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            {this.state.Count % 10 === 0 && <CNT P1={WRK} />}
          </div>
        );
      }
      
      // コンポーネントのマウント後にイベント登録
      componentDidMount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.addEventListener('click', this.MV1Click);
        mv2.addEventListener('click', this.MV2Click);
      }
      
      // コンポーネントのアンマウント前にイベント削除
      componentWillUnmount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.removeEventListener('click', this.MV1Click);
        mv2.removeEventListener('click', this.MV2Click);
      }
      
      // クリック数が100回以内ならクリック数を更新する
      shouldComponentUpdate(nextProps, nextState) {
        return (nextState.Count <= 100) ? true : false ;
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[41]
  Use a Ternary Expression for Conditional Rendering
  
[内容]
  三項演算子「(条件) ? (true) : (false)」で描画の可否を決定
    メソッド「render」内の「return」内で記述可能
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // CSSオブジェクト
    const CUNT = {
      color: 'black',
      fontSize: 15
    };
    
    // 関数コンポーネント
    const CNT = (props) => {
      return (
        <p id='CNT' style={CUNT}>Click : {props.P1}</p>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        
        // JS コード
        const WRD = ['Hello!', 'Hello!'];
        
        // JS コード
        let WRK = this.state.Count;
        
        // クリック数が「10」の倍数の時のみ関数コンポーネント「CNT」を実行
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1'>移動1</button>
              <button className='btn-default' id='MV2'>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            {this.state.Count % 10 === 0 ? <CNT P1={WRK} /> : ''}
          </div>
        );
      }
      
      // コンポーネントのマウント後にイベント登録
      componentDidMount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.addEventListener('click', this.MV1Click);
        mv2.addEventListener('click', this.MV2Click);
      }
      
      // コンポーネントのアンマウント前にイベント削除
      componentWillUnmount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.removeEventListener('click', this.MV1Click);
        mv2.removeEventListener('click', this.MV2Click);
      }
      
      // クリック数が100回以内ならクリック数を更新する
      shouldComponentUpdate(nextProps, nextState) {
        return (nextState.Count <= 100) ? true : false ;
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[42]
  Render Conditionally from Props
  
[内容]
  パラメータ「props」または「this.props」で描画の可否を決定
    関数コンポーネント「CNT」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const ret = arr.map((val, idx) => <p key={idx} className={props.P2}>{val}</p>);
      
      return (
        <div id={props.P1}>
          {ret}
        </div>
      );
    }
    
    // 関数コンポーネントのデフォルト値
    DSP.defaultProps = {
      P1: 'DS1',
      P2: 'SAM1',
      ARR: ['Hello!', 'Hello!']
    }
    
    // 関数コンポーネントのデータ型チェック
    DSP.propTypes = {
      PS1: React.PropTypes.string,
      PS2: React.PropTypes.string,
      ARR: React.PropTypes.array
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // CSSオブジェクト
    const OBJ = {
      color: 'black',
      fontSize: 15
    };
    
    // 関数コンポーネント
    const CNT = (props) => {
      let ret = <p></p>;
      
      // クリック数が「10」の倍数の時のみ表示
      if (props.P1 % 10 === 0) {
        ret = <p id='CNT' style={OBJ}>Click : {props.P1}</p>
      }
      
      return ret;
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
        this.state = { Count: 0 }
        this.MV1Click = this.MV1Click.bind(this);
        this.MV2Click = this.MV2Click.bind(this);
      }
      
      // ボタン「移動1」をクリック
      MV1Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM1:last').appendTo('#DS2').removeClass('SAM1').addClass('SAM2');
      }
      
      // ボタン「移動2」をクリック
      MV2Click() {
        this.setState(state => ({ Count: this.state.Count + 1 }));
        $('.SAM2:last').appendTo('#DS1').removeClass('SAM2').addClass('SAM1');
      }
      
      // 描画処理
      render() {
        
        // JS コード
        const WRD = ['Hello!', 'Hello!'];
        
        // JS コード
        let WRK = this.state.Count;
        
        // クリック数が「10」の倍数の時のみ表示
        return (
          <div>
            <div className='d-flex justify-content-center'>
              <button className='btn-default' id='MV1'>移動1</button>
              <button className='btn-default' id='MV2'>移動2</button>
            </div>
            <HRZ />
            <DSP />
            <HRZ />
            <DSP P1='DS2' P2='SAM2' ARR={WRD} />
            <HRZ />
            <CNT P1={WRK} />
          </div>
        );
      }
      
      // コンポーネントのマウント後にイベント登録
      componentDidMount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.addEventListener('click', this.MV1Click);
        mv2.addEventListener('click', this.MV2Click);
      }
      
      // コンポーネントのアンマウント前にイベント削除
      componentWillUnmount() {
        const mv1 = document.getElementById('MV1');
        const mv2 = document.getElementById('MV2');
        mv1.removeEventListener('click', this.MV1Click);
        mv2.removeEventListener('click', this.MV2Click);
      }
      
      // クリック数が100回以内ならクリック数を更新する
      shouldComponentUpdate(nextProps, nextState) {
        return (nextState.Count <= 100) ? true : false ;
      }
      
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[43]
  Change Inline CSS Conditionally Based on Component State
  
[内容]
  内部情報「state」でインラインCSSを決定
    メソッド「render」内の「return」内で記述可能
  
[確認]
  // 省略
  
================================================================================
[44]
  Use Array.map() to Dynamically Render Elements
  
[内容]
  HTMLリスト作成(1)
    関数「map」で生成される要素に属性「key」が無いと警告
  
[確認]
  // 上記「42」の関数コンポーネント「DSP」を参照
  
================================================================================
[45]
  Give Sibling Elements a Unique Key Attribute
  
[内容]
  HTMLリスト作成(2)
    生成要素に属性「key」を付与する ->「<li key=変数++>リスト項目</li>」でも良いが手間がかかる
  
[確認]
  // 上記「42」の関数コンポーネント「DSP」を参照
  
================================================================================
[46]
  Use Array.filter() to Dynamically Filter an Array
  
[内容]
  関数「filter」の抽出要素を関数「map」で加工してHTMLリスト表示 -> 関数コンポーネント「DSP」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const DSP = (props) => {
      const arr = props.ARR;
      const tmp = arr.filter(val => val % 2 === 0);
      const ret = tmp.map((val, idx) => <li key={idx} className={props.CLASS}>項目{val}</li>);
      
      return (
        <ul className='list-group'>
          {ret}
        </ul>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      
      // コンストラクタ
      constructor(props) {
        super(props);
      }
      
      // 描画処理
      render() {
        
        // JS コード
        let arr = [];
        for (let i = 1; i < 10; i++) arr.push(i);
        
        // 偶数のリスト項目のみ出力
        return (
          <div>
            <DSP ARR={arr} CLASS='list-group-item-success' />
            <DSP ARR={arr} CLASS='list-group-item-info' />
            <DSP ARR={arr} CLASS='list-group-item-warning' />
          </div>
        );
        
      }
    }
    
    // 要素「JSX」を描画指示
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  // CSS
  <style>
    ul li {
      text-align: center;
      line-height: 3em;
      list-style: none;
    }
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[47]
  Render React on the Server with renderToString
  
[内容]
  サーバー側で描画(HTML化)したものを返す
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  // Bootstrap - CSS
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  
  // JQuery
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  
  // React
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  
  // Babel
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML -> 要素「JSX」 の描画先
  <div id="APP"></div>
  
  // JSX
  <script type="text/babel">
    
    // 関数コンポーネント
    const BTN = () => {
      return (
        <div className='d-flex justify-content-center'>
          <button className='btn-default' id='MV1'>移動1</button>
          <button className='btn-default' id='MV2'>移動2</button>
        </div>
      );
    }
    
    // 関数コンポーネント
    const HRZ = () => { return (<hr />); }
    
    // 関数コンポーネント
    const DS1 = () => {
      return (
        <div id='DS1'>
          <p className='SAM1'>Hello!</p>
          <p className='SAM1'>Hello!</p>
        </div>
      );
    }
    
    // 関数コンポーネント
    const DS2 = () => {
      return (
        <div id='DS2'>
          <p className='SAM2'>Hello!</p>
          <p className='SAM2'>Hello!</p>
        </div>
      );
    }
    
    // メインクラスコンポーネント
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div>
            <BTN />  // ボタン配置
            <HRZ />  // 水平線タグ
            <DS1 />  // 文字列(赤色)
            <HRZ />  // 水平線タグ
            <DS2 />  // 文字列(緑色)
          </div>
        );
      }
    }
    
    // 要素「JSX」を描画指示
    //ReactDOM.render(
    //  <MAIN />,
    //  document.getElementById('APP')
    //);
    
    // サーバー側で要素「JSX」を描画指示
    ReactDOMServer.renderToString(<MAIN />);
    
  </script>
  
  // CSS
  <style>
    
    // 上部分の文字デザイン
    .SAM1 {
      color: red;
      font-size: 15px;
    }
    
    // 下部分の文字デザイン
    .SAM2 {
      color: green;
      font-size: 15px;
    }
    
  </style>
  
  // Bootstrap - JS
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  
  // Bootstrap - JS
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
  // JS -> JQuery
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
