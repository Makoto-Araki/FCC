================================================================================
[00] Introduction to the Object Oriented Programming Challenges
[01] Create a Basic JavaScript Object
[02] Use Dot Notation to Access the Properties of an Object
[03] Create a Method on an Object
[04] Make Code More Reusable with the this Keyword
[05] Define a Constructor Function
[06] Use a Constructor to Create Objects
[07] Extend Constructors to Receive Arguments
[08] Verify an Object's Constructor with instanceof
[09] Understand Own Properties
[10] Use Prototype Properties to Reduce Duplicate Code
[11] Iterate Over All Properties
[12] Understand the Constructor Property
[13] Change the Prototype to a New Object
[14] Remember to Set the Constructor Property when Changing the Prototype
[15] Understand Where an Object’s Prototype Comes From
[16] Understand the Prototype Chain
[17] Use Inheritance So You Don't Repeat Yourself
[18] Inherit Behaviors from a Supertype
[19] Set the Child's Prototype to an Instance of the Parent
[20] Reset an Inherited Constructor Property
[21] Add Methods After Inheritance
[22] Override Inherited Methods
[23] Use a Mixin to Add Common Behavior Between Unrelated Objects
[24] Use Closure to Protect Properties Within an Object from Being Modified Externally
[25] Understand the Immediately Invoked Function Expression (IIFE)
[26] Use an IIFE to Create a Module
================================================================================
[01]
  Create a Basic JavaScript Object
  
[内容]
  オブジェクト紹介
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // オブジェクト => 直角三角形
    const Triangle = {
      底辺: 3,
      高さ: 4,
      斜辺: 5
    }
    
    // 出力
    console.log(Triangle);
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[02]
  Use Dot Notation to Access the Properties of an Object
  
[内容]
  オブジェクトのプロパティにアクセス
    表記「オブジェクト.プロパティ名」
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // オブジェクト => 直角三角形
    const Triangle = {
      底辺: 3,
      高さ: 4,
      斜辺: 5
    }
    
    // 出力
    console.log(`底辺 : ${Triangle.底辺}`);  // 3
    console.log(`高さ : ${Triangle.高さ}`);  // 4
    console.log(`斜辺 : ${Triangle.斜辺}`);  // 5
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[03]
  Create a Method on an Object
  
[内容]
  オブジェクトにメソッド(関数)を追加
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // オブジェクト => 直角三角形
    const Triangle = {
      底辺: 3,
      高さ: 4,
      斜辺: 5,
      周辺: function() { return Triangle.底辺 + Triangle.高さ + Triangle.斜辺 ; },
      面積: function() { return Triangle.底辺 * Triangle.高さ / 2 ; }
    }
    
    // 出力
    console.log(`周辺 : ${Triangle.周辺()}`);  // 12
    console.log(`面積 : ${Triangle.面積()}`);  // 6
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[04]
  Make Code More Reusable with the this Keyword
  
[内容]
  キーワード「this」を使用
    オブジェクト名が変更されてもメソッドは使用可能
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // オブジェクト => 直角三角形
    const Triangle = {
      底辺: 3,
      高さ: 4,
      斜辺: 5,
      周辺: function() { return this.底辺 + this.高さ + this.斜辺 ; },
      面積: function() { return this.底辺 * this.高さ / 2 ; }
    }
    
    // 出力
    console.log(`周辺 : ${Triangle.周辺()}`);  // 12
    console.log(`面積 : ${Triangle.面積()}`);  // 6
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[05]
  Define a Constructor Function
  
[内容]
  コンストラクタ関数で擬似的なクラス実装
    プロパティ => 底辺, 高さ, 斜辺
    メソッド => 周辺, 面積
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // コンストラクタ関数 => 直角三角形
    function Triangle() {
      this.底辺 = 3;
      this.高さ = 4;
      this.斜辺 = 5;
      this.周辺 = () => this.底辺 + this.高さ + this.斜辺;
      this.面積 = () => this.底辺 * this.高さ / 2;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle();
    const t2 = new Triangle();
    
    // 出力
    console.log(`周辺(t1) : ${t1.周辺()}`);  // 12
    console.log(`周辺(t2) : ${t2.周辺()}`);  // 12
    console.log(`面積(t1) : ${t1.面積()}`);  // 6
    console.log(`面積(t2) : ${t2.面積()}`);  // 6
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[06]
  Use a Constructor to Create Objects
  
[内容]
  コンストラクタ関数からオブジェクト生成
  
[確認]
  // 上記「05」を参照
  
================================================================================
[07]
  Extend Constructors to Receive Arguments
  
[内容]
  コンストラクタ関数を引数指定が可能にする
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
      this.周辺 = () => this.底辺 + this.高さ + this.斜辺;
      this.面積 = () => this.底辺 * this.高さ / 2;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    const t2 = new Triangle(6, 8, 10);
    
    // 出力
    console.log(`周辺(t1) : ${t1.周辺()}`);  // 12
    console.log(`周辺(t2) : ${t2.周辺()}`);  // 24
    console.log(`面積(t1) : ${t1.面積()}`);  // 6
    console.log(`面積(t2) : ${t2.面積()}`);  // 24
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[08]
  Verify an Object's Constructor with instanceof
  
[内容]
  コンストラクタ由来のオブジェクトか検証
    演算子「instanceof」
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
      this.周辺 = () => this.底辺 + this.高さ + this.斜辺;
      this.面積 = () => this.底辺 * this.高さ / 2;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    const t2 = new Triangle(6, 8, 10);
    
    // コンストラクタ由来のオブジェクトか検証
    console.log(t1 instanceof Triangle);  // true
    console.log(t2 instanceof Triangle);  // true
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[09]
  Understand Own Properties
  
[内容]
  各プロパティが固有プロパティか確認
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
      this.周辺 = () => this.底辺 + this.高さ + this.斜辺;
      this.面積 = () => this.底辺 * this.高さ / 2;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    
    // 各プロパティが固有プロパティか確認
    console.log(`底辺 : ${t1.hasOwnProperty('底辺')}`);  // true
    console.log(`高さ : ${t1.hasOwnProperty('高さ')}`);  // true
    console.log(`斜辺 : ${t1.hasOwnProperty('斜辺')}`);  // true
    console.log(`周辺 : ${t1.hasOwnProperty('周辺')}`);  // true
    console.log(`面積 : ${t1.hasOwnProperty('面積')}`);  // true
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[10]
  Use Prototype Properties to Reduce Duplicate Code
  
[内容]
  プロトタイプを使用してコード量を削減
    プロトタイプ配下は全インスタンスで共有 => オブジェクト生成時にメモリ節約
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // プロトタイプ配下のメソッド
    Triangle.prototype.周辺 = function() {
      return this.底辺 + this.高さ + this.斜辺 ;
    }
    
    // プロトタイプ配下のメソッド
    Triangle.prototype.面積 = function() {
      return this.底辺 * this.高さ / 2 ;
    }
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    const t2 = new Triangle(6, 8, 10);
    
    // 出力
    console.log(`周辺(t1) : ${t1.周辺()}`);  // 12
    console.log(`周辺(t2) : ${t2.周辺()}`);  // 24
    console.log(`面積(t1) : ${t1.面積()}`);  // 6
    console.log(`面積(t2) : ${t2.面積()}`);  // 24
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[11]
  Iterate Over All Properties
  
[内容]
  全プロパティを固有プロパティかプロトタイプか判定
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // プロトタイプ配下のメソッド
    Triangle.prototype.周辺 = function() {
      return this.底辺 + this.高さ + this.斜辺 ;
    }
    
    // プロトタイプ配下のメソッド
    Triangle.prototype.面積 = function() {
      return this.底辺 * this.高さ / 2 ;
    }
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    
    // 各プロパティが固有プロパティか確認
    console.log(`底辺 : ${t1.hasOwnProperty('底辺')}`);  // true
    console.log(`高さ : ${t1.hasOwnProperty('高さ')}`);  // true
    console.log(`斜辺 : ${t1.hasOwnProperty('斜辺')}`);  // true
    console.log(`周辺 : ${t1.hasOwnProperty('周辺')}`);  // false
    console.log(`面積 : ${t1.hasOwnProperty('面積')}`);  // false
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[12]
  Understand the Constructor Property
  
[内容]
  プロパティ「constructor」
    オブジェクトのコンストラクタ関数を参照
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // プロトタイプ配下のメソッド
    Triangle.prototype.周辺 = function() {
      return this.底辺 + this.高さ + this.斜辺 ;
    }
    
    // プロトタイプ配下のメソッド
    Triangle.prototype.面積 = function() {
      return this.底辺 * this.高さ / 2 ;
    }
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    const t2 = new Triangle(6, 8, 10);
    
    // オブジェクトのコンストラクタ関数を参照
    console.log(t1.constructor);  // function Triangle(p1, p2, p3)
    console.log(t2.constructor);  // function Triangle(p1, p2, p3)
    
    // 出力
    console.log(`周辺(t1) : ${t1.周辺()}`);  // 12
    console.log(`周辺(t2) : ${t2.周辺()}`);  // 24
    console.log(`面積(t1) : ${t1.面積()}`);  // 6
    console.log(`面積(t2) : ${t2.面積()}`);  // 24
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[13]
  Change the Prototype to a New Object
  
[内容]
  プロトタイプをオブジェクトで指定
    プロパティ「constructor」まで上書き => 値が「function Object」に初期化
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // プロトタイプをオブジェクトで指定
    Triangle.prototype = {
      
      // メソッド
      周辺() { return this.底辺 + this.高さ + this.斜辺 ; },
      
      // メソッド
      面積() { return this.底辺 * this.高さ / 2 ; }
      
    }
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    const t2 = new Triangle(6, 8, 10);
    
    // オブジェクトのコンストラクタ関数を参照
    console.log(t1.constructor);  // function Object() -> プロパティ「constructor」まで上書き
    console.log(t2.constructor);  // function Object() -> プロパティ「constructor」まで上書き
    
    // 出力
    console.log(`周辺(t1) : ${t1.周辺()}`);  // 12
    console.log(`周辺(t2) : ${t2.周辺()}`);  // 24
    console.log(`面積(t1) : ${t1.面積()}`);  // 6
    console.log(`面積(t2) : ${t2.面積()}`);  // 24
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[14]
  Remember to Set the Constructor Property when Changing the Prototype
  
[内容]
  プロパティ「constructor」の上書きを阻止
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // プロトタイプをオブジェクトで指定
    Triangle.prototype = {
      
      // コンストラクタを明示
      constructor: Triangle,
      
      // メソッド
      周辺() { return this.底辺 + this.高さ + this.斜辺 ; },
      
      // メソッド
      面積() { return this.底辺 * this.高さ / 2 ; }
      
    }
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    const t2 = new Triangle(6, 8, 10);
    
    // オブジェクトのコンストラクタ関数を参照
    console.log(t1.constructor);  // function Triangle(p1, p2, p3)
    console.log(t2.constructor);  // function Triangle(p1, p2, p3)
    
    // 出力
    console.log(`周辺(t1) : ${t1.周辺()}`);  // 12
    console.log(`周辺(t2) : ${t2.周辺()}`);  // 24
    console.log(`面積(t1) : ${t1.面積()}`);  // 6
    console.log(`面積(t2) : ${t2.面積()}`);  // 24
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[15]
  Understand Where an Object’s Prototype Comes From
  
[内容]
  メソッド「isPrototypeOf」
    プロタイプの由来を確認
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // プロトタイプをオブジェクトで指定
    Triangle.prototype = {
      
      // コンストラクタを明示
      constructor: Triangle,
      
      // メソッド
      周辺() { return this.底辺 + this.高さ + this.斜辺 ; },
      
      // メソッド
      面積() { return this.底辺 * this.高さ / 2 ; }
      
    }
    
    // コンストラクタ関数 => 直角三角形
    function Triangle(p1, p2, p3) {
      this.底辺 = p1;
      this.高さ = p2;
      this.斜辺 = p3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const t1 = new Triangle(3, 4, 5);
    const t2 = new Triangle(6, 8, 10);
    
    // オブジェクトのコンストラクタ関数を参照
    console.log(t1.constructor);  // function Triangle(p1, p2, p3)
    console.log(t2.constructor);  // function Triangle(p1, p2, p3)
    
    // プロタイプの由来を確認
    console.log(Triangle.prototype.isPrototypeOf(t1));  // true
    console.log(Triangle.prototype.isPrototypeOf(t2));  // true
    
    // 出力
    console.log(`周辺(t1) : ${t1.周辺()}`);  // 12
    console.log(`周辺(t2) : ${t2.周辺()}`);  // 24
    console.log(`面積(t1) : ${t1.面積()}`);  // 6
    console.log(`面積(t2) : ${t2.面積()}`);  // 24
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[16]
  Understand the Prototype Chain
  
[内容]
  プロトタイプチェーン
    あるオブジェクトのプロトタイプを別のオブジェクトのプロトタイプとして使用可能にする
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 人間のプロトタイプ
    Human.prototype = {
      挨拶(p1) { return 'こんにちは ' + p1 + ' さん' ; }
    }
    
    // コンストラクタ関数 => 人間
    function Human(p1) {
      this.名前 = p1;
    }
    
    // コンストラクタ関数 => 少年
    function Boy(p1) {
      this.名前 = p1;
    }
    
    // 少年が人間のプロトタイプの使用を可能にする
    Boy.prototype = new Human();
    
    // 少年のオブジェクト生成
    const B1 = new Boy('柊');
    const B2 = new Boy('楓');
    
    // コンストラクタ
    console.log(B1.constructor);  // function Object() -> プロパティ「constructor」まで上書き
    console.log(B2.constructor);  // function Object() -> プロパティ「constructor」まで上書き
    
    // 少年が人間のプロトタイプのメソッドを使用可能か確認
    console.log(B1.挨拶('山本'));  // こんにちは 山本 さん
    console.log(B2.挨拶('山本'));  // こんにちは 山本 さん
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[17]
  Use Inheritance So You Don't Repeat Yourself
  
[内容]
  上位のプロトタイプに重複コードを移動
    上記「16」のように「少年」ではなく「人間」にメソッドを移動しておけばコード量を削減可能
  
[確認]
  // 上記「16」を参照
  
================================================================================
[18]
  Inherit Behaviors from a Supertype
  
[内容]
  メソッド「Object.create」を使用して上記「16」のプロトタイプチェーンを実現
    変更前 : Boy.prototype = new Human();
    変更後 : Boy.prototype = Object.create(Human.prototype);
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 人間のプロトタイプ
    Human.prototype = {
      挨拶(p1) { return 'こんにちは ' + p1 + ' さん' ; }
    }
    
    // コンストラクタ関数 => 人間
    function Human(p1) {
      this.名前 = p1;
    }
    
    // コンストラクタ関数 => 少年
    function Boy(p1) {
      this.名前 = p1;
    }
    
    // 少年が人間のプロトタイプの使用を可能にする
    Boy.prototype = Object.create(Human.prototype);
    
    // 少年のオブジェクト生成
    const B1 = new Boy('柊');
    const B2 = new Boy('楓');
    
    // コンストラクタ
    console.log(B1.constructor);  // function Object() -> プロパティ「constructor」まで上書き
    console.log(B2.constructor);  // function Object() -> プロパティ「constructor」まで上書き
    
    // 少年が人間のプロトタイプのメソッドを使用可能か確認
    console.log(B1.挨拶('山本'));  // こんにちは 山本 さん
    console.log(B2.挨拶('山本'));  // こんにちは 山本 さん
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[19]
  Set the Child's Prototype to an Instance of the Parent
  
[内容]
  親クラス「人間」のプロトタイプを子クラス「少年」のプロトタイプに継承
    メソッド「Object.create」を使用
  
[確認]
  // 上記「18」を参照
  
================================================================================
[20]
  Reset an Inherited Constructor Property
  
[内容]
  親クラス「人間」のプロトタイプを子クラス「少年」のプロトタイプに継承
    コンストラクタ修正
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 人間のプロトタイプ
    Human.prototype = {
      挨拶(p1) { return 'こんにちは ' + p1 + ' さん' ; }
    }
    
    // コンストラクタ関数 => 人間
    function Human(p1) {
      this.名前 = p1;
    }
    
    // コンストラクタ関数 => 少年
    function Boy(p1) {
      this.名前 = p1;
    }
    
    // 少年が人間のプロトタイプの使用を可能にする
    Boy.prototype = Object.create(Human.prototype);
    
    // コンストラクタ修正
    Boy.prototype.constructor = Boy;
    
    // 少年のオブジェクト生成
    const B1 = new Boy('柊');
    const B2 = new Boy('楓');
    
    // コンストラクタ
    console.log(B1.constructor);  // function Boy(p1)
    console.log(B2.constructor);  // function Boy(p1)
    
    // 少年が人間のプロトタイプのメソッドを使用可能か確認
    console.log(B1.挨拶('山本'));  // こんにちは 山本 さん
    console.log(B2.挨拶('山本'));  // こんにちは 山本 さん
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[21]
  Add Methods After Inheritance
  
[内容]
  親クラス「人間」のプロトタイプを子クラス「少年」のプロトタイプに継承
    子クラス「少年」のプロトタイプに関数を追加
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 人間のプロトタイプ
    Human.prototype = {
      挨拶(p1) { return 'こんにちは ' + p1 + ' さん' ; }
    }
    
    // コンストラクタ関数 => 人間
    function Human(p1) {
      this.名前 = p1;
    }
    
    // コンストラクタ関数 => 少年
    function Boy(p1) {
      this.名前 = p1;
    }
    
    // 少年が人間のプロトタイプの使用を可能にする
    Boy.prototype = Object.create(Human.prototype);
    
    // コンストラクタ修正
    Boy.prototype.constructor = Boy;
    
    // プロトタイプに関数を追加
    Boy.prototype.別れ = (p1) => 'さようなら ' + p1 + ' さん' ;
    
    // 少年のオブジェクト生成
    const B1 = new Boy('柊');
    const B2 = new Boy('楓');
    
    // コンストラクタ
    console.log(B1.constructor);  // function Boy(p1)
    console.log(B2.constructor);  // function Boy(p1)
    
    // 少年が人間のプロトタイプのメソッドを使用可能か確認
    console.log(B1.挨拶('山本'));  // こんにちは 山本 さん
    console.log(B2.挨拶('山本'));  // こんにちは 山本 さん
    
    // 追加した関数を使用
    console.log(B1.別れ('山本'));  // さようなら 山本 さん
    console.log(B2.別れ('山本'));  // さようなら 山本 さん
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[22]
  Override Inherited Methods
  
[内容]
  親クラス「人間」のプロトタイプを子クラス「少年」のプロトタイプに継承
    継承した親クラス「人間」のメソッドをオーバーライド
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 人間のプロトタイプ
    Human.prototype = {
      挨拶(p1) { return 'こんにちは ' + p1 + ' さん' ; }
    }
    
    // コンストラクタ関数 => 人間
    function Human(p1) {
      this.名前 = p1;
    }
    
    // コンストラクタ関数 => 少年
    function Boy(p1) {
      this.名前 = p1;
    }
    
    // 少年が人間のプロトタイプの使用を可能にする
    Boy.prototype = Object.create(Human.prototype);
    
    // コンストラクタ修正
    Boy.prototype.constructor = Boy;
    
    // プロトタイプに関数を追加
    Boy.prototype.別れ = (p1) => 'さようなら ' + p1 + ' さん' ;
    
    // オーバーライド
    Boy.prototype.挨拶 = (p1) => 'こんばんわ ' + p1 + ' さん' ;
    
    // 少年のオブジェクト生成
    const B1 = new Boy('柊');
    const B2 = new Boy('楓');
    
    // コンストラクタ
    console.log(B1.constructor);  // function Boy(p1)
    console.log(B2.constructor);  // function Boy(p1)
    
    // 少年が人間のプロトタイプのメソッドを使用可能か確認
    console.log(B1.挨拶('山本'));  // こんばんわ 山本 さん
    console.log(B2.挨拶('山本'));  // こんばんわ 山本 さん
    
    // 追加した関数を使用
    console.log(B1.別れ('山本'));  // さようなら 山本 さん
    console.log(B2.別れ('山本'));  // さようなら 山本 さん
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[23]
  Use a Mixin to Add Common Behavior Between Unrelated Objects
  
[内容]
  共有関数
    共有関数の引数にオブジェクトを指定して、オブジェクトに関数を実装する
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 共有関数
    const add = function(OBJ) {
      OBJ.add = (p1, p2) => p1 + p2 ;
    }
    
    // オブジェクト
    const 飛行機 = { 名前: 'A-001', 製造: '2021-01-10' }
    const 自動車 = { 名前: 'C-001', 製造: '2021-01-10' }
    
    // 各オブジェクトに共有関数を実装
    add(飛行機);
    add(自動車);
    
    // 共有関数を実行
    console.log(飛行機.add(12, 11));
    console.log(自動車.add(22, 21));
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[24]
  Use Closure to Protect Properties Within an Object from Being Modified Externally
  
[内容]
  クロージャー
    関数内で一時的に使用する関数 => 一つ上のローカル変数を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 人間のプロトタイプ
    Human.prototype = {
      紹介()   { return '初めまして ' + this.名前 + ' と申します' ; },
      挨拶(p1) { return 'こんにちわ ' + p1 + ' さん' ; },
      別れ(p1) { return 'さようなら ' + p1 + ' さん' ; }
    }
    
    // コンストラクタ関数 => 人間
    function Human(p1, p2, p3, p4) {
      
      // プロパティ
      this.名前 = p1;
      this.性別 = p2;
      this.身長 = p3;  // (m)
      this.体重 = p4;  // (kg)
      
      // ローカル変数
      const BMI = this.体重 / this.身長 / this.身長 ;
      
      // クロージャー(関数内で一時的に使用する関数) => 一つ上のローカル変数「BMI」を参照
      this.計算 = () => `BMI値 : ${BMI}` ;
      
    }
    
    // オブジェクト生成
    const p1 = new Human('荒木1', '男', 1.7, 73);
    const p2 = new Human('荒木2', '男', 1.9, 73);
    
    // 紹介
    console.log(p1.紹介());  // はじめまして 荒木1 と申します
    console.log(p2.紹介());  // はじめまして 荒木2 と申します
    
    // ローカル変数へアクセス
    console.log(p1.BMI);  // undefined => 直接参照は不可つまりカプセル化？
    console.log(p2.BMI);  // undefined => 直接参照は不可つまりカプセル化？
    
    // クロージャー実行
    console.log(p1.計算());  // 25.25...
    console.log(p2.計算());  // 20.22...
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[25]
  Understand the Immediately Invoked Function Expression (IIFE)
  
[内容]
  即時関数(IIFE)
    無名ブロックで変数にも格納しない
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 通常関数
    const myFunc = () => {
      console.log('Hello');
    }
    
    // 通常関数は呼出が必要
    myFunc();  // Hello
    
    // 即時関数
    (() => {
      console.log('Hello');
    })()
    
    // 即時関数は呼出が必要ない
    // Hello
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[26]
  Use an IIFE to Create a Module
  
[内容]
  即時関数を使用してモジュール作成
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // モジュール
    const Calculation = (() => {
      return {
        add: (OBJ) => {
          OBJ.add = (p1, p2) => p1 + p2;
        },
        sub: (OBJ) => {
          OBJ.sub = (p1, p2) => p1 - p2;
        },
        mul: (OBJ) => {
          OBJ.mul = (p1, p2) => p1 * p2;
        },
        div: (OBJ) => {
          OBJ.div = (p1, p2) => p1 / p2;
        }
      }
    })();
    
    // オブジェクト
    const 飛行機 = { 名前: 'A-001', 製造: '2021-01-10' }
    const 自動車 = { 名前: 'C-001', 製造: '2021-01-10' }
    
    // 各オブジェクトに共有関数を実装
    Calculation.add(飛行機);
    Calculation.add(自動車);
    
    // 共有関数を実行
    console.log(飛行機.add(12, 11));
    console.log(自動車.add(22, 21));
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
