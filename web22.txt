================================================================================
[01] Create a Simple JSX Element
[02] Create a Complex JSX Element
[03] Add Comments in JSX
[04] Render HTML Elements to the DOM
[05] Define an HTML Class in JSX
[06] Learn About Self-Closing JSX Tags
[07] Create a Stateless Functional Component
[08] Create a React Component
[09] Create a Component with Composition
[10] Use React to Render Nested Components
[11] Compose React Components
[12] Render a Class Component to the DOM
[13] Write a React Component from Scratch
[14] Pass Props to a Stateless Functional Component
[15] Pass an Array as Props
[16] Use Default Props
[17] Override Default Props
[18] Use PropTypes to Define the Props You Expect
[19] Access Props Using this.props
[20] Review Using Props with Stateless Functional Components
[21] Create a Stateful Component
[22] Render State in the User Interface
[23] Render State in the User Interface Another Way
[24] Set State with this.setState
[25] Bind 'this' to a Class Method
[26] Use State to Toggle an Element
[27] Write a Simple Counter
[28] Create a Controlled Input
[29] Create a Controlled Form
[30] Pass State as Props to Child Components
[31] Pass a Callback as Props
[32] Use the Lifecycle Method componentWillMount
[33] Use the Lifecycle Method componentDidMount
[34] Add Event Listeners
[35] Optimize Re-Renders with shouldComponentUpdate
[36] Introducing Inline Styles
[37] Add Inline Styles in React
[38] Use Advanced JavaScript in React Render Method
[39] Render with an If-Else Condition
[40] Use && for a More Concise Conditional
[41] Use a Ternary Expression for Conditional Rendering
[42] Render Conditionally from Props
[43] Change Inline CSS Conditionally Based on Component State
[44] Use Array.map() to Dynamically Render Elements
[45] Give Sibling Elements a Unique Key Attribute
[46] Use Array.filter() to Dynamically Filter an Array
[47] Render React on the Server with renderToString
================================================================================
[01]
  Create a Simple JSX Element
  
[内容]
  要素「JSX」を作成
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 要素「JSX」*/} 
    const JSX = (
      <div id='ROOT'>
        <div>
          <p className='SAM' id='P1'>Hello World</p>
          <p className='SAM' id='P2'>Hello World</p>
        </div>
        <hr />
        <div>
          <p className='SAM' id='P3'>Hello World</p>
          <p className='SAM' id='P4'>Hello World</p>
        </div>
      </div>
    );
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      JSX,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # compass create --sass-dir scss --css-dir css
  
  コマンドの動作結果
  --------------------------------------------------
  (省略) => プロジェクトが作成された旨のメッセージ出力
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/mod01.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // 関数記述
  @mixin myFunc($P1: black, $P2: 1em, $P3: normal) {
    color: $P1;
    font-size: $P2;
    font-weight: $P3;
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # vi scss/sas01.scss
  
  コマンドの動作結果
  --------------------------------------------------
  // インポート
  @import 'mod01';
  
  // HTMLと同じ構造で記述
  #ROOT {
    div {
      .SAM {
        @include myFunc(blue, 1em, normal);
      }
    }
  }
  --------------------------------------------------
  
  # cd /var/www/html/sas
  # sass scss/sas01.scss:css/sas01.css
  
  コマンドの動作結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[02]
  Create a Complex JSX Element
  
[内容]
  要素「JSX」の直下は「一つの要素」であることに注意
  
  // 正常なコード
  const JSX = (
    <div>
      <p>Hello</p>
      <p>Hello</p>
    </div>
  );
  
  // 無効なコード
  const JSX = (
    <p>Hello</p>
    <p>Hello</p>
    <p>Hello</p>
    <p>Hello</p>
  );
  
[確認]
  // 上記「01」を参照
  
================================================================================
[03]
  Add Comments in JSX
  
[内容]
  コメントは「{/* コメント */}」で記述
  
  {/* 要素「JSX」 */}
  const JSX = <h1>Hello</h1>;
  
[確認]
  // 上記「01」を参照
  
================================================================================
[04]
  Render HTML Elements to the DOM
  
[内容]
  要素「JSX」を描画指示
  
  // 要素「JSX」を描画指示
  ReactDOM.render(
    <h1>Hello</h1>,                 // 要素「JSX」
    document.getElementById('APP')  // 描画先コンテンツ
  );
  
[確認]
  // 上記「01」を参照
  
================================================================================
[05]
  Define an HTML Class in JSX
  
[内容]
  クラス属性を付与
  
  // キーワード「class」は使用不可で「className」を使用すること
  <h1 className='クラス名'>Hello JSX!</h1>
  
[確認]
  // 上記「01」を参照
  
================================================================================
[06]
  Learn About Self-Closing JSX Tags
  
[内容]
  終了タグが存在しない場合の記述例
  
  <br />                  // 改行
  <hr />                  // 水平線
  <img src="#" alt="" />  // 画像
  
[確認]
  // 上記「01」を参照
  
================================================================================
[07]
  Create a Stateless Functional Component
  
[内容]
  関数コンポーネント
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const DSP1 = () => {
      return (
        <div>
          <p className='SAM' id='P1'>Hello World</p>
          <p className='SAM' id='P2'>Hello World</p>
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP2 = () => {
      return (
        <div>
          <p className='SAM' id='P3'>Hello World</p>
          <p className='SAM' id='P4'>Hello World</p>
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const HRZN = () => { return (<hr />); }
    
    {/* メイン関数コンポーネント */}
    const MAIN = () => {
      return (
        <div id='ROOT'>
          <DSP1 />
          <HRZN />
          <DSP2 />
        </div>
      );
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[08]
  Create a React Component
  
[内容]
  クラスコンポーネント
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* クラスコンポーネント */}
    class DSP1 extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div>
            <p className='SAM' id='P1'>Hello World</p>
            <p className='SAM' id='P2'>Hello World</p>
          </div>
        );
      }
    }
    
    {/* クラスコンポーネント */}
    class DSP2 extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div>
            <p className='SAM' id='P3'>Hello World</p>
            <p className='SAM' id='P4'>Hello World</p>
          </div>
        );
      }
    }
    
    {/* クラスコンポーネント */}
    class HRZN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (<hr />);
      }
    }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='ROOT'>
            <DSP1 />
            <HRZN />
            <DSP2 />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[09]
  Create a Component with Composition
  
[内容]
  クラスコンポーネント内で関数コンポーネントを呼び出す => これが一般的な形らしい
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const DSP1 = () => {
      return (
        <div>
          <p className='SAM' id='P1'>Hello World</p>
          <p className='SAM' id='P2'>Hello World</p>
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP2 = () => {
      return (
        <div>
          <p className='SAM' id='P3'>Hello World</p>
          <p className='SAM' id='P4'>Hello World</p>
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const HRZN = () => { return (<hr />); }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='ROOT'>
            <DSP1 />
            <HRZN />
            <DSP2 />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[10]
  Use React to Render Nested Components
  
[内容]
  関数コンポーネントから別の関数コンポーネントを呼ぶ => コンポーネントのネスト化
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const SAM1 = () => { return (<p className='SAM' id='P1'>Hello World</p>); }
    const SAM2 = () => { return (<p className='SAM' id='P2'>Hello World</p>); }
    const SAM3 = () => { return (<p className='SAM' id='P3'>Hello World</p>); }
    const SAM4 = () => { return (<p className='SAM' id='P4'>Hello World</p>); }
    
    {/* 関数コンポーネント */}
    const DSP1 = () => {
      return (
        <div>
          <SAM1 />
          <SAM2 />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP2 = () => {
      return (
        <div>
          <SAM3 />
          <SAM4 />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const HRZN = () => { return (<hr />); }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='ROOT'>
            <DSP1 />
            <HRZN />
            <DSP2 />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[11]
  Compose React Components
  
[内容]
  クラスコンポーネント内でクラスコンポーネントを呼出
  
[確認]
  // 省略
  
================================================================================
[12]
  Render a Class Component to the DOM
  
[内容]
  クラスコンポーネントを「ReactDOM」に描画指示
  
[確認]
  // 省略
  
================================================================================
[13]
  Write a React Component from Scratch
  
[内容]
  クラスコンポーネントを「ReactDOM」に描画指示 => 全て一から自作の演習
  
[確認]
  // 省略
  
================================================================================
[14]
  Pass Props to a Stateless Functional Component
  
[内容]
  関数コンポーネントをパラメータ指定可能にする
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const SAMS = (props) => { return (<p className={props.P1} id={props.P2}>Hello World</p>); }
    
    {/* 関数コンポーネント */}
    const DSP1 = () => {
      return (
        <div>
          <SAMS P1='SAM' P2='P1' />
          <SAMS P1='SAM' P2='P2' />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP2 = () => {
      return (
        <div>
          <SAMS P1='SAM' P2='P3' />
          <SAMS P1='SAM' P2='P4' />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const HRZN = () => { return (<hr />); }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='ROOT'>
            <DSP1 />
            <HRZN />
            <DSP2 />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[15]
  Pass an Array as Props

[内容]
  関数コンポーネントに配列のパラメータを渡す
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const SAMS = (props) => {
      return (
        <div>
          <p className={props.ARR[0]} id={props.ARR[1]}>Hello World</p>
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP1 = () => {
      const ARR1 = ['SAM', 'P1'];
      const ARR2 = ['SAM', 'P2'];
      return (
        <div>
          <SAMS ARR={ARR1} />
          <SAMS ARR={ARR2} />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP2 = () => {
      const ARR3 = ['SAM', 'P3'];
      const ARR4 = ['SAM', 'P4'];
      return (
        <div>
          <SAMS ARR={ARR3} />
          <SAMS ARR={ARR4} />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const HRZN = () => { return (<hr />); }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='ROOT'>
            <DSP1 />
            <HRZN />
            <DSP2 />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[16]
  Use Default Props
  
[内容]
  関数コンポーネントのパラメータデフォルト値
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const SAMS = (props) => {
      return (
        <div>
          <p className={props.ARR[0]} id={props.ARR[1]}>Hello World</p>
        </div>
      );
    }
    
    {/* 関数コンポーネントのパラメータデフォルト値 */}
    SAMS.defaultProps = {
      ARR: ['SAM', 'P1']
    }
    
    {/* 関数コンポーネント */}
    const DSP1 = () => {
      const ARR1 = ['SAM', 'P1'];
      const ARR2 = ['SAM', 'P2'];
      return (
        <div>
          <SAMS />             {/* パラメータデフォルト値 */}
          <SAMS ARR={ARR2} />  {/* 明確にパラメータ値指定 */}
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP2 = () => {
      const ARR3 = ['SAM', 'P3'];
      const ARR4 = ['SAM', 'P4'];
      return (
        <div>
          <SAMS ARR={ARR3} />
          <SAMS ARR={ARR4} />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const HRZN = () => { return (<hr />); }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='ROOT'>
            <DSP1 />
            <HRZN />
            <DSP2 />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[17]
  Override Default Props
  
[内容]
  パラメータ指定でデフォルト値を上書き
  
[確認]
  // 上記「16」を参照
  
================================================================================
[18]
  Use PropTypes to Define the Props You Expect
  
[内容]
  関数コンポーネントのパラメータチェック
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const SAMS = (props) => {
      return (
        <div>
          <p className={props.ARR[0]} id={props.ARR[1]}>Hello World</p>
        </div>
      );
    }
    
    {/* 関数コンポーネントのパラメータデフォルト値 */}
    SAMS.defaultProps = {
      ARR: ['SAM', 'P1']
    }
    
    {/* 関数コンポーネントのパラメータチェック */}
    SAMS.propTypes = {
      ARR: React.PropTypes.array
    }
    
    {/* 関数コンポーネント */}
    const DSP1 = () => {
      const ARR1 = ['SAM', 'P1'];
      const ARR2 = ['SAM', 'P2'];
      return (
        <div>
          <SAMS />             {/* パラメータデフォルト値 */}
          <SAMS ARR={ARR2} />  {/* 明確にパラメータ値指定 */}
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP2 = () => {
      const ARR3 = ['SAM', 'P3'];
      const ARR4 = ['SAM', 'P4'];
      return (
        <div>
          <SAMS ARR={ARR3} />
          <SAMS ARR={ARR4} />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const HRZN = () => { return (<hr />); }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='ROOT'>
            <DSP1 />
            <HRZN />
            <DSP2 />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[19]
  Access Props Using this.props
  
[内容]
  関数コンポーネントからクラスコンポーネントに書き換え
  
  主な注意点としてパラメータ記述が異なる(例. ARR)
    props.ARR      => 関数コンポーネント
    this.props.ARR => クラスコンポーネント
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネントからクラスコンポーネントに書き換え */}
    class SAMS extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div>
            <p className={this.props.ARR[0]} id={this.props.ARR[1]}>Hello World</p>
          </div>
        );
      }
    }

    {/* 関数コンポーネントのパラメータデフォルト値 */}
    SAMS.defaultProps = {
      ARR: ['SAM', 'P1']
    }
    
    {/* 関数コンポーネントのパラメータチェック */}
    SAMS.propTypes = {
      ARR: React.PropTypes.array
    }
    
    {/* 関数コンポーネント */}
    const DSP1 = () => {
      const ARR1 = ['SAM', 'P1'];
      const ARR2 = ['SAM', 'P2'];
      return (
        <div>
          <SAMS />             {/* パラメータデフォルト値 */}
          <SAMS ARR={ARR2} />  {/* 明確にパラメータ値指定 */}
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const DSP2 = () => {
      const ARR3 = ['SAM', 'P3'];
      const ARR4 = ['SAM', 'P4'];
      return (
        <div>
          <SAMS ARR={ARR3} />
          <SAMS ARR={ARR4} />
        </div>
      );
    }
    
    {/* 関数コンポーネント */}
    const HRZN = () => { return (<hr />); }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <div id='ROOT'>
            <DSP1 />
            <HRZN />
            <DSP2 />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[20]
  Review Using Props with Stateless Functional Components
  
[内容]
  関数コンポーネントのパラメータへのアクセスを復習
  
[確認]
  // 省略
  
================================================================================
[21]
  Create a Stateful Component
  
[内容]
  内部パラメータ「Key1」と「Key2」をクラスコンポーネントの内部情報「state」に保有する
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      
      /* コンストラクタ */ => クラスコンポーネント内ではコメントの「{}」を外さないとエラー出力…原因不明
      constructor(props) {
        super(props);
        this.state = {
          Key1: 0,  /* 内部パラメータ */
          Key2: 0   /* 内部パラメータ */
        };
        this.Key1 = this.Key1Up.bind(this);  /* 内部関数をクラス外部に公開 */
        this.Key2 = this.Key2Up.bind(this);  /* 内部関数をクラス外部に公開 */
      }
      
      /* 内部関数 */
      Key1Up() {
        this.setState(state => ({ Key1: this.state.Key1 + 1 }));
      }
      
      /* 内部関数 */
      Key2Up() {
        this.setState(state => ({ Key2: this.state.Key2 + 1 }));
      }
      
      /* 描画処理 */
      render() {
        return (
          <div id='ROOT'>
            <button className='BTNS' onClick={this.Key1}>Key1</button>
            <button className='BTNS' onClick={this.Key2}>Key2</button>
            <hr />
            <p className='DISP'>Key1 : {this.state.Key1}</p>
            <p className='DISP'>Key2 : {this.state.Key2}</p>
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[22]
  Render State in the User Interface
  
[内容]
  内部情報「state」の内部パラメータ値を画面に描画
  
[確認]
  // 上記「21」を参照
  
================================================================================
[23]
  Render State in the User Interface Another Way
  
[内容]
  内部情報「state」の内部パラメータ値にアクセス
  
[確認]
  // 上記「21」を参照
  
================================================================================
[24]
  Set State with this.setState
  
[内容]
  内部情報「state」の内部パラメータ値を更新
  
[確認]
  // 上記「21」を参照
  
================================================================================
[25]
  Bind 'this' to a Class Method
  
[内容]
  内部関数をクラス外部に公開 => コンストラクタに記述
    this.Key1 = this.Key1Up.bind(this);
    this.Key2 = this.Key2Up.bind(this);
  
[確認]
  // 上記「21」を参照
  
================================================================================
[26]
  Use State to Toggle an Element
  
[内容]
  内部情報「state」の内部パラメータ値の更新時に注意
    this.setState({ Count: this.state.Count + 1 }); => 従来の記述では、リアルタイムで更新されない場合がある
    this.setState(state => ({ Count: this.state.Count + 1 })); => 正しい記述
  
[確認]
  // 上記「21」を参照
  
================================================================================
[27]
  Write a Simple Counter
  
[内容]
  カウンター作成
  
[確認]
  // 上記「21」を参照
  
================================================================================
[28]
  Create a Controlled Input
  
[内容]
  フォームのテキストボックス作成
    一文字入力のたびに内部情報「state」の内部パラメータ値に保存 => イベント「onChange」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      
      /* コンストラクタ */
      constructor(props) {
        super(props);
        this.state = { STR: '' }
        this.EDT = this.EDTChange.bind(this);
        this.BTN = this.BTNSubmit.bind(this);
      }
      
      /* テキストボックス入力 */
      EDTChange(event) {
        event.persist();  /* これが無いとeventがクリアされてエラー */
        this.setState(state => ({STR: event.target.value}));
      }
      
      /* 出力ボタン押下 */
      BTNSubmit(event) {
        console.log(`STR : ${this.state.STR}`);
        event.preventDefault();
      }
      
      /* 描画処理 */
      render() {
        return (
          <div id='ROOT'>
            <form id='FRM' onSubmit={this.BTN}>
              <input id='EDT' type='text' onChange={this.EDT}></input>
              <input id='BTN' type='submit' value='Output'></input>
            </form>
            <hr />
            <p id='STR'>STR : {this.state.STR}</p>
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[29]
  Create a Controlled Form
  
[内容]
  フォームのボタン作成
    内部情報「state」の内部パラメータ値をコンソール出力 => イベント「onSubmit」を使用
  
[確認]
  // 上記「28」を参照
  
================================================================================
[30]
  Pass State as Props to Child Components
  
[内容]
  内部情報「state」の内部パラメータ値を関数コンポーネントのパラメータ「props」として渡す
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const KEY1 = (props) => {
      return (
        <p className='DISP'>Key1 : {props.P1}</p>
      );
    }
    
    {/* 関数コンポーネント */}
    const KEY2 = (props) => {
      return (
        <p className='DISP'>Key2 : {props.P1}</p>
      );
    }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      
      /* コンストラクタ */
      constructor(props) {
        super(props);
        this.state = {
          Key1: 0,  /* 内部パラメータ */
          Key2: 0   /* 内部パラメータ */
        };
        this.Key1 = this.Key1Up.bind(this);  /* 内部関数をクラス外部に公開 */
        this.Key2 = this.Key2Up.bind(this);  /* 内部関数をクラス外部に公開 */
      }
      
      /* 内部関数 */
      Key1Up() {
        this.setState(state => ({ Key1: this.state.Key1 + 1 }));
      }
      
      /* 内部関数 */
      Key2Up() {
        this.setState(state => ({ Key2: this.state.Key2 + 1 }));
      }
      
      /* 描画処理 */
      render() {
        return (
          <div id='ROOT'>
            <button className='BTNS' onClick={this.Key1}>Key1</button>
            <button className='BTNS' onClick={this.Key2}>Key2</button>
            <hr />
            <KEY1 P1={this.state.Key1} />
            <KEY2 P1={this.state.Key2} />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[31]
  Pass a Callback as Props
  
[内容]
  クラスコンポーネントの内部関数を関数コンポーネントのパラメータ「props」として渡す
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const BTN1 = (props) => {
      return (
        <button className='BTNS' onClick={props.P1}>Key1</button>
      );
    }
    
    {/* 関数コンポーネント */}
    const BTN2 = (props) => {
      return (
        <button className='BTNS' onClick={props.P1}>Key2</button>
      );
    }
    
    {/* 関数コンポーネント */}
    const KEY1 = (props) => {
      return (
        <p className='DISP'>Key1 : {props.P1}</p>
      );
    }
    
    {/* 関数コンポーネント */}
    const KEY2 = (props) => {
      return (
        <p className='DISP'>Key2 : {props.P1}</p>
      );
    }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      
      /* コンストラクタ */
      constructor(props) {
        super(props);
        this.state = {
          Key1: 0,  /* 内部パラメータ */
          Key2: 0   /* 内部パラメータ */
        };
        this.Key1 = this.Key1Up.bind(this);  /* 内部関数をクラス外部に公開 */
        this.Key2 = this.Key2Up.bind(this);  /* 内部関数をクラス外部に公開 */
      }
      
      /* 内部関数 */
      Key1Up() {
        this.setState(state => ({ Key1: this.state.Key1 + 1 }));
      }
      
      /* 内部関数 */
      Key2Up() {
        this.setState(state => ({ Key2: this.state.Key2 + 1 }));
      }
      
      /* 描画処理 */
      render() {
        return (
          <div id='ROOT'>
            <BTN1 P1={this.Key1} />
            <BTN2 P1={this.Key2} />
            <hr />
            <KEY1 P1={this.state.Key1} />
            <KEY2 P1={this.state.Key2} />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[32]
  Use the Lifecycle Method componentWillMount
  
[内容]
  ライフサイクルメソッド「componentWillMount」
    コンポーネントがDOMにマウント前に実行
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* インラインCSS用オブジェクト */}
    const OBJ1 = {
      width: 100,
      height: 40
    }
    
    {/* 関数コンポーネント */}
    const BTN1 = (props) => {
      return (
        <button className='BTNS' style={OBJ1} onClick={props.P1}>Key1</button>
      );
    }
    
    {/* 関数コンポーネント */}
    const BTN2 = (props) => {
      return (
        <button className='BTNS' style={OBJ1} onClick={props.P1}>Key2</button>
      );
    }
    
    {/* インラインCSS用オブジェクト */}
    const OBJ2 = {
      color: 'red',
      fontSize: 20
    };
    
    {/* 関数コンポーネント */}
    const KEY1 = (props) => {
      return (
        <p className='DISP' style={OBJ2}>Key1 : {props.P1}</p>
      );
    }
    
    {/* 関数コンポーネント */}
    const KEY2 = (props) => {
      return (
        <p className='DISP' style={OBJ2}>Key2 : {props.P1}</p>
      );
    }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      
      /* コンストラクタ */
      constructor(props) {
        super(props);
        this.state = {
          Key1: 0,  /* 内部パラメータ */
          Key2: 0   /* 内部パラメータ */
        };
        this.Key1 = this.Key1Up.bind(this);  /* 内部関数をクラス外部に公開 */
        this.Key2 = this.Key2Up.bind(this);  /* 内部関数をクラス外部に公開 */
      }
      
      /* 内部関数 */
      Key1Up() {
        this.setState(state => ({ Key1: this.state.Key1 + 1 }));
      }
      
      /* 内部関数 */
      Key2Up() {
        this.setState(state => ({ Key2: this.state.Key2 + 1 }));
      }
      
      /* メインクラスコンポーネントのマウント前 */
      componentWillMount() {
        console.log('マウント前');
      }
      
      /* 描画処理 */
      render() {
        
        /* 内部変数 */
        let WRK1 = 'XX';
        let WRK2 = 'XX';
        
        /* 内部パラメータ「Key1」が「10」の倍数の時のみ描画、それ以外は「XX」を表示 */
        if (this.state.Key1 % 10 === 0) {
          WRK1 = this.state.Key1;
        }
        
        /* 内部パラメータ「Key2」が「10」の倍数の時のみ描画、それ以外は「XX」を表示 */
        if (this.state.Key2 % 10 === 0) {
          WRK2 = this.state.Key2;
        }
        
        return (
          <div id='ROOT'>
            <BTN1 P1={this.Key1} />
            <BTN2 P1={this.Key2} />
            <hr />
            <KEY1 P1={WRK1} />
            <KEY2 P1={WRK2} />
          </div>
        );
      }

      /* メインクラスコンポーネントのマウント後 */
      componentDidMount() {
        console.log('マウント後');
      }
      
      /* メインクラスコンポーネントのアンマウント前 */
      componentWillUnmount() {
        console.log('アンマウント前');
      }

      /* 内部パラメータ「Key1」と「Key2」のどちらかが500超なら描画更新しない */
      shouldComponentUpdate(nextProps, nextState) {
        return (nextState.Key1 > 500 || nextState.Key2 > 500) ? false : true ;
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[33]
  Use the Lifecycle Method componentDidMount
  
[内容]
  ライフサイクルメソッド「componentDidMount」
    コンポーネントがDOMにマウント後に実行
  
[確認]
  // 上記「32」を参照
  
================================================================================
[34]
  Add Event Listeners
  
[内容]
  ライフサイクルメソッド「componentWillUnmount」
    コンポーネントがDOMからアンマウント前に実行
  
[確認]
  // 上記「32」を参照
  
================================================================================
[35]
  Optimize Re-Renders with shouldComponentUpdate
  
[内容]
  ライフサイクルメソッド「shouldComponentUpdate」
    コンポーネントの再描画時のチェック処理に使用 => 戻り値が「true」で再描画
  
[確認]
  // 上記「32」を参照
  
================================================================================
[36]
  Introducing Inline Styles
  
[内容]
  インラインCSS
    要素の属性「style」にオブジェクト指定
  
  オブジェクト
    例. const OBJ1 = {color: 'red'};
    例. const OBJ2 = {color: 'red', fontSize: 15};
  
  指定方法
    例. <p style={OBJ1}>Hello!</p>
    例. <p style={OBJ2}>Hello!</p>
  
  プロパティ名が通常と異なる
    例. font-size   => fontSize
    例. font-weight => fontWeight
  
  長さの単位はデフォルトでピクセル、それ以外の単位は引用符が必要
    例. 40px => 40でOK
    例. 20em => '20em'
  
[確認]
  // 上記「32」を参照
  
================================================================================
[37]
  Add Inline Styles in React
  
[内容]
  インラインCSSの復習
  
[確認]
  // 上記「32」を参照
  
================================================================================
[38]
  Use Advanced JavaScript in React Render Method
  
[内容]
  JSX内でJSコード記述
    メソッド「render」内の「return」より前の部分で記述可能
    
    (例)
      render() {
        
        /* JS コード */
        
        return (
          <div id='ROOT'>
            <KEY1 P1={WRK1} />
            <KEY2 P1={WRK2} />
          </div>
        );
      }
  
[確認]
  // 上記「32」を参照
  
================================================================================
[39]
  Render with an If-Else Condition
  
[内容]
  構文「if」を使用して描画内容を決定
    メソッド「render」内の「return」より前の部分で記述可能
    
    (例)
      render() {
        let WRK1 = 'XX';
        let WRK2 = 'XX';
        
        /* 内部パラメータが「10」の倍数の時のみ描画、それ以外は「XX」を表示 */
        if (this.state.Key1 % 10 === 0) WRK1 = this.state.Key1;
        if (this.state.Key2 % 10 === 0) WRK2 = this.state.Key2;
        
        return (
          <div id='ROOT'>
            <KEY1 P1={WRK1} />
            <KEY2 P1={WRK2} />
          </div>
        );
      }
    
[確認]
  // 上記「32」を参照
  
================================================================================
[40]
  Use && for a More Concise Conditional
  
[内容]
  条件文「{(条件) && HTML要素}」で描画の可否を決定
    メソッド「render」内の「return」内で記述可能
    
    (例)
    render() {
      return (
        <div id='ROOT'>
          {this.state.Key1 % 10 === 0 && <KEY1 P1={this.state.Key1} />}
          {this.state.Key2 % 10 === 0 && <KEY2 P1={this.state.Key2} />}
        </div>
      );
    }
    
[確認]
  // 省略

================================================================================
[41]
  Use a Ternary Expression for Conditional Rendering
  
[内容]
  三項演算子「(条件) ? (true) : (false)」で描画の可否を決定
    メソッド「render」内の「return」内で記述可能
    
    (例)
    render() {
      return (
        <div id='ROOT'>
          {this.state.Key1 % 10 === 0 ? <KEY1 P1={this.state.Key1} /> : ''}
          {this.state.Key2 % 10 === 0 ? <KEY2 P1={this.state.Key2} /> : ''}
        </div>
      );
    }
    
[確認]
  // 省略

================================================================================
[42]
  Render Conditionally from Props
  
[内容]
  関数コンポーネントのパラメータ「props」または「this.props」で描画の可否を決定
    
    (例)
    const CNT = (props) => {
      return (props.P1 % 10 === 0) ? <p>Click : {props.P1}</p> : <p></p> ;
    }
    
[確認]
  // 省略
  
================================================================================
[43]
  Change Inline CSS Conditionally Based on Component State
  
[内容]
  内部情報「state」でインラインCSSを決定
    メソッド「render」内の「return」内で記述可能
  
    (例)
    render() {
      const OBJ1 = {
        width: 100,
        height: 40
      }
        
      return (
        <div id='ROOT'>
          <button className='BTNS' style={OBJ1} onClick={props.P1}>Key1</button>
          <button className='BTNS' style={OBJ1} onClick={props.P1}>Key1</button>
        </div>
      );
    }
  
[確認]
  // 省略
  
================================================================================
[44]
  Use Array.map() to Dynamically Render Elements
  
[内容]
  HTMLリスト作成(1)
    関数「map」で生成される要素に属性「key」が無いと警告
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  
  <!-- SASS --->
  <link rel="stylesheet" href="sas/css/sas01.css">
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    {/* 関数コンポーネント */}
    const GREETING = (props) => {
      let arr = props.ARR;
      let ret = arr.map((val, idx) => <p key={idx}>{val}{idx}</p>);
      return (
        <div>
          {ret}
        </div>
      );
    }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      
      /* コンストラクタ */
      constructor(props) {
        super(props);
      }
      
      /* 描画処理 */
      render() {
        let TMP1 = ['AAA', 'AAA', 'AAA', 'AAA'];
        let TMP2 = ['BBB', 'BBB', 'BBB', 'BBB'];
        return (
          <div id='ROOT'>
            <GREETING ARR={TMP1} />
            <hr />
            <GREETING ARR={TMP2} />
          </div>
        );
      }
    }
    
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[45]
  Give Sibling Elements a Unique Key Attribute
  
[内容]
  HTMLリスト作成(2)
    生成要素に属性「key」を付与
  
[確認]
  // 上記「44」を参照
  
================================================================================
[46]
  Use Array.filter() to Dynamically Filter an Array
  
[内容]
  HTMLリスト作成(3)
    関数「filter」の抽出要素を関数「map」で加工してHTMLリスト表示
  
    (例)
    const GREETING = (props) => {
      let arr = props.ARR;

      /* 関数「filter」の抽出要素を関数「map」で加工してHTMLリスト表示 */
      let tmp = arr.filter(val => val % 2 === 0);
      let ret = tmp.map((val, idx) => <p key={idx}>{val}</p>);

      return (
        <div>
          {ret}
        </div>
      );
    }

    render() {
      let TMP1 = [10000, 10001, 10002, 10003];
      let TMP2 = [20000, 20001, 20002, 20003];
      return (
        <div id='ROOT'>
          <GREETING ARR={TMP1} />
          <hr />
          <GREETING ARR={TMP2} />
        </div>
      );
    }
  
[確認]
  // 省略
  
================================================================================
[47]
  Render React on the Server with renderToString
  
[内容]
  サーバー側で描画(HTML化)したものを返す
    
    (例)
    {/* 要素「JSX」を描画指示 */}
    ReactDOM.render(
      <MAIN />,
      document.getElementById('APP')
    );
    
    {/* サーバー側で要素「JSX」を描画指示 */}
    ReactDOMServer.renderToString(<MAIN />);
  
[確認]
  // 省略
  
================================================================================
