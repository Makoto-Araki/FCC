================================================================================
[01] Handle Click Events with JavaScript using the onclick property
[02] Change Text with click Events
[03] Get JSON with the JavaScript XMLHttpRequest Method
[04] Get JSON with the JavaScript fetch method
[05] Access the JSON Data from an API
[06] Convert JSON Data to HTML
[07] Render Images from Data Sources
[08] Pre-filter JSON to Get the Data You Need
[09] Get Geolocation Data to Find A User's GPS Coordinates
[10] Post Data with the JavaScript XMLHttpRequest Method
================================================================================
[01]
  Handle Click Events with JavaScript using the onclick property
  
[内容]
  前準備(1)
    コンテンツロード時にボタンクリック時のイベントハンドラ登録
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <h1>MY SAMPLE</h1>
  <p id='MSG'>Hello World</p>
  <input type="button" id='GET' value="GET" />
  
  <!-- CSS --->
  <style>
    
    h1 {
      color: black;
      font-size: 2em;
      font-weight: bold;
      text-align: center;
    }

    #MSG {
      background-color: #eeeeee;
      border-radius: 5px;
      padding: 20px 5px 20px 5px;
      text-align: center;
    }

    #GET {
      display: block;
      padding: 10px 10px;
      background-color: CornFlowerBlue;
      margin: 10px auto;
    }
    
  </style>
  
  <!-- JS --->
  <script>
    
    // コンテンツロード時に一度だけ実行
    document.addEventListener('DOMContentLoaded',
      function() {
        document.getElementById('GET').onclick = function() {
          console.log('Hello World');
        }
      }
    );
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  以後の動作確認に続く
  
================================================================================
[02]
  Change Text with click Events
  
[内容]
  前準備(2)
    ボタンクリック時のイベントハンドラを修正
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <h1>MY SAMPLE</h1>
  <p id='MSG'>Hello World</p>
  <input type="button" id='GET' value="GET" />
  
  <!-- CSS --->
  <style>
    
    h1 {
      color: black;
      font-size: 2em;
      font-weight: bold;
      text-align: center;
    }

    #MSG {
      background-color: #eeeeee;
      border-radius: 5px;
      padding: 20px 5px 20px 5px;
      text-align: center;
    }

    #GET {
      display: block;
      padding: 10px 10px;
      background-color: CornFlowerBlue;
      margin: 10px auto;
    }
    
  </style>
  
  <!-- JS --->
  <script>
    
    // クリック数
    let CNT = 0;
    
    // コンテンツロード時に一度だけ実行
    document.addEventListener('DOMContentLoaded',
      function() {
        document.getElementById('GET').onclick = function() {
          document.getElementById('MSG').textContent = `Hello ${CNT++}`;
        }
      }
    );
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  以後の動作確認に続く
  
================================================================================
[03]
  Get JSON with the JavaScript XMLHttpRequest Method
  
[内容]
  JSONファイルからデータ取得(1)
    クラス「XMLHttpRequest」からインスタンス生成
  
  JSON.parse(JSON文字列) => JSオブジェクト
  JSON.stringfy(JSオブジェクト) => JSON文字列
  
[確認]
  # cd /var/www/html/Json
  # vi sample.json
  
  コマンドの実行結果
  ----------------------------------------
  // シングルクォート「'」はエラーになるのでダブルクォート「"」を使用
  
  [
    { "key1": "01", "key2": "AAA" },
    { "key1": "02", "key2": "BBB" },
    { "key1": "03", "key2": "CCC" }
  ]
  ----------------------------------------
  
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <h1>MY SAMPLE</h1>
  <p id='MSG'>Hello World</p>
  <input type="button" id='GET' value="GET" />
  
  <!-- CSS --->
  <style>
    
    h1 {
      color: black;
      font-size: 2em;
      font-weight: bold;
      text-align: center;
    }

    #MSG {
      background-color: #eeeeee;
      border-radius: 5px;
      padding: 20px 5px 20px 5px;
      text-align: center;
    }

    #GET {
      display: block;
      padding: 10px 10px;
      background-color: CornFlowerBlue;
      margin: 10px auto;
    }
    
  </style>
  
  <!-- JS --->
  <script>
    
    // コンテンツロード時に一度だけ実行
    document.addEventListener('DOMContentLoaded',
      function() {
        document.getElementById('GET').onclick = function() {
          
          // クラス「XMLHttpRequest」からインスタンス生成
          const REQ = new XMLHttpRequest();
          
          // リクエスト作成
          REQ.open('GET', 'Json/sample.json', true);
          
          // リクエスト送信
          REQ.send();
          
          // レスポンス受信
          REQ.onload = function() {
            
            // 戻り値の初期化
            let RET = '';

            // JSON文字列からJSオブジェクトに変換
            let RCV = JSON.parse(REQ.responseText);
            
            // 各オブジェクト対象のループ処理
            RCV.forEach(OBJ => { RET += `<p>key1: ${OBJ.key1}  key2: ${OBJ.key2}</p>`; });
            
            // JSオブジェクトの一部をHTMLに描画
            document.getElementById('MSG').innerHTML = RET;
            
          };
        }
      }
    );
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # localhost/sample.html
  
  コマンドの実行結果
  ----------------------------------------
  (メッセージ取得ボタンを押下)
  ----------------------------------------
  
  以後の動作確認に続く
  
================================================================================
[04]
  Get JSON with the JavaScript fetch method
  
[内容]
  JSONファイルからデータ取得(2)
    メソッド「fetch」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <h1>MY SAMPLE</h1>
  <p id='MSG'>Hello World</p>
  <input type="button" id='GET' value="GET" />
  
  <!-- CSS --->
  <style>
    
    h1 {
      color: black;
      font-size: 2em;
      font-weight: bold;
      text-align: center;
    }

    #MSG {
      background-color: #eeeeee;
      border-radius: 5px;
      padding: 20px 5px 20px 5px;
      text-align: center;
    }

    #GET {
      display: block;
      padding: 10px 10px;
      background-color: CornFlowerBlue;
      margin: 10px auto;
    }
    
  </style>
  
  <!-- JS --->
  <script>
    
    // コンテンツロード時に一度だけ実行
    document.addEventListener('DOMContentLoaded',
      function() {
        document.getElementById('GET').onclick = function() {
          
          // メソッド「fetch」を使用してJSオブジェクトの一部を描画
          fetch('Json/sample.json')
          .then(data => data.json())
          .then(data => {
            let RET = '';
            data.forEach(OBJ => { RET += `<p>key1: ${OBJ.key1}  key2: ${OBJ.key2}</p>`; });
            document.getElementById('MSG').innerHTML = RET;
          });
          
        }
      }
    );
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # localhost/sample.html
  
  コマンドの実行結果
  ----------------------------------------
  (メッセージ取得ボタンを押下)
  ----------------------------------------
  
  以後の動作確認に続く
  
================================================================================
[05]
  Access the JSON Data from an API
  
[内容]
  JSONファイルから一部データ抽出(1)
  
[確認]
  // 上記「03」を参照
  
================================================================================
[06]
  Convert JSON Data to HTML
  
[内容]
  JSONファイルから一部データ抽出(2)
  
[確認]
  // 上記「04」を参照
  
================================================================================
[07]
  Render Images from Data Sources
  
[内容]
  JSONファイルから画像表示(1)
    全画像を表示
  
[確認]
  # cd /var/www/html/images
  # ls -lh *.png
  
  コマンドの実行結果
  ----------------------------------------
  -rw-r--r--. 1 root root 2.5K  6月 22 05:44 android-256.png
  -rw-r--r--. 1 root root  76K  6月 22 05:44 firefox-256.png
  ----------------------------------------
  
  # cd /var/www/html/Json
  # vi sample.json
  
  コマンドの実行結果
  ----------------------------------------
  // シングルクォート「'」はエラーになるのでダブルクォート「"」を使用
  
  [
    { "id": 0, "link": "images/android-256.png", "text": "Android" }, 
    { "id": 1, "link": "images/firefox-256.png", "text": "Firefox" }
  ]
  ----------------------------------------
  
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <h1>MY SAMPLE</h1>
  <p id='MSG'>Hello World</p>
  <input type="button" id='GET' value="GET" />
  
  <!-- CSS --->
  <style>
    
    h1 {
      color: black;
      font-size: 2em;
      font-weight: bold;
      text-align: center;
    }

    #MSG {
      background-color: #eeeeee;
      border-radius: 5px;
      padding: 20px 5px 20px 5px;
      text-align: center;
    }

    #GET {
      display: block;
      padding: 10px 10px;
      background-color: CornFlowerBlue;
      margin: 10px auto;
    }
    
  </style>
  
  <!-- JS --->
  <script>
    
    // コンテンツロード時に一度だけ実行
    document.addEventListener('DOMContentLoaded',
      function() {
        document.getElementById('GET').onclick = function() {
          
          // クラス「XMLHttpRequest」からインスタンス生成
          const REQ = new XMLHttpRequest();
          
          // リクエスト作成
          REQ.open('GET', 'Json/sample.json', true);
          
          // リクエスト送信
          REQ.send();
          
          // レスポンス受信
          REQ.onload = function() {
            
            // 戻り値の初期化
            let RET = '';
            
            // JSON文字列からJSオブジェクトに変換
            let RCV = JSON.parse(REQ.responseText);
            
            // 各オブジェクト対象のループ処理
            RCV.forEach(OBJ => { RET += `<img style='width: 20%' src='${OBJ.link}' alt='${OBJ.text}'><br>`; });
            
            // JSオブジェクトの一部をHTMLに描画
            document.getElementById('MSG').innerHTML = RET;
            
          };
        }
      }
    );
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # localhost/sample.html
  
  コマンドの実行結果
  ----------------------------------------
  (メッセージ取得ボタンを押下)
  ----------------------------------------
  
  以後の動作確認に続く
  
================================================================================
[08]
  Pre-filter JSON to Get the Data You Need
  
[内容]
  JSONファイルから画像表示(2)
    表示画像にフィルター適用
  
    (例)
    REQ.onload = function() {
      let RET = '';
      let RCV = JSON.parse(REQ.responseText);
      
      // 表示画像にフィルター適用
      RCV = RCV.filter(val => val.text === 'Firefox');
      
      RCV.forEach(OBJ => { RET += `<img style='width: 20%' src='${OBJ.link}' alt='${OBJ.text}'><br>`; });
      document.getElementById('MSG').innerHTML = RET;
    };

[確認]
  // 上記「07」を参照
  
================================================================================
[09]
  Get Geolocation Data to Find A User's GPS Coordinates
  
[内容]
  自分の位置情報の取得
    ブラウザは「navigator.geolocation」に対応、おそらく「https」未対応で位置情報の取得が失敗
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <h1>MY SAMPLE</h1>
  <p id='MSG'>Hello World</p>
  <input type="button" id='GET' value="GET" />
  
  <!-- CSS --->
  <style>
    
    h1 {
      color: black;
      font-size: 2em;
      font-weight: bold;
      text-align: center;
    }

    #MSG {
      background-color: #eeeeee;
      border-radius: 5px;
      padding: 20px 5px 20px 5px;
      text-align: center;
    }

    #GET {
      display: block;
      padding: 10px 10px;
      background-color: CornFlowerBlue;
      margin: 10px auto;
    }
    
  </style>
  
  <!-- JS --->
  <script>
    
    // コンテンツロード時に一度だけ実行
    document.addEventListener('DOMContentLoaded',
      function() {
        document.getElementById('GET').onclick = function() {
          
          // クラス「XMLHttpRequest」からインスタンス生成
          const REQ = new XMLHttpRequest();
          
          // リクエスト作成
          REQ.open('GET', 'Json/sample.json', true);
          
          // リクエスト送信
          REQ.send();
          
          // レスポンス受信
          REQ.onload = function() {
            
            // 画面表示用の文字列
            let RET = '';
            
            // 成功時の関数
            const SUC = (pos) => {
              RET += '<div>';
              RET += '<p>緯度：' + pos.coords.latitude + '</p>';
              RET += '<p>経度：' + pos.coords.longitude + '</p>';
              RET += '</div>';
            }
            
            // 失敗時の関数
            const ERR = () => {
              alert('位置情報の取得に失敗');
            }
            
            // 位置情報の取得が可能なら取得
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(SUC, ERR);
            } else {
              alert('ブラウザ未対応');
            }
            
            // 要素を書き替え
            if (RET !== '') {
              document.getElementById('MSG').innerHTML = RET;
            }
            
          };
        }
      }
    );
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # https://localhost/sample.html => きちんと「https」を指定しなければならない
  
  コマンドの実行結果
  ----------------------------------------
  (メッセージ取得ボタンを押下)
  ----------------------------------------
  
  以後の動作確認に続く
  
================================================================================
[10]
  Post Data with the JavaScript XMLHttpRequest Method
  
[内容]
  JSONファイルへデータをPOST送信
    メソッド「XMLHttpRequest」を使用 => あくまで送信のみで登録等はサーバー側の処理が必要
  
[確認]
  # cd /var/www/html/Json
  # vi sample.json
  
  コマンドの実行結果
  ----------------------------------------
  // シングルクォート「'」はエラーになるのでダブルクォート「"」を使用
  
  [
    { "key1": "01", "key2": "AAA" },
    { "key1": "02", "key2": "BBB" },
    { "key1": "03", "key2": "CCC" }
  ]
  ----------------------------------------
  
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <h1>MY SAMPLE</h1>
  <p id='MSG'>Hello World</p>
  <input type="button" id='GET' value="GET" />
  
  <!-- CSS --->
  <style>
    
    h1 {
      color: black;
      font-size: 2em;
      font-weight: bold;
      text-align: center;
    }

    #MSG {
      background-color: #eeeeee;
      border-radius: 5px;
      padding: 20px 5px 20px 5px;
      text-align: center;
    }

    #GET {
      display: block;
      padding: 10px 10px;
      background-color: CornFlowerBlue;
      margin: 10px auto;
    }
    
  </style>
  
  <!-- JS --->
  <script>
    
    // コンテンツロード時に一度だけ実行
    document.addEventListener('DOMContentLoaded',
      function() {
        document.getElementById('GET').onclick = function() {
          
          // 送信データをJSON文字列に変換
          const DATA = { "key1": "04", "key2": "DDD" };
          const BODY = JSON.stringify(DATA);
          
          // オブジェクト作成と初期化
          const REQ = new XMLHttpRequest();
          REQ.open('POST', 'Json/sample.json', true);
          
          // リクエストヘッダ設定
          REQ.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
          
          // リクエスト送信
          REQ.send(BODY);
          
          // レスポンス受信(正常)
          REQ.onload = () => {
            const RCV = JSON.parse(REQ.responseText);
            if (RCV.length > 0) alert(RCV);  // 出力結果「[object Object],[object Object]」
          };
          
          // レスポンス受信(エラー)
          REQ.onerror = () => alert('エラー発生');
          
        }
      }
    );
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # localhost/sample.html
  
  コマンドの実行結果
  ----------------------------------------
  (メッセージ取得ボタンを押下)
  ----------------------------------------
  
  動作確認はひとまず終了する
  
================================================================================
