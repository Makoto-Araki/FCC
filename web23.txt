================================================================================
[01] Create a Redux Store
[02] Get State from the Redux Store
[03] Define a Redux Action
[04] Define an Action Creator
[05] Dispatch an Action Event
[06] Handle an Action in the Store
[07] Use a Switch Statement to Handle Multiple Actions
[08] Use const for Action Types
[09] Register a Store Listener
[10] Combine Multiple Reducers
[11] Send Action Data to the Store
[12] Use Middleware to Handle Asynchronous Actions
[13] Write a Counter with Redux
[14] Never Mutate State
[15] Use the Spread Operator on Arrays
[16] Remove an Item from an Array
[17] Copy an Object with Object.assign
================================================================================
[01]
  Create a Redux Store
  
[内容]
  ストア作成
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // ストア内部処理
    const RDCR = (state = 5) => state;
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    
    // 内部情報を取得
    console.log(STORE.getState());  // 5
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[02]
  Get State from the Redux Store
  
[内容]
  ストアから内部情報を取得
  
[確認]
  // 上記「01」を参照
  
================================================================================
[03]
  Define a Redux Action
  
[内容]
  アクション
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = { AUTH: false }
    
    // アクション名
    const C1 = 'LOGIN';
    const C2 = 'LOGOUT';
    
    // アクション実体
    const A1 = { type: C1 }
    const A2 = { type: C2 }
    
    // アクション作成プログラム
    const LOGIN  = () => A1;
    const LOGOUT = () => A2;
    
    // ストア内部処理
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case 'LOGIN':
          return { AUTH: true };
        case 'LOGOUT':
          return { AUTH: false };
        default:
          return state;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    console.log(STORE.getState());  // { AUTH: false }
    
    // アクション「LOGIN」をストアに送信
    STORE.dispatch(LOGIN());
    console.log(STORE.getState());  // { AUTH: true }
    
    // アクション「LOGOUT」をストアに送信
    STORE.dispatch(LOGOUT());
    console.log(STORE.getState());  // { AUTH: false }
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[04]
  Define an Action Creator
  
[内容]
  アクション作成
  
[確認]
  // 上記「03」を参照
  
================================================================================
[05]
  Dispatch an Action Event
  
[内容]
  アクションのストア送信
  
[確認]
  // 上記「03」を参照
  
================================================================================
[06]
Handle an Action in the Store

[内容]
  アクションに基づいて内部情報の更新ハンドラを追加 -> ストア内部ロジック
  
[確認]
  // 上記「03」を参照
  
================================================================================
[07]
  Use a Switch Statement to Handle Multiple Actions
  
[内容]
  ハンドラ追加 -> ストア内部ロジック
  
[確認]
  // 上記「03」を参照
  
================================================================================
[08]
  Use const for Action Types
  
[内容]
  アクション名の「LOGIN」や「LOGOUT」を文字列ではなく定数参照に変更 -> 構文「switch」に注目
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = { AUTH: false }
    
    // アクション名
    const C1 = 'LOGIN';
    const C2 = 'LOGOUT';
    
    // アクション実体
    const A1 = { type: C1 }
    const A2 = { type: C2 }
    
    // アクション作成プログラム
    const LOGIN  = () => A1;
    const LOGOUT = () => A2;
    
    // ストア内部処理
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case C1:
          return { AUTH: true };
        case C2:
          return { AUTH: false };
        default:
          return state;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    console.log(STORE.getState());  // { AUTH: false }
    
    // アクション「LOGIN」をストアに送信
    STORE.dispatch(LOGIN());
    console.log(STORE.getState());  // { AUTH: true }
    
    // アクション「LOGOUT」をストアに送信
    STORE.dispatch(LOGOUT());
    console.log(STORE.getState());  // { AUTH: false }
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[09]
  Register a Store Listener
  
[内容]
  ストアにアクション受信時の処理を登録
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = { AUTH: false }
    
    // アクション名
    const C1 = 'LOGIN';
    const C2 = 'LOGOUT';
    
    // アクション実体
    const A1 = { type: C1 }
    const A2 = { type: C2 }
    
    // アクション作成プログラム
    const LOGIN  = () => A1;
    const LOGOUT = () => A2;
    
    // ストア内部処理
    const RDCR = (state = D1, action) => {
      switch(action.type) {
        case C1:
          return { AUTH: true };
        case C2:
          return { AUTH: false };
        default:
          return state;
      }
    }
    
    // ストアのアクション受信時の処理
    const RES = () => {
      const TIME = new Date();
      console.log(`受信時刻 : ${TIME.toString()}`);
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    
    // ストアにアクション受信時の処理を登録
    STORE.subscribe(RES);
    
    // タイマー制御用
    let TID = null;
    let CNT = 0;
    
    // タイマー処理
    const TIMER = () => {
      CNT++;
      
      // 処理回数が「5回」以上ならタイマー停止
      if (CNT >= 5 && TID !== null) {
        clearInterval(TID);
      }
      
      STORE.dispatch(LOGIN());
    }
    
    // タイマー開始 -> ストアにアクション「LOGIN」を「2秒に1回」で送信、「5回」送信したら終了
    TID = setInterval(TIMER, 2000);
    console.log('終了');
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[10]
  Combine Multiple Reducers
  
[内容]
  ストア内部処理の統合
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = { AUTH: false }
    const D2 = 0;
    
    // アクション名
    const C1 = 'LOGIN';
    const C2 = 'LOGOUT';
    const C3 = 'INC';
    const C4 = 'DEC';
    
    // アクション実体
    const A1 = { type: C1 }
    const A2 = { type: C2 }
    const A3 = { type: C3 }
    const A4 = { type: C4 }
    
    // アクション作成プログラム
    const LOGIN  = () => A1;
    const LOGOUT = () => A2;
    const INC    = () => A3;
    const DEC    = () => A4;
    
    // ストア内部処理
    const RDR1 = (state = D1, action) => {
      switch(action.type) {
        case C1:
          return { AUTH: true };
        case C2:
          return { AUTH: false };
        default:
          return state;
      }
    }
    
    // ストア内部処理
    const RDR2 = (state = D2, action) => {
      switch(action.type) {
        case C3:
          return state + 1;
        case C4:
          return state - 1;
        default:
          return state;
      }
    }
    
    // ストア内部処理の統合
    const ROOT = Redux.combineReducers({
      AUTH: RDR1,
      CALC: RDR2
    });
    
    // ストア作成
    const STORE = Redux.createStore(ROOT);
    
    // ストアにアクション送信
    STORE.dispatch(LOGIN());
    console.log(STORE.getState().AUTH);  // { AUTH: true }
    console.log(STORE.getState().CALC);  // 0
    
    // ストアにアクション送信
    STORE.dispatch(INC());
    console.log(STORE.getState().AUTH);  // { AUTH: true }
    console.log(STORE.getState().CALC);  // 1
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[11]
  Send Action Data to the Store
  
[内容]
  アクション内の項目に「type」以外を追加
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = { count: 0 }
    
    // アクション名
    const C1 = 'CNT';
    
    // アクション実体
    // const A1 = { type: C1, count: val }
    
    // アクション作成プログラム
    const CNT = (val) => { return { type: C1, count: val }; }
    
    // ストア内部処理
    const RDR = (state = D1, action) => {
      switch(action.type) {
        case C1:
          return { count: action.count };
        default:
          return D1;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDR);
    
    // アクション送信前
    console.log(STORE.getState().count);  // 0
    
    // アクション送信
    STORE.dispatch(CNT(11));
    
    // アクション送信後
    console.log(STORE.getState().count);  // 11
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[12]
  Use Middleware to Handle Asynchronous Actions
  
[内容]
  非同期アクション対応のストア作成
    ストア作成時にオプションでストア強化プログラム指定
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // HTML
  <main></main>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = { count: 0 };
    
    // アクション名
    const C1 = 'CNT';
    
    // アクション実体
    // const A1 = { type: C1, count: val }
    
    // アクション作成プログラム
    const CNT = (val) => { return { type: C1, count: val }; }
    
    // ストア内部処理
    const RDR = (state = D1, action) => {
      switch(action.type) {
        case C1:
          return { count: action.count };
        default:
          return D1;
      }
    }
    
    // 非同期アクション対応のストア作成 -> オプションでストア強化プログラム指定
    const STORE = Redux.createStore(RDR, Redux.applyMiddleware(ReduxThunk.default));
    
    // Promise
    const ASYNC = () => {
      return new Promise((resolve, reject) => {
        
        // 非同期処理 -> 1秒待機後にストアにアクション送信
        setTimeout(() => {
          STORE.dispatch(CNT(11));
          resolve();
        }, 1000);
        
      });
    }
    
    // アクション送信前
    console.log(STORE.getState().count);  // 0
    
    // アクション送信と送信後
    ASYNC().then(() => console.log(STORE.getState().count));
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[13]
  Write a Counter with Redux
  
[内容]
  演習問題
    今迄の内容を駆使してカウンターを完成させる
  
[確認]
  // 省略
  
================================================================================
[14]
  Never Mutate State
  
[内容]
  配列データの更新(1)
    配列のコピー作成後、コピーに対して更新 -> 関数「concat」で行う
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = [];
    
    // アクション名
    const C1 = 'ADD';
    
    // アクション実体
    // const A1 = { type: C1, arr }
    
    // アクション作成プログラム
    const ADD = (val) => { return { type: C1, val }; }
    
    // ストア内部処理
    const RDR = (state = D1, action) => {
      switch(action.type) {
        case C1:
          return state.concat(action.val);
        default:
          return D1;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDR);
    
    // アクション送信前
    console.log(STORE.getState());  // []
    
    // アクション送信
    STORE.dispatch(ADD(11));
    STORE.dispatch(ADD(22));
    STORE.dispatch(ADD(33));
    
    // アクション送信後
    console.log(STORE.getState());  // [11, 22, 33]
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[15]
  Use the Spread Operator on Arrays
  
[内容]
  配列データの更新(2)
    スプレッド演算子を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = [];
    
    // アクション名
    const C1 = 'ADD';
    
    // アクション実体
    // const A1 = { type: C1, arr }
    
    // アクション作成プログラム
    const ADD = (val) => { return { type: C1, val }; }
    
    // ストア内部処理
    const RDR = (state = D1, action) => {
      switch(action.type) {
        case C1:
          return [...state, action.val];
        default:
          return D1;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDR);
    
    // アクション送信前
    console.log(STORE.getState());  // []
    
    // アクション送信
    STORE.dispatch(ADD(11));
    STORE.dispatch(ADD(22));
    STORE.dispatch(ADD(33));
    
    // アクション送信後
    console.log(STORE.getState());  // [11, 22, 33]
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[16]
  Remove an Item from an Array
  
[内容]
  配列データの更新(3)
    要素を削除
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // デフォルト値
    const D1 = [11, 22, 33, 44, 55];
    
    // アクション名
    const C1 = 'RMV';
    
    // アクション実体
    // const A1 = { type: C1, idx }
    
    // アクション作成プログラム
    const RMV = (idx) => { return { type: C1, idx }; }
    
    // ストア内部処理
    const RDR = (state = D1, action) => {
      switch(action.type) {
        case C1:
          return [...state.slice(0, action.idx), ...state.slice(action.idx + 1, state.length)];
        default:
          return D1;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDR);
    
    // アクション送信前
    console.log(STORE.getState());  // [11, 22, 33, 44, 55]
    
    // アクション送信
    STORE.dispatch(RMV(1));
    STORE.dispatch(RMV(3));
    
    // アクション送信後
    console.log(STORE.getState());  // [11, 33, 44]
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[17]
  Copy an Object with Object.assign
  
[内容]
  オブジェクト
    プロパティを更新 -> Object.assign を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>sample</title>
  </head>
  <body>
  
  // CDN
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  // Redux
  <script>
    
    // 初期オブジェクト
    const D1 = {
      名前: '織田信長',
      状態: 'offline',
      場所: '愛知県'
    };
    
    // アクション名
    const C1 = 'ONLINE';
    
    // アクション作成プログラム
    const ACT = () => { return { type: C1 }; }
    
    // ストア内部処理
    const RDR = (state = D1, action) => {
      switch(action.type) {
        case C1:
          return Object.assign({}, state, { 状態: 'online' });
        default:
          return state;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDR);
    
    // アクション送信前
    console.log(STORE.getState().状態);  // offline
    
    // アクション送信
    STORE.dispatch(ACT());
    
    // アクション送信後
    console.log(STORE.getState().状態);  // online
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
