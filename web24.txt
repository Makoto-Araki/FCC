================================================================================
[01] Getting Started with React Redux
[02] Manage State Locally First
[03] Extract State Logic to Redux
[04] Use Provider to Connect Redux to React
[05] Map State to Props
[06] Map Dispatch to Props
[07] Connect Redux to React
[08] Connect Redux to the Messages App
[09] Extract Local State into Redux
[10] Moving Forward From Here
================================================================================
[01]
  Getting Started with React Redux
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(1)
    React + Redux + Container で最低限の動作まで作成する

[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.6.0/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.2/react-redux.min.js"></script>
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    /* ----------------------------------------------------------------- */
    /*  React Code                                                       */
    /* ----------------------------------------------------------------- */
    
    {/* 関数コンポーネント */}
    const CNT = (props) => {
      return (
        <p>Click : {props.P1}</p>
      );
    }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      
      /* コンストラクタ */
      constructor(props) {
        super(props);
        this.state = { count: 0 }
        this.BTN1 = this.BTN1Click.bind(this);
        this.BTN2 = this.BTN2Click.bind(this);
      }
      
      /* イベントハンドラ */
      BTN1Click() {
        this.setState(state => ({ count: this.state.count + 1 }));
      }
      
      /* イベントハンドラ */
      BTN2Click() {
        this.setState(state => ({ count: this.state.count - 1 }));
      }
      
      /* 描画処理 */
      render() {
        return (
          <div>
            <button onClick={this.BTN1}>増加</button>
            <button onClick={this.BTN2}>減少</button>
            <hr />
            <CNT P1={this.state.count} />
          </div>
        );
      }
    }
    
    /* ----------------------------------------------------------------- */
    /*  Redux Code                                                       */
    /* ----------------------------------------------------------------- */
    
    {/* アクション作成プログラム */}
    const INC = () => { return { type: 'Inc' }; }
    const DEC = () => { return { type: 'Dec' }; }
    
    {/* ストア内部ロジック */}
    const REDUCER = (state = { count: 0 }, action) => {
      switch(action.type) {
        case 'Inc':
          return { count: state.count + 1 };
        case 'Dec':
          return { count: state.count - 1 };
        default:
          return { count: 0 };
      }
    }
    
    {/* ストア作成 */}
    const STORE = Redux.createStore(REDUCER);
    
    /* ----------------------------------------------------------------- */
    /*  Container Code                                                   */
    /* ----------------------------------------------------------------- */
    
    {/* クラスコンポーネント側の「props.state.count」をストア側の情報「state.count」に紐付け */}
    const mapStateToProps = (state) => {
      return {
        count: state.count
      }
    }
    
    {/* クラスコンポーネント側のイベントハンドラをストア側のアクションに紐付け */}
    const mapDispatchToProps = (dispatch) => {
      return {
        BTN1: () => { dispatch(INC()); },
        BTN2: () => { dispatch(DEC()); }
      }
    }
    
    {/* 定数定義 */}
    const PRV = ReactRedux.Provider;
    const CON = ReactRedux.connect;
    
    {/* コンテナコンポーネント */}
    class CONTAINER extends React.Component {
    
      /* コンストラクタ */
      constructor(props) {
        super(props);
      }
      
      /* 描画処理 */
      render() {
        
        /* メインクラスコンポーネント「MAIN」と接続 => 最上位コンポーネント */
        const CONNECT = CON(mapStateToProps, mapDispatchToProps)(MAIN);
        
        /* 最上位コンポーネントを「PRV」で囲み配下コンポーネントもストア接続 */
        return (
          <PRV store={STORE}>
            <CONNECT />
          </PRV>
        );
      }
    }
    
    /* ----------------------------------------------------------------- */
    /*  Drawing Code                                                     */
    /* ----------------------------------------------------------------- */
    
    {/* コンテナコンポーネントを描画指示 */}
    ReactDOM.render(
      <CONTAINER />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[02]
  Manage State Locally First
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(2)
    内部情報「state」を更新するイベントハンドラ作成
  
[確認]
  // 上記「01」を参照
  
================================================================================
[03]
  Extract State Logic to Redux
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(3)
    内部情報「state」の内部パラメータ「count」管理のReduxコード追加
  
[確認]
  // 上記「01」を参照
  
================================================================================
[04]
  Use Provider to Connect Redux to React
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(4)
    コンテナコンポーネント作成 => まだ改良の余地がある
  
[確認]
  // 上記「01」を参照
  
================================================================================
[05]
  Map State to Props
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(5)
    ストア側の情報「count」とメインクラスコンポーネント側の情報「state.count」を紐付け
  
[確認]
  // 上記「01」を参照
  
================================================================================
[06]
  Map Dispatch to Props
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(6)
    イベントハンドラ発動時にストアにアクション送信
  
[確認]
  // 上記「01」を参照
  
================================================================================
[07]
  Connect Redux to React
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(7)
    ストアからメインクラスコンポーネントに接続
  
[確認]
  // 上記「01」を参照
  
================================================================================
[08]
  Connect Redux to the Messages App
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(8)
    動作確認
  
[確認]
  // 上記「01」を参照
  
================================================================================
[09]
  Extract Local State into Redux
  
[内容]
  内部情報(クリック数)を保持するアプリケーション作成(9)
    ローカル管理(React)とグローバル管理(Redux)の併存状態からグローバル管理のみに変更
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/15.3.2/react-dom-server.js"></script>
  <script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.6.0/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.2/react-redux.min.js"></script>
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <div id="APP"></div>
  
  <!-- JSX --->
  <script type="text/babel">
    
    /* ----------------------------------------------------------------- */
    /*  React Code                                                       */
    /* ----------------------------------------------------------------- */
    
    {/* 関数コンポーネント */}
    const CNT = (props) => {
      return (
        <p>Click : {props.P1}</p>
      );
    }
    
    {/* メインクラスコンポーネント */}
    class MAIN extends React.Component {
      
      /* コンストラクタ */
      constructor(props) {
        super(props);
        /* this.state = { count: 0 } */
        /* this.BTN1 = this.BTN1Click.bind(this); */
        /* this.BTN2 = this.BTN2Click.bind(this); */
      }
      
      /* イベントハンドラ */
      /* BTN1Click() { */
      /*   this.setState(state => ({ count: this.state.count + 1 })); */
      /* } */
      
      /* イベントハンドラ */
      /* BTN2Click() { */
      /*   this.setState(state => ({ count: this.state.count - 1 })); */
      /* } */
      
      /* グローバル管理(Redux)対応で追加 */
      Increment() {
        dispatch(INC());
      }
      
      /* グローバル管理(Redux)対応で追加 */
      Decrement() {
        dispatch(DEC());
      }
      
      /* 描画処理 */
      render() {
        return (
          <div>
            <button onClick={this.props.Increment}>増加</button>  {/* 変更 this.BTN1 => this.props.Increment */}
            <button onClick={this.props.Decrement}>減少</button>  {/* 変更 this.BTN2 => this.props.Decrement */}
            <hr />
            <CNT P1={this.props.count} />  {/* 変更 this.state.count => this.props.count */}
          </div>
        );
      }
    }
    
    /* ----------------------------------------------------------------- */
    /*  Redux Code                                                       */
    /* ----------------------------------------------------------------- */
    
    {/* アクション作成プログラム */}
    const INC = () => { return { type: 'Inc' }; }
    const DEC = () => { return { type: 'Dec' }; }
    
    {/* ストア内部ロジック */}
    const REDUCER = (state = { count: 0 }, action) => {
      switch(action.type) {
        case 'Inc':
          return { count: state.count + 1 };
        case 'Dec':
          return { count: state.count - 1 };
        default:
          return { count: 0 };
      }
    }
    
    {/* ストア作成 */}
    const STORE = Redux.createStore(REDUCER);
    
    /* ----------------------------------------------------------------- */
    /*  Container Code                                                   */
    /* ----------------------------------------------------------------- */
    
    {/* クラスコンポーネント側の「props.state.count」をストア側の情報「state.count」に紐付け */}
    const mapStateToProps = (state) => {
      return {
        count: state.count
      }
    }
    
    {/* クラスコンポーネント側のイベントハンドラをストア側のアクションに紐付け */}
    const mapDispatchToProps = (dispatch) => {
      return {
        /* BTN1: () => { dispatch(INC()); }, */
        /* BTN2: () => { dispatch(DEC()); }  */
        Increment: () => { dispatch(INC()); },  /* 追加 */
        Decrement: () => { dispatch(DEC()); }   /* 追加 */
      }
    }
    
    {/* 定数定義 */}
    const PRV = ReactRedux.Provider;
    const CON = ReactRedux.connect;
    
    {/* コンテナコンポーネント */}
    class CONTAINER extends React.Component {
    
      /* コンストラクタ */
      constructor(props) {
        super(props);
      }
      
      /* 描画処理 */
      render() {
        
        /* メインクラスコンポーネント「MAIN」と接続 => 最上位コンポーネント */
        const CONNECT = CON(mapStateToProps, mapDispatchToProps)(MAIN);
        
        /* 最上位コンポーネントを「PRV」で囲み配下コンポーネントもストア接続 */
        return (
          <PRV store={STORE}>
            <CONNECT />
          </PRV>
        );
      }
    }
    
    /* ----------------------------------------------------------------- */
    /*  Drawing Code                                                     */
    /* ----------------------------------------------------------------- */
    
    {/* コンテナコンポーネントを描画指示 */}
    ReactDOM.render(
      <CONTAINER />,
      document.getElementById('APP')
    );
    
  </script>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[10]
  Moving Forward From Here
  
[内容]
  サービス「GitHub」のソース群を紹介
  
[確認]
  // 省略
  
================================================================================
