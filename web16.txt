================================================================================
[00] Introduction to the Functional Programming Challenges
[01] Learn About Functional Programming
[02] Understand Functional Programming Terminology
[03] Understand the Hazards of Using Imperative Code
[04] Avoid Mutations and Side Effects Using Functional Programming
[05] Pass Arguments to Avoid External Dependence in a Function
[06] Refactor Global Variables Out of Functions
[07] Use the map Method to Extract Data from an Array
[08] Implement map on a Prototype
[09] Use the filter Method to Extract Data from an Array
[10] Implement the filter Method on a Prototype
[11] Return Part of an Array Using the slice Method
[12] Remove Elements from an Array Using slice Instead of splice
[13] Combine Two Arrays Using the concat Method
[14] Add Elements to the End of an Array Using concat Instead of push
[15] Use the reduce Method to Analyze Data
[16] Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem
[17] Sort an Array Alphabetically using the sort Method
[18] Return a Sorted Array Without Changing the Original Array
[19] Split a String into an Array Using the split Method
[20] Combine an Array into a String Using the join Method
[21] Apply Functional Programming to Convert Strings to URL Slugs
[22] Use the every Method to Check that Every Element in an Array Meets a Criteria
[23] Use the some Method to Check that Any Elements in an Array Meet a Criteria
[24] Introduction to Currying and Partial Application
================================================================================
[01]
  Learn About Functional Programming
  
[内容]
  関数型プログラミング
    入力 => 処理 => 出力
  
[確認]
  // 省略
  
================================================================================
[02]
  Understand Functional Programming Terminology
  
[内容]
  関数型プログラミング
    高階関数(コールバック関数)
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // コールバック関数 => 普通の関数と変わらない
    const myCall = (num) => {
      for (let i = 0; i < num; i++) {
        console.log(`callback : ${i}`);
      }
    }
    
    // 高階関数
    const myFunc = (callback, num) => {
      if (num > 0) {
        callback(num);
      }
    }
    
    // 高階関数からコールバック関数を実行
    myFunc(myCall, 2);
    myFunc(myCall, 3);
    myFunc(myCall, 4);
    
    // 関数を直接記述
    myFunc((num) => {
      for (let i = 0; i < num; i++) {
        console.log(`直接記述 : ${i}`);
      }
    }, 2)
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[03]
  Understand the Hazards of Using Imperative Code
  
[内容]
  タイトルは「命令型コード」の危険性
    危険性について話が見えないのでコード確認は省略
  
[確認]
  // 省略
  
================================================================================
[04]
  Avoid Mutations and Side Effects Using Functional Programming
  
[内容]
  上記「03」の危険性
    関数内から引数配列を関数「splice」の抽出で壊すこと
    関数内からグローバル変数やオブジェクトを変更すること
  
  対処法
    関数内で配列やオブジェクトのコピーを作成して変更すればOK
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 配列定義
    const arr1 = [11, 12, 13, 14];
    const arr2 = [21, 22, 23, 24];
    
    // 関数定義
    const myFunc = (arr) => {
      
      // 引数配列から要素を抽出して配列を壊す
      let tmp1 = arr.splice(0, 1);
      let tmp2 = arr.splice(0, 1);
      
      // 抽出した要素
      console.log(`抽出 : ${tmp1}`);
      console.log(`抽出 : ${tmp2}`);
      
      return arr;
    }
    
    // 要素抽出後の壊れた配列を出力
    console.log(`配列 : ${myFunc(arr1)}`);
    console.log(`配列 : ${myFunc(arr2)}`);
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[05]
  Pass Arguments to Avoid External Dependence in a Function
  
[内容]
問題点
  関数内でグローバル変数を参照時に当然ながら、グローバル変数が存在しなければ関数は動かない
  
  対処法
    依存関係を明確化して関数に引数を設置すればOK
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let val = 12;
    
    // 関数定義 => グローバル変数が存在しないと関数は動かない
    const myFunc = () => { console.log(`グローバル変数 : ${val}`); }
    
    // 出力
    myFunc();
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[06]
  Refactor Global Variables Out of Functions

[内容]
  上記「03、04、05」のまとめ
    1. 関数内でグローバル変数やオブジェクトの直接変更は禁止する
    2. グローバル変数やオブジェクトはパラメータとして関数に渡す
    3. パラメータを関数内でローカル変数にコピー後にローカル変数に変更を行う
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr1 = [11, 12, 13, 14];
    let arr2 = [21, 22, 23, 24];
    
    // 関数定義
    const myFunc = (callback, arr) => {
      
      // 引数をローカル変数にコピー
      let tmp = arr.slice(0, arr.length);
      
      // ローカル変数を更新
      for (let i = 0; i < tmp.length; i++) {
        tmp[i] = callback(tmp[i]);
      }
      
      // 更新済みのローカル変数を返す
      return tmp;
      
    }
    
    // 出力
    console.log(myFunc((val) => val * 2, arr1));  // [22, 24, 26, 28]
    console.log(myFunc((val) => val * 2, arr2));  // [42, 44, 46, 48]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[07]
  Use the map Method to Extract Data from an Array
  
[内容]
  配列オブジェクトのメソッド「map」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr = [11, 12, 13, 14];
    
    // 各要素を二倍
    let ret = arr.map((val) => val * 2);
    
    // 確認
    console.log(`変更前 : ${arr}`);  // [11, 12, 13, 14]
    console.log(`変更後 : ${ret}`);  // [22, 24, 26, 28]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[08]
  Implement map on a Prototype
  
[内容]
  配列オブジェクトのメソッド「map」を自作
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // プロトタイプに関数追加
    Array.prototype.MAP = function(callback) {
      
      // 戻り値の配列
      let tmp = [];
      
      // コールバック関数で配列の各要素を処理後に戻り値の配列に格納する
      this.forEach((A) => tmp.push(callback(A)));
      
      // 戻り値
      return tmp;
      
    }
    
    // 変数定義と初期化
    let arr = [11, 12, 13, 14];
    
    // 各要素を二倍
    let ret = arr.MAP((val) => val * 2);
    
    // 確認
    console.log(`変更前 : ${arr}`);  // [11, 12, 13, 14]
    console.log(`変更後 : ${ret}`);  // [22, 24, 26, 28]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[09]
  Use the filter Method to Extract Data from an Array
  
[内容]
  配列オブジェクトのメソッド「filter」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr = [11, 12, 13, 14];
    
    // 偶数のみ抽出
    let ret = arr.filter((val) => val % 2 === 0);
    
    // 確認
    console.log(`変更前 : ${arr}`);  // [11, 12, 13, 14]
    console.log(`変更後 : ${ret}`);  // [12, 14]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[10]
  Implement the filter Method on a Prototype
  
[内容]
  配列オブジェクトのメソッド「filter」を自作
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // プロトタイプに関数追加
    Array.prototype.FILTER = function(callback) {
      
      // 戻り値の配列
      let tmp = [];
      
      // コールバック関数で配列の各要素を処理後に戻り値の配列に格納する
      this.forEach((A) => { if (callback(A)) tmp.push(A); });
      
      // 戻り値
      return tmp;
      
    }
    
    // 変数定義と初期化
    let arr = [11, 12, 13, 14];
    
    // 偶数のみ抽出
    let ret = arr.FILTER((val) => val % 2 === 0);
    
    // 確認
    console.log(`変更前 : ${arr}`);  // [11, 12, 13, 14]
    console.log(`変更後 : ${ret}`);  // [12, 14]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[11]
  Return Part of an Array Using the slice Method
  
[内容]
  配列オブジェクトのメソッド「slice」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr = [11, 12, 13, 14];
    
    // 配列のコピー
    let ret = arr.slice(0, 2);
    
    // 確認
    console.log(`変更前 : ${arr}`);  // [11, 12, 13, 14]
    console.log(`変更後 : ${ret}`);  // [11, 12]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[12]
  Remove Elements from an Array Using slice Instead of splice
  
[内容]
  メソッド「splice」
    要素を抽出して配列を壊してしまう
  
  メソッド「slice」
    配列のコピーのため配列は壊さない => 通常はこちらを使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr = [11, 12, 13, 14];
    
    // 配列の要素「13、14」を削除
    let ret = arr.slice(0, 2);
    
    // 確認
    console.log(`変更前 : ${arr}`);  // [11, 12, 13, 14]
    console.log(`変更後 : ${ret}`);  // [11, 12]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[13]
  Combine Two Arrays Using the concat Method
  
[内容]
  配列オブジェクトのメソッド「concat」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr1 = [1, 2, 3];
    let arr2 = [4, 5, 6];
    
    // 配列の結合
    console.log(`パターン1 : ${arr1.concat(arr2)}`);  // [1, 2, 3, 4, 5, 6]
    console.log(`パターン2 : ${arr2.concat(arr1)}`);  // [4, 5, 6, 1, 2, 3]
    
    // 結合元の確認
    console.log(`結合元 : ${arr1}`);  // [1, 2, 3] -> 結合元の「arr1、arr2」は壊れていない
    console.log(`結合元 : ${arr2}`);  // [4, 5, 6] -> 結合元の「arr1、arr2」は壊れていない
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[14]
  Add Elements to the End of an Array Using concat Instead of push
  
[内容]
  メソッド「concat」をメソッド「push」のように使用する
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr1 = [1, 2, 3];
    let arr2 = [4, 5, 6];
    
    // concat
    console.log(`パターン1 : ${arr1.concat(arr2)}`);  // [1, 2, 3, 4, 5, 6]
    console.log(`パターン2 : ${arr2.concat(arr1)}`);  // [4, 5, 6, 1, 2, 3]
    
    // 結合元の確認
    console.log(`結合元 : ${arr1}`);  // [1, 2, 3] -> 結合元の「arr1、arr2」は壊れていない
    console.log(`結合元 : ${arr2}`);  // [4, 5, 6] -> 結合元の「arr1、arr2」は壊れていない
    
    // push
    console.log(`パターン1 : ${arr1.push(arr2)}`);  // 4 ？
    console.log(`パターン2 : ${arr2.push(arr1)}`);  // 4 ？
    
    // 結合元の確認
    console.log(`結合元 : ${arr1}`);  // [1, 2, 3, 4, 5, 6] -> 結合元が壊れた
    console.log(`結合元 : ${arr2}`);  // [4, 5, 6, 1, 2, 3] -> 結合元が壊れた
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[15]
  Use the reduce Method to Analyze Data
  
[内容]
  配列オブジェクトのメソッド「reduce」を使用
  
  第一引数 -> 累積 -> acm と今回は命名
  第二引数 -> 要素 -> val と今回は命名
  第三引数 -> 索引 -> idx と今回は命名
  第四引数 -> 配列 -> arr と今回は命名
  
  // 配列の各要素を合計 -> 文字の結合も可能
  配列.reduce((acm, val) => { return acm + val; })
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr1 = [1, 2, 3, 4];
    let arr2 = [5, 6, 7, 8];
    
    // 配列内の要素の合計
    console.log(`合計 : ${arr1.reduce((acm, val) => acm + val)}`);  // 10
    console.log(`合計 : ${arr2.reduce((acm, val) => acm + val)}`);  // 26
    
    // 結合元の確認
    console.log(`配列 : ${arr1}`);  // [1, 2, 3, 4] -> 配列は壊れていない
    console.log(`配列 : ${arr2}`);  // [5, 6, 7, 8] -> 配列は壊れていない
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[16]
  Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem
  
[内容]
  練習問題 - 配列中の正の整数の要素のみ抽出して各要素を二乗して返す
    [-2, -1.5, -1, 0, 1, 1.5, 2] => [1, 2] => [1, 4]
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr = [-2, -1.5, -1, 0, 1, 1.5, 2];
    
    // 正の正数のみ抽出
    let tmp = arr.filter(val => val > 0 && Number.isInteger(val));
    console.log(`処理(1) : ${tmp}`);  // [1, 2]
    
    // 各要素を二乗する
    let ret = tmp.map(val => val ** 2);
    console.log(`処理(2) : ${ret}`);  // [1, 4]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[17]
  Sort an Array Alphabetically using the sort Method
  
[内容]
  配列オブジェクトのメソッド「sort」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr = [12, 14, 11, 15, 13];
    
    // 数字を昇順にソート
    let ret = arr.sort((a, b) => a - b);
    console.log(`処理前 : ${arr}`);  // [11, 12, 13, 14, 15] -> 配列が壊れている
    console.log(`処理後 : ${ret}`);  // [11, 12, 13, 14, 15]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[18]
  Return a Sorted Array Without Changing the Original Array
  
[内容]
  配列オブジェクトのメソッド「sort」で配列を壊してしまうのを阻止
    メソッド「slice」でコピー後にソート処理を行えばOK
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr = [12, 14, 11, 15, 13];
    
    // メソッド「slice」でコピー
    let tmp = arr.slice(0, arr.length);
    
    // 数字を昇順にソート
    let ret = tmp.sort((a, b) => a - b);
    
    // 確認
    console.log(`処理前 : ${arr}`);  // [12, 14, 11, 15, 13]
    console.log(`処理後 : ${ret}`);  // [11, 12, 13, 14, 15]
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[19]
  Split a String into an Array Using the split Method
  
[内容]
  配列オブジェクトのメソッド「split」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let str = 'Hello World';
    
    // 文字列(配列)を区切文字に従い分割
    let ret = str.split(/\s/);
    
    // 確認
    console.log(`処理前 : ${str}`);  // Hello World
    console.log(`処理後 : ${ret}`);  // Hello,World
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[20]
  Combine an Array into a String Using the join Method
  
[内容]
  配列オブジェクトのメソッド「join」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let str = ['Hello','World'];
    
    // 要素同士を連結して文字列にする -> 正規表現「/\s/」が使えなかった
    let ret = str.join(' ');
    
    // 確認
    console.log(`処理前 : ${str}`);  // Hello,World
    console.log(`処理後 : ${ret}`);  // Hello World
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[21]
  Apply Functional Programming to Convert Strings to URL Slugs
  
[内容]
  練習問題 - 文字列の冒頭と末尾の空白を削除、内部の空白を「-」に変換、大文字を小文字に変換
    'AAA BBB ' => 'AAA BBB' => 'AAA-BBB' => 'aaa-bbb'
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let str = 'AAA BBB ';
    let ret = '';
    
    // 冒頭と末尾の空白を削除
    ret = str.replace(/^\s+|\s+$/g, '');
    
    // 内部の空白を「-」に変換
    ret = ret.replace(/\s/g, '-');
    
    // 大文字を小文字に変換
    ret = ret.toLowerCase();
    
    // 確認
    console.log(`処理前 :「${str}」`);  // 「AAA BBB 」
    console.log(`処理後 :「${ret}」`);  // 「aaa-bbb」
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[22]
  Use the every Method to Check that Every Element in an Array Meets a Criteria
  
[内容]
  配列オブジェクトのメソッド「every」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr1 = [1, 2, 3, 4, 5];
    let arr2 = [1, 2, 3, 4, -5];
    
    // 全要素が条件を満たしてはじめて「真」となる
    console.log(`配列1 : ${arr1.every(val => val > 0)}`);  // true
    console.log(`配列2 : ${arr2.every(val => val > 0)}`);  // false
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[23]
  Use the some Method to Check that Any Elements in an Array Meet a Criteria
  
[内容]
  配列オブジェクトのメソッド「some」を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 変数定義と初期化
    let arr1 = [1, 2, 3, 4, 5];
    let arr2 = [1, 2, 3, 4, -5];
    
    // 条件を満たす要素が一つでも存在すれば「真」となる
    console.log(`配列1 : ${arr1.some(val => val < 0)}`);  // false
    console.log(`配列2 : ${arr2.some(val => val < 0)}`);  // true
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[24]
  Introduction to Currying and Partial Application
  
[内容]
  カリー関数
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY SAMPLE</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JS
  <script>
    
    // 通常の関数
    const add1 = (x, y) => x + y;
    
    console.log(`通常 : ${add1(1, 1)}`);  // 2 (1 + 1)
    console.log(`通常 : ${add1(1, 2)}`);  // 3 (1 + 2)
    console.log(`通常 : ${add1(1, 3)}`);  // 4 (1 + 3)
    
    // カリー関数
    const add = (x) => (y) => x + y;
    const add2 = add(1)
    
    console.log(`カリー : ${add2(1)}`);  // 2 (1 + 1)
    console.log(`カリー : ${add2(2)}`);  // 3 (1 + 2)
    console.log(`カリー : ${add2(3)}`);  // 4 (1 + 3)
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
