================================================================================
[01] Create a Redux Store
[02] Get State from the Redux Store
[03] Define a Redux Action
[04] Define an Action Creator
[05] Dispatch an Action Event
[06] Handle an Action in the Store
[07] Use a Switch Statement to Handle Multiple Actions
[08] Use const for Action Types
[09] Register a Store Listener
[10] Combine Multiple Reducers
[11] Send Action Data to the Store
[12] Use Middleware to Handle Asynchronous Actions
[13] Write a Counter with Redux
[14] Never Mutate State
[15] Use the Spread Operator on Arrays
[16] Remove an Item from an Array
[17] Copy an Object with Object.assign
================================================================================
[01]
  Create a Redux Store
  
[内容]
  ストア作成
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // ストア内部処理
    const RDCR = (state = 5) => { return state };
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    
    // 内部情報を取得
    console.log(STORE.getState());  // 5
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[02]
  Get State from the Redux Store
  
[内容]
  ストアから内部情報を取得
  
[確認]
  // 上記「01」を参照
  
================================================================================
[03]
  Define a Redux Action
  
[内容]
  アクション
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // デフォルト値
    const DEFAULT = { type: 'ZZZ' };
    
    // 定数
    const AC1 = 'AAA';
    const AC2 = 'BBB';
    const AC3 = 'CCC';
    const AC4 = 'DDD';
    
    // アクション作成プログラム
    const AAA  = () => {
      return { type: 'AAA' };
    };
    
    // アクション作成プログラム
    const BBB = () => {
      return { type: 'BBB' };
    };
    
    // アクション作成プログラム
    const CCC  = () => {
      return { type: 'CCC' };
    };
    
    // アクション作成プログラム
    const DDD  = () => {
      return { type: 'DDD' };
    };
    
    // ストア内部処理
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case 'AAA':
          return { type: 'AAA' };
        case 'BBB':
          return { type: 'BBB' };
        case AC3:
          return { type: 'CCC' };
        case AC4:
          return { type: 'DDD' };
        default:
          return state;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    console.log(STORE.getState());  // { type: ZZZ }
    
    // ストアにアクション「AAA」を送信
    STORE.dispatch(AAA());
    console.log(STORE.getState());  // { type: AAA }
    
    // ストアにアクション「BBB」を送信
    STORE.dispatch(BBB());
    console.log(STORE.getState());  // { type: BBB }
    
    // ストアにアクション「CCC」を送信
    STORE.dispatch(CCC());
    console.log(STORE.getState());  // { type: CCC }
    
    // ストアにアクション「DDD」を送信
    STORE.dispatch(DDD());
    console.log(STORE.getState());  // { type: DDD }
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[04]
  Define an Action Creator
  
[内容]
  アクション作成
  
[確認]
  // 上記「03」を参照
  
================================================================================
[05]
  Dispatch an Action Event
  
[内容]
  アクションのストア送信
  
[確認]
  // 上記「03」を参照
  
================================================================================
[06]
Handle an Action in the Store

[内容]
  アクションに基づいて内部情報の更新ハンドラを追加 => ストア内部ロジック
  
[確認]
  // 上記「03」を参照
  
================================================================================
[07]
  Use a Switch Statement to Handle Multiple Actions
  
[内容]
  ハンドラ追加 => ストア内部ロジック
  
[確認]
  // 上記「03」を参照
  
================================================================================
[08]
  Use const for Action Types
  
[内容]
  アクション名の「CCC」や「DDD」を文字列ではなく定数参照に変更
  
[確認]
  // 上記「03」を参照
  
================================================================================
[09]
  Register a Store Listener
  
[内容]
  ストアにアクション受信時の処理を登録
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // デフォルト値
    const DEFAULT = { type: 'ZZZ' };
    
    // 定数
    const AC1 = 'AAA';
    const AC2 = 'BBB';
    const AC3 = 'CCC';
    const AC4 = 'DDD';
    
    // アクション作成プログラム
    const AAA  = () => {
      return { type: 'AAA' };
    };
    
    // アクション作成プログラム
    const BBB = () => {
      return { type: 'BBB' };
    };
    
    // アクション作成プログラム
    const CCC  = () => {
      return { type: 'CCC' };
    };
    
    // アクション作成プログラム
    const DDD  = () => {
      return { type: 'DDD' };
    };
    
    // ストア内部処理
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case 'AAA':
          return { type: 'AAA' };
        case 'BBB':
          return { type: 'BBB' };
        case AC3:
          return { type: 'CCC' };
        case AC4:
          return { type: 'DDD' };
        default:
          return state;
      }
    }
    
    // アクション受信時のストア側の処理
    const FUNC = () => {
      const TIME = new Date();
      console.log(`受信時刻 : ${TIME.toString()}`);
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    
    // アクション受信時の処理をストア側に登録
    STORE.subscribe(FUNC);
    
    // ストアにアクション「AAA」を送信
    STORE.dispatch(AAA());  // 受信時刻 : Mon Jun 20 2022 09:42:04 GMT+0900 (日本標準時)
    
    // ストアにアクション「BBB」を送信
    STORE.dispatch(BBB());  // 受信時刻 : Mon Jun 20 2022 09:42:04 GMT+0900 (日本標準時)
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[10]
  Combine Multiple Reducers
  
[内容]
  ストア内部処理の統合
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // デフォルト値
    const DEFAULT1 = { type: 'ZZZ' };
    const DEFAULT2 = 0;
    
    // 定数
    const AC1 = 'AAA';
    const AC2 = 'BBB';
    const AC3 = 'ADD';
    const AC4 = 'SUB';
    
    // アクション作成プログラム
    const AAA  = () => {
      return { type: 'AAA' };
    };
    
    // アクション作成プログラム
    const BBB = () => {
      return { type: 'BBB' };
    };
    
    // アクション作成プログラム
    const ADD  = () => {
      return { type: 'ADD' };
    };
    
    // アクション作成プログラム
    const SUB  = () => {
      return { type: 'SUB' };
    };
    
    // ストア1内部処理
    const RDC1 = (state = DEFAULT1, action) => {
      switch(action.type) {
        case AC1:
          return { type: 'AAA' };
        case AC2:
          return { type: 'BBB' };
        default:
          return state;
      }
    }
    
    // ストア2内部処理
    const RDC2 = (state = DEFAULT2, action) => {
      switch(action.type) {
        case AC3:
          return state + 1;
        case AC4:
          return state - 1;
        default:
          return state;
      }
    }
    
    // ストア内部処理の統合
    const ROOT = Redux.combineReducers({
      STRS: RDC1,
      ACUM: RDC2
    });
    
    // ストア作成
    const STORE = Redux.createStore(ROOT);
    
    // ストア内部情報を出力
    console.log(STORE.getState().STRS);  // { type: ZZZ }
    console.log(STORE.getState().ACUM);  // 0
    
    // ストアにアクション送信
    STORE.dispatch(AAA());
    STORE.dispatch(ADD());

    // ストア内部情報を出力
    console.log(STORE.getState().STRS);  // { type: AAA }
    console.log(STORE.getState().ACUM);  // 1
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[11]
  Send Action Data to the Store
  
[内容]
  アクション作成プログラム内に「type」以外の項目「key1」と「key2」を追加
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // デフォルト値
    const DEFAULT = {
      type: 'ZZZ',
      key1: 0,
      key2: 0
    };
    
    // 定数
    const AC1 = 'ADD';
    const AC2 = 'SUB';
    
    // アクション作成プログラム
    const ADD  = (val1, val2) => {
      return {
        type: AC1,
        key1: val1,
        key2: val2
      };
    };
    
    // アクション作成プログラム
    const SUB = (val1, val2) => {
      return {
        type: AC2,
        key1: val1,
        key2: val2
      };
    };
    
    // ストア内部処理
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case AC1:
          return {
            type: AC1,
            key1: action.key1 + 1,
            key2: action.key2 + 1
          };
        case AC2:
          return {
            type: AC2,
            key1: action.key1 - 1,
            key2: action.key2 - 1
          };
        default:
          return state;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    
    // ストア内部情報を出力
    console.log(STORE.getState());  // { type: 'ZZZ', key1: 0, key2: 0 }
    
    // ストアにアクション送信
    STORE.dispatch(ADD(3, 3));
    
    // ストア内部情報を出力
    console.log(STORE.getState());  // { type: 'ADD', key1: 4, key2: 4 }
    
    // ストアにアクション送信
    STORE.dispatch(SUB(7, 7));
    
    // ストア内部情報を出力
    console.log(STORE.getState());  // { type: 'SUB', key1: 6, key2: 6 }
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[12]
  Use Middleware to Handle Asynchronous Actions
  
[内容]
  非同期アクション対応のストア作成
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // デフォルト値
    const DEFAULT = {
      type: 'ZZZ',
      key1: 0,
      key2: 0
    };
    
    // 定数
    const AC1 = 'ADD';
    const AC2 = 'SUB';
    
    // アクション作成プログラム
    const ADD  = (val1, val2) => {
      return {
        type: AC1,
        key1: val1,
        key2: val2
      };
    };
    
    // アクション作成プログラム
    const SUB = (val1, val2) => {
      return {
        type: AC2,
        key1: val1,
        key2: val2
      };
    };
    
    // ストア内部処理
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case AC1:
          return {
            type: AC1,
            key1: action.key1 + 1,
            key2: action.key2 + 1
          };
        case AC2:
          return {
            type: AC2,
            key1: action.key1 - 1,
            key2: action.key2 - 1
          };
        default:
          return state;
      }
    }
    
    // 非同期アクション対応のストア作成
    const STORE = Redux.createStore(RDCR, Redux.applyMiddleware(ReduxThunk.default));
    
    // 非同期処理関数
    const Func = (Action, val1, val2) => {
      return new Promise((res, rej) => {
        setTimeout(() => {
          if (Action === AC1) STORE.dispatch(ADD(val1, val2));
          if (Action === AC2) STORE.dispatch(SUB(val1, val2));
          console.log(STORE.getState());
          res();
        }, 1000);
      });
    }
    
    // 非同期処理関数を順番通りに呼び出す関数
    async function Main() {
      try {
        await Func(AC1, 1, 1);  // { type: 'ADD', key1: 2, key2: 2 }
        await Func(AC1, 2, 2);  // { type: 'ADD', key1: 3, key2: 3 }
        await Func(AC2, 3, 3);  // { type: 'SUB', key1: 2, key2: 2 }
        await Func(AC2, 4, 4);  // { type: 'SUB', key1: 3, key2: 3 }
      } catch (err) {
        console.log(err);
      }
    }
    
    // 非同期処理を順番に実行
    Main();
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[13]
  Write a Counter with Redux
  
[内容]
  演習問題
    今迄の内容を駆使してカウンターを完成させる
  
[確認]
  // 省略
  
================================================================================
[14]
  Never Mutate State
  
[内容]
  配列データの更新(1)
    配列のコピー作成後、コピーに対して更新 => 関数「concat」で行う
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // デフォルト値
    const DEFAULT = [];
    
    // アクション名
    const AC1 = 'ADD';
    
    // アクション作成プログラム
    const ADD = (val) => {
      return {
        type: AC1,
        key1: val
      };
    }
    
    // ストア内部処理
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case AC1:
          return state.concat(action.key1);
        default:
          return state;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    
    // アクション送信前
    console.log(STORE.getState());  // []
    
    // アクション送信
    STORE.dispatch(ADD(11));
    STORE.dispatch(ADD(22));
    STORE.dispatch(ADD(33));
    
    // アクション送信後
    console.log(STORE.getState());  // [11, 22, 33]
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[15]
  Use the Spread Operator on Arrays
  
[内容]
  配列データの更新(2)
    スプレッド演算子を使用
  
    (例)
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case AC1:
          return state.concat(action.key1); => return [...state, action.key1];
        default:
          return state;
      }
    }
  
[確認]
  // 省略
  
================================================================================
[16]
  Remove an Item from an Array
  
[内容]
  配列データの更新(3)
    要素を削除
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // デフォルト値
    const DEFAULT = [11, 22, 33, 44, 55, 66];
    
    // アクション名
    const AC1 = 'RMV';
    
    // アクション作成プログラム
    const RMV = (val) => {
      return {
        type: AC1,
        key1: val
      };
    }
    
    // ストア内部処理
    const RDCR = (state = DEFAULT, action) => {
      switch(action.type) {
        case AC1:
          return [...state.slice(0, action.key1), ...state.slice(action.key1 + 1, state.length)];
        default:
          return state;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    
    // アクション送信前
    console.log(STORE.getState());  // [11, 22, 33, 44, 55, 66]
    
    // アクション送信
    STORE.dispatch(RMV(1));
    STORE.dispatch(RMV(1));
    STORE.dispatch(RMV(1));
    
    // アクション送信後
    console.log(STORE.getState());  // [11, 55, 66]
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[17]
  Copy an Object with Object.assign
  
[内容]
  オブジェクト
    プロパティを更新 => Object.assign を使用
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- CDN --->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.3.0/redux-thunk.min.js "></script>
  
  <!-- Redux --->
  <script>
    
    // 初期オブジェクト
    const OBJ = {
      key1: 'AAA',
      key2: 'BBB'
    };
    
    // アクション名
    const AC1 = 'key1';
    const AC2 = 'key2';
    
    // アクション作成プログラム
    const KEY1 = (val) => {
      return {
        type: AC1,
        key1: val
      };
    }
    
    // アクション作成プログラム
    const KEY2 = (val) => {
      return {
        type: AC2,
        key2: val
      };
    }
    
    // ストア内部処理
    const RDCR = (state = OBJ, action) => {
      switch(action.type) {
        case AC1:
          return Object.assign({}, state, { key1: action.key1 });
        case AC2:
          return Object.assign({}, state, { key2: action.key2 });
        default:
          return state;
      }
    }
    
    // ストア作成
    const STORE = Redux.createStore(RDCR);
    
    // アクション送信前
    console.log(STORE.getState());  // { key1: 'AAA', key2: 'BBB' }
    
    // アクション送信
    STORE.dispatch(KEY1('CCC'));
    
    // アクション送信後
    console.log(STORE.getState());  // { key1: 'CCC', key2: 'BBB' }
    
    // アクション送信
    STORE.dispatch(KEY2('DDD'));
    
    // アクション送信前
    console.log(STORE.getState());  // { key1: 'CCC', key2: 'DDD' }
    
  </script>
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================

