================================================================================
[X01] [Node] //
[001] Meet the Node console
[002] Start a Working Express Server
[003] Serve an HTML File
[004] Serve Static Assets
[005] Serve JSON on a Specific Route
[006] Use the .env File
[007] Implement a Root-Level Request Logger Middleware
[008] Chain Middleware to Create a Time Server
[009] Get Route Parameter Input from the Client
[010] Get Query Parameter Input from the Client
[011] Use body-parser to Parse POST Requests
[012] Get Data from POST Requests
[Y01] [Express] //
[Y02] [Express] //
[Y03] [Express] //
[Y04] [Express] //
[Y05] [Express] //
================================================================================
[X01]
  [Node] 基本的なソースコード記述
  
[内容]
  ポート「3000」で待ち受けを行い、レスポンスに「Hello World」を返す
  
[確認]
  $ cd $HOME/app01
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  
  let server = http.createServer(
    (request, response) => {
      response.end('Hello World');
    }
  );
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (Hello World を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X02]
  [Node] ヘッダ情報を付与してレスポンスを返す
  
[内容]
  ヘッダ情報に「text/html」を指定する
  
[確認]
  $ cd $HOME/app02
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  
  let server = http.createServer(
    (request, response) => {
      response.setHeader('Content-Type', 'text/html');
      response.write('<!doctype html>');
      response.write('<html lang="ja">');
      response.write('<head>');
      response.write('<meta charset="utf-8">');
      response.write('<title>Hello World</title>');
      response.write('</head>');
      response.write('<body>');
      response.write('<p>Hello World</p>');
      response.write('</body>');
      response.write('</html>');
      response.end();
    }
  );
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (Hello World を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X03]
  [Node] ファイルを読み込みレスポンスで返す
  
[内容]
  モジュール「fs」でファイル「index.html」の内容をレスポンスで返す

[確認]
  $ cd $HOME/app03
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app03
  $ vi index.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <title>Hello World</title>
  </head>
  <body>
  <p>Hello World</p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app03
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  let fs = require('fs');

  let server = http.createServer(
    (request, response) => {
      fs.readFile('./index.html', 'UTF-8',
        (err, data) => {
          response.writeHead(200, { 'Content-Type' : 'text/html' });
          response.write(data);
          response.end();
        }
      );
    }
  );
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app03
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (Hello World を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X04]
  [Node] テンプレートエンジンを使用する
  
[内容]
  テンプレートエンジン「EJS」を使用する

[確認]
  $ cd $HOME/app04
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app04
  $ npm install ejs (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app04
  $ vi index.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <title><%=title %></title>
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app04
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  let fs = require('fs');
  let ejs = require('ejs');
  
  let index = fs.readFileSync('./index.ejs', 'UTF-8');
  
  let server = http.createServer(
    (request, response) => {
      let content = ejs.render(index, {
        title: 'Hello World',
        content: 'Hello World'
      });
      response.writeHead(200, { 'Content-Type' : 'text/html' });
      response.write(content);
      response.end();
    }
  );
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app04
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (Hello World を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X05]
  [Node] ルーティングを実装する
  
[内容]
  アドレス毎にルーティングを実装する

[確認]
  $ cd $HOME/app05
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app05
  $ npm install ejs url (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app05
  $ vi index.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <title><%=title %></title>
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app05
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  let fs = require('fs');
  let ejs = require('ejs');
  let url = require('url');
  
  let index = fs.readFileSync('./index.ejs', 'UTF-8');

  let server = http.createServer(
    (request, response) => {
      let parts = url.parse(request.url);
      let content = '';

      switch(parts.pathname) {
        case '/':
          content = ejs.render(index, {
            title: 'Hello World',
            content: 'Hello World'
          });
          break;
        case '/other1':
          content = ejs.render(index, {
            title: 'Other1',
            content: 'Other1'
          });
          break;
        case '/other2':
          content = ejs.render(index, {
            title: 'Other2',
            content: 'Other2'
          });
          break;
        default:
          content = ejs.render(index, {
            title: 'None Page',
            content: 'None Page'
          });
          break;
      }
      response.writeHead(200, { 'Content-Type' : 'text/html' });
      response.write(content);
      response.end();
    }
  );
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app05
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (Hello World を確認)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/other1
  
  コマンドの実行結果
  --------------------------------------------------
  (Other1 を確認)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/other2
  
  コマンドの実行結果
  --------------------------------------------------
  (Other2 を確認)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/other3
  
  コマンドの実行結果
  --------------------------------------------------
  (None Page を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X06]
  [Node] クエリーパラメータを表示する
  
[内容]
  クエリーパラメータを画面に表示する
  
[確認]
  $ cd $HOME/app06
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app06
  $ npm install ejs url (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app06
  $ vi index.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <title><%=title %></title>
  </head>
  <body>
  <p>key1 : <%=val1 %></p>
  <p>key2 : <%=val2 %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app06
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  let fs = require('fs');
  let ejs = require('ejs');
  let url = require('url');
  
  let index = fs.readFileSync('./index.ejs', 'UTF-8');
  
  let server = http.createServer(
    (request, response) => {
      let parts = url.parse(request.url, true);
      let content = '';
      
      switch(parts.pathname) {
        case '/':
          content = ejs.render(index, {
            title: 'Query Params',
            val1: parts.query.key1,
            val2: parts.query.key2
          });
          break;
        default:
          content = ejs.render(index, {
            title: 'Query Params',
            val1: 'None Param',
            val2: 'None Param'
          });
          break;
      }
      response.writeHead(200, { 'Content-Type' : 'text/html' });
      response.write(content);
      response.end();
    }
  );
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app06
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/?key1=AAA&key2=BBB
  
  コマンドの実行結果
  --------------------------------------------------
  (key1 : AAA を確認)
  (key2 : BBB を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X07]
  [Node] フォームからデータ送信
  
[内容]
  画面「input」のフォームからデータを送信後に別画面「output」に表示する
  
  並行して実装
    ルーティング処理を別関数に移動
    スタイルシート適用
  
[確認]
  $ cd $HOME/app07
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app07
  $ npm install ejs url (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app07
  $ vi input.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="./style.css">
  <title><%=title %></title>
  </head>
  <body>
  <form method="post" action="/output">
    <!-- 各科目の点数を入力 --->
    <label for="score1"><%=subject1 %></label><input type="text" id="score1" name="score1">
    <label for="score2"><%=subject2 %></label><input type="text" id="score2" name="score2">
    <label for="score3"><%=subject3 %></label><input type="text" id="score3" name="score3">
    <label for="score4"><%=subject4 %></label><input type="text" id="score4" name="score4">
    <label for="score5"><%=subject5 %></label><input type="text" id="score5" name="score5">
    <input type="submit" value="Click">
  </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app07
  $ vi output.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="./style.css">
  <title><%=title %></title>
  </head>
  <body>
  <div id="result">
    <!-- 各科目の点数を表示 --->
    <p><%=subject1 %> : <%=score1 %></p>
    <p><%=subject2 %> : <%=score2 %></p>
    <p><%=subject3 %> : <%=score3 %></p>
    <p><%=subject4 %> : <%=score4 %></p>
    <p><%=subject5 %> : <%=score5 %></p>
  </div>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app07
  $ vi style.css
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  #result {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  #result p {
    font-size: 20px;
    color: Crimson;
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app07
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  let fs = require('fs');
  let ejs = require('ejs');
  let url = require('url');
  let qs = require('querystring');
  
  let input = fs.readFileSync('./input.ejs', 'UTF-8');
  let style = fs.readFileSync('./style.css', 'UTF-8');
  let output = fs.readFileSync('./output.ejs', 'UTF-8');
  
  let server = http.createServer(
    (request, response) => {
      let parts = url.parse(request.url);
      switch(parts.pathname) {
        case '/':
          response_input(request, response);
          break;
        case '/style.css':
          response_style(request, response);
          break;
        case '/output':
          response_output(request, response);
          break;
        default:
          response_input(request, response);
          break;
      }
    }
  );
  
  function response_input(request, response) {
    let content = ejs.render(input, {
      title: '点数入力',
      subject1: '国語',
      subject2: '数学',
      subject3: '英語',
      subject4: '理科',
      subject5: '社会',
    });
    response.writeHead(200, { 'Content-Type' : 'text/html' });
    response.write(content);
    response.end();
  }
  
  function response_style(request, response) {
    response.writeHead(200, { 'Content-Type' : 'text/css' });
    response.write(style);
    response.end();
  }
  
  function response_output(request, response) {
    let body = '';
    if (request.method === 'POST') {
      request.on('data', data => {
        body += data;
      });
      request.on('end', () => {
        let qs_str = qs.parse(body);
        let content = ejs.render(output, {
          title: '点数表示',
          subject1: '国語',
          subject2: '数学',
          subject3: '英語',
          subject4: '理科',
          subject5: '社会',
          score1: qs_str.score1,
          score2: qs_str.score2,
          score3: qs_str.score3,
          score4: qs_str.score4,
          score5: qs_str.score5,
        });
        response.writeHead(200, { 'Content-Type' : 'text/html' });
        response.write(content);
        response.end();
      });
    }
  }
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app07
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  $ http://localhost:3000/input
  
  コマンドの実行結果
  --------------------------------------------------
  (国語に 55 を入力) => 別画面「output」で同じ数値を確認
  (数学に 65 を入力) => 別画面「output」で同じ数値を確認
  (英語に 75 を入力) => 別画面「output」で同じ数値を確認
  (理科に 85 を入力) => 別画面「output」で同じ数値を確認
  (社会に 95 を入力) => 別画面「output」で同じ数値を確認
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X08]
  [Node] データをテーブル表示
  
[内容]
  オブジェクトのデータをテーブル表示する

[確認]
  $ cd $HOME/app08
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app08
  $ npm install ejs url (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app08
  $ vi output.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="./style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <tbody>
      <% for(let key in OBJ) { %>
        <tr>
          <th><%=key %></th>
          <td><%=OBJ[key] %></td>
        </tr>
      <% } %>
    </tbody>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app08
  $ vi style.css
  
  コマンドの実行結果
  --------------------------------------------------
  table {
    margin: 15px auto;
    padding: 5px;
    width: 50%;
  }
  
  table tr {
    padding: 5px;
    margin: 10px;
    color: Crimson;
    font-size: 25px;
  }
  
  table tr th {
    padding: 10px;
    margin: 0px;
    border: 3px solid Crimson;
    width: 100px;
  }
  
  table tr td {
    padding: 10px;
    margin: 0px;
    border: 3px solid Crimson;
    width: 100px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app08
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  let fs = require('fs');
  let ejs = require('ejs');
  let url = require('url');
  
  let style = fs.readFileSync('./style.css', 'UTF-8');
  let output = fs.readFileSync('./output.ejs', 'UTF-8');
  
  let server = http.createServer(
    (request, response) => {
      let parts = url.parse(request.url);
      switch(parts.pathname) {
        case '/':
          response_output(request, response);
          break;
        case '/style.css':
          response_style(request, response);
          break;
        default:
          response_output(request, response);
          break;
      }
    }
  );
  
  function response_style(request, response) {
    response.writeHead(200, { 'Content-Type' : 'text/css' });
    response.write(style);
    response.end();
  }
  
  function response_output(request, response) {
    let DATA = {
      '国語' : '55',
      '数学' : '65',
      '英語' : '75',
      '理科' : '85',
      '社会' : '95',
    }
    let content = ejs.render(output, {
      title: '点数表示',
      OBJ: DATA,
    });
    response.writeHead(200, { 'Content-Type' : 'text/html' });
    response.write(content);
    response.end();
  }

  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app08
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (各科目の点数の表示を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X09]
  [Node] パーシャル
  
[内容]
  パーシャルでテンプレートの簡略化
  
[確認]
  $ cd $HOME/app09
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app09
  $ npm install ejs url (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app09
  $ vi items.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <tr>
    <th><%=key %></th>
    <td><%=val %></td>
  </tr>
  --------------------------------------------------
  
  $ cd $HOME/app09
  $ vi output.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="./style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <tbody>
      <% for(let key in OBJ) { %>
        <%- include('items', { key: key, val: OBJ[key] }) %>
      <% } %>
    </tbody>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app09
  $ vi style.css
  
  コマンドの実行結果
  --------------------------------------------------
  table {
    margin: 15px auto;
    padding: 5px;
    width: 50%;
  }
  
  table tr {
    padding: 5px;
    margin: 10px;
    color: Crimson;
    font-size: 25px;
  }
  
  table tr th {
    padding: 10px;
    margin: 0px;
    border: 3px solid Crimson;
    width: 100px;
  }
  
  table tr td {
    padding: 10px;
    margin: 0px;
    border: 3px solid Crimson;
    width: 100px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app09
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  let fs = require('fs');
  let ejs = require('ejs');
  let url = require('url');
  
  let style = fs.readFileSync('./style.css', 'UTF-8');
  let output = fs.readFileSync('./output.ejs', 'UTF-8');
  
  let server = http.createServer(
    (request, response) => {
      let parts = url.parse(request.url);
      switch(parts.pathname) {
        case '/':
          response_output(request, response);
          break;
        case '/style.css':
          response_style(request, response);
          break;
        default:
          response_output(request, response);
          break;
      }
    }
  );
  
  function response_style(request, response) {
    response.writeHead(200, { 'Content-Type' : 'text/css' });
    response.write(style);
    response.end();
  }
  
  function response_output(request, response) {
    let DATA = {
      '国語' : '55',
      '数学' : '65',
      '英語' : '75',
      '理科' : '85',
      '社会' : '95',
    }
    let content = ejs.render(output, {
      title: '点数表示',
      OBJ: DATA,
      filename: 'items',
    });
    response.writeHead(200, { 'Content-Type' : 'text/html' });
    response.write(content);
    response.end();
  }
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app09
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (各科目の点数の表示を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X10]
  [Node] クッキー
  
[内容]
  フォーム上からクッキーに保存したい内容を送信して、レスポンスにセットさせてクライアントのクッキーに保存させる
  
[確認]
  $ cd $HOME/app10
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app10
  $ npm install ejs url (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app10
  $ vi index.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="./style.css">
  <title><%=title %></title>
  </head>
  <body>
    <!-- COOKIE SHOW --->
    <p>COOKIE : <%=cookie_data %></p>
    
    <!-- COOKIE SEND --->
    <form method="post" action="/">
      <label for="msg">MESSAGE</label><input type="text" id="msg" name="msg">
      <input type="submit" value="Click">
    </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app10
  $ vi style.css
  
  コマンドの実行結果
  --------------------------------------------------
  p {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
    font-size: 30px;
  }
  
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app10
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  let http = require('http');
  let fs = require('fs');
  let ejs = require('ejs');
  let url = require('url');
  let qs = require('querystring');
  
  let style = fs.readFileSync('./style.css', 'UTF-8');
  let index = fs.readFileSync('./index.ejs', 'UTF-8');
  
  let server = http.createServer(
    (request, response) => {
      let parts = url.parse(request.url);
      switch(parts.pathname) {
        case '/':
          response_index(request, response);
          break;
        case '/style.css':
          response_style(request, response);
          break;
        default:
          response_index(request, response);
          break;
      }
    }
  );
  
  function response_style(request, response) {
    response.writeHead(200, { 'Content-Type' : 'text/css' });
    response.write(style);
    response.end();
  }
  
  function setCookie(key, val, response) {
    let data = escape(val);
    response.setHeader('Set-Cookie', [key + '=' + data]);
  }
  
  function getCookie(key, request) {
    let data = request.headers.cookie != undefined ? request.headers.cookie : '';
    let arr = data.split(';');
    for (let i in arr) {
      if (arr[i].trim().startsWith(key + '=')) {
        let result = arr[i].trim().substring(key.length + 1);
        return escape(result);
      }
    }
    return '';
  }

  function response_index(request, response) {
    let body = '';
    if (request.method === 'POST') {
      request.on('data', data => {
        body += data;
      });
      request.on('end', () => {
        let qs_str = qs.parse(body);
        setCookie('msg', qs_str.msg, response);
        let content = ejs.render(index, {
          title: 'COOKIE',
          cookie_data: getCookie('msg', request),
        });
        response.writeHead(200, { 'Content-Type' : 'text/html' });
        response.write(content);
        response.end();
      });
    } else {
      let content = ejs.render(index, {
        title: 'COOKIE',
        cookie_data: getCookie('msg', request),
      });
      response.writeHead(200, { 'Content-Type' : 'text/html' });
      response.write(content);
      response.end();
    }
  }
  
  server.listen(3000);
  --------------------------------------------------
  
  $ cd $HOME/app10
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (COOKIE : 'DDD' MESSAGE : 'EEE') => Click => レスポンスヘッダーに「msg=EEE」が付与、クッキー保存
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X11]
  [Express] 基本的なソースコード記述(1)
  
[内容]
  ポート「3000」で待ち受けを行い、レスポンスに「Hello World」を返す

[確認]
  $ cd $HOME/app11
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app11
  $ npm install express (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app11
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  const express = require('express');
  const app = express();
  
  app.get('/', (req, res) => {
    res.end('Hello World');
  });
  
  app.listen(3000, () => {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app11
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (Hello World を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X12]
  [Express] 基本的なソースコード記述(2)
  
[内容]
  上記「X11」をジェネレータ生成したコード上で記述する
  
  並行して実装
    スタイルシート適用
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app12
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <title><%=title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  p {
    font-size: 20px;
    color: Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  
  router.get('/', function(req, res, next) {
    res.render('index', {
      title: 'Hello World',
      content: 'Hello World',
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (Hello World を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X13]
  [Express] ルーティング処理を追加
  
[内容]
  ページを追加して対応するルーティング処理を追加する
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app13
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app13
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app13
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <title><%=title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app13
  $ vi views/other1.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <title><%=title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app13
  $ vi views/other2.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <title><%=title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app13
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  p {
    font-size: 20px;
    color: Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app13
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  
  router.get('/', function(req, res, next) {
    res.render('index', {
      title: 'Index',
      content: 'Index',
    });
  });
  
  router.get('/other1', function(req, res, next) {
    res.render('other1', {
      title: 'Other1',
      content: 'Other1',
    });
  });
  
  router.get('/other2', function(req, res, next) {
    res.render('other2', {
      title: 'Other2',
      content: 'Other2',
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app13
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app13
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  $ http://localhost:3000/other1
  $ http://localhost:3000/other2
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X14]
  [Express] ルーティング処理を別スクリプトに移動
  
[内容]
  上記「X13」で追加したルーティング処理を別スクリプトに移動

[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app14
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <title><%=title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ vi views/other1.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <title><%=title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ vi views/other2.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <title><%=title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
  <p><%=content %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  p {
    font-size: 20px;
    color: Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  
  router.get('/', function(req, res, next) {
    res.render('index', {
      title: 'Index',
      content: 'Index',
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ vi routes/other1.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var other1 = express.Router();
  
  other1.get('/other1', function(req, res, next) {
    res.render('other1', {
      title: 'Other1',
      content: 'Other1',
    });
  });
  
  module.exports = other1;
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ vi routes/other2.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var other2 = express.Router();
  
  other2.get('/other2', function(req, res, next) {
    res.render('other2', {
      title: 'Other2',
      content: 'Other2',
    });
  });
  
  module.exports = other2;
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var other1Router = require('./routes/other1');
  var other2Router = require('./routes/other2');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  
  app.use('/', indexRouter);
  app.use('/', other1Router);
  app.use('/', other2Router);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app14
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  $ http://localhost:3000/other1
  $ http://localhost:3000/other2
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X15]
  [Express] クエリーパラメータの使用
  
[内容]
  引き渡されたクエリーパラメータを処理内で使用する
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app15
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app15
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app15
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <title><%=title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <p><%=name %></p>
    <p><%=mail %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app15
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  p {
    font-size: 20px;
    color: Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app15
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  
  router.get('/', function(req, res, next) {
    res.render('index', {
      title: 'Index',
      name: req.query.name,
      mail: req.query.mail,
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app15
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app15
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/?name=AAA&mail=BBB
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X16]
  [Express] フォームからデータ送信
  
[内容]
  上記「X07」と同様に、画面「input」のフォームからデータを送信後に別画面「output」に表示する
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app16
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ vi views/input.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <form method="post" action="/output">
    <!-- 各科目の点数を入力 --->
    <label for="score1"><%=subject1 %></label><input type="text" id="score1" name="score1">
    <label for="score2"><%=subject2 %></label><input type="text" id="score2" name="score2">
    <label for="score3"><%=subject3 %></label><input type="text" id="score3" name="score3">
    <label for="score4"><%=subject4 %></label><input type="text" id="score4" name="score4">
    <label for="score5"><%=subject5 %></label><input type="text" id="score5" name="score5">
    <input type="submit" value="Click">
  </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ vi views/output.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <div id="result">
    <!-- 各科目の点数を表示 --->
    <p><%=subject1 %> : <%=score1 %></p>
    <p><%=subject2 %> : <%=score2 %></p>
    <p><%=subject3 %> : <%=score3 %></p>
    <p><%=subject4 %> : <%=score4 %></p>
    <p><%=subject5 %> : <%=score5 %></p>
  </div>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  #result {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  #result p {
    font-size: 20px;
    color: Crimson;
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  
  router.get('/', function(req, res, next) {
    res.render('input', {
      title: '点数入力',
      subject1: '国語',
      subject2: '数学',
      subject3: '英語',
      subject4: '理科',
      subject5: '社会',
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ vi routes/input.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var input = express.Router();
  
  input.get('/input', function(req, res, next) {
    res.render('input', {
      title: '点数入力',
      subject1: '国語',
      subject2: '数学',
      subject3: '英語',
      subject4: '理科',
      subject5: '社会',
    });
  });
  
  module.exports = input;
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ vi routes/output.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var output = express.Router();
  
  output.post('/output', function(req, res, next) {
    res.render('output', {
      title: '点数表示',
      subject1: '国語',
      subject2: '数学',
      subject3: '英語',
      subject4: '理科',
      subject5: '社会',
      score1: req.body['score1'],
      score2: req.body['score2'],
      score3: req.body['score3'],
      score4: req.body['score4'],
      score5: req.body['score5'],
    });
  });
  
  module.exports = output;
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var inputRouter = require('./routes/input');
  var outputRouter = require('./routes/output');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  
  app.use('/', indexRouter);
  app.use('/', inputRouter);
  app.use('/', outputRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app16
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  $ http://localhost:3000/input
  
  コマンドの実行結果
  --------------------------------------------------
  (国語に 55 を入力) => 別画面「output」で同じ数値を確認
  (数学に 65 を入力) => 別画面「output」で同じ数値を確認
  (英語に 75 を入力) => 別画面「output」で同じ数値を確認
  (理科に 85 を入力) => 別画面「output」で同じ数値を確認
  (社会に 95 を入力) => 別画面「output」で同じ数値を確認
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X17]
  [Express] セッション使用でクライアント毎の設定を保存
  
[内容]
  パッケージ「express-session」からセッション使用でクライアント毎の設定を保存
  
  (記述例 app.js) => 記述する場所に注意
    var session = require('express-session');
    ...
    var app = express();
    ...
    var session_option = {
      secret: 'keyboard cat',    // セッションIDのハッシュ値計算時のキー
      resave: false,             // セッションストアに値を強制的に保持しない
      saveUninitialized: false,  // 初期化されていない値を強制的に保持しない
      cookie: { maxAge: 10 * 60 * 1000 },  // クッキーの保管時間を10分に設定
    };
    ...
    app.use(session(session_option));  // セッション機能をロードする
    ...
    app.use('/', indexRouter);
  
  (記述例 index.js)
    router.get('/', (req, res, next) => {
      if (req.session.user !== undefined) {  // セッション情報の存在確認
        res.render('home', {
          title: 'Home',
          user: req.session.user,  // セッション情報「user」をテンプレートに渡す
          mail: req.session.mail,  // セッション情報「mail」をテンプレートに渡す
        });
      } else {
        res.render('input', {
          title: 'Input',
        })
      }
    });
  
  (記述例 input.js)
    output.post('/post', (req, res, next) => {
      req.session.user = req.body['user'];  // セッション情報「user」に書き込み
      req.session.mail = req.body['mail'];  // セッション情報「mail」に書き込み
      res.render('result', {
        title: 'Result',
        message: 'Input is completed.',
      });
    });
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app17
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ npm install express-session (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ vi views/input.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <form method="post" action="/post">
    <label for="user">USER</label><input type="text" id="user" name="user">
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail">
    <input type="submit" value="Click">
  </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ vi views/home.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <div id="home">
    <p>USER : <%=user %></p>
    <p>MAIL : <%=mail %></p>
  </div>
  <a href='http://localhost:3000/'>Return</a>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ vi views/result.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <div id="result">
  <p><%=message %></p>
  </div>
  <a href='http://localhost:3000/'>Return</a>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  #result, #home {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  #result p, #home p {
    font-size: 20px;
    color: Crimson;
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
  }
  
  a {
    display: block;
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
    background-color: Black;
    color: White;
    font-size: 20px;
    text-align: center;
  }
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  
  router.get('/', (req, res, next) => {
    if (req.session.user !== undefined) {
      res.render('home', {
        title: 'Home',
        user: req.session.user,
        mail: req.session.mail,
      });
    } else {
      res.render('input', {
        title: 'Input',
      });
    }
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ vi routes/input.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var input = express.Router();
  
  input.post('/post', (req, res, next) => {
    req.session.user = req.body['user'];
    req.session.mail = req.body['mail'];
    res.render('result', {
      title: 'Result',
      message: 'Input is completed.',
    });
  });
  
  module.exports = input;
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  var session = require('express-session');
  
  var indexRouter = require('./routes/index');
  var inputRouter = require('./routes/input');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  var session_option = {
    secret: 'keyboard cat',
    resave: false,
    saveUninitialized: false,
    cookie: { maxAge: 10 * 60 * 1000 },
  };
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use(session(session_option));
  
  app.use('/', indexRouter);
  app.use('/', inputRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app17
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (セッション情報を登録後に10分経過した後でサイトアクセスした場合は再登録)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X18]
  [Express] 外部サイトの「RSS」からデータ取得
  
[内容]
  外部サイトの「RSS」からニュース一覧を取得する
    =>「RSS」は「XML」データで送信されるのでモジュール「XML2JS」でJSオブジェクトに変換する必要がある
  
  (例) Google のニュースサイト
    RSS  : news.google.com/rss?hl=ja&gl=JP&ceid=JP:ja
    HOST : news.google.com
    PORT : 443 => HTTPS
    PATH : /rss?hl=ja&gl=JP&ceid=JP:ja
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app18
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app18
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app18
  $ npm install xml2js (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app18
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <div id="main">
    <% if (content !== null) { %>
      <ol>
        <% for (let i in content) { %>
          <% let obj = content[i]; %>
          <li><%=obj.title %></li>
        <% } %>
      </ol>
    <% } %>
  </div>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app18
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  #main {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  #main ol li {
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
    list-style-type: decimal-leading-zero;
  }
  --------------------------------------------------
  
  $ cd $HOME/app18
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var https = require('https');
  var parseString = require('xml2js').parseString;

  router.get('/', (req, res, next) => {
    var option = {
      host: 'news.google.com',
      port: 443,
      path: '/rss?hl=ja&gl=JP&ceid=JP:ja'
    };
    https.get(option, (res2) => {
      var body = '';
      res2.on('data', (data) => {
        body += data;
      });
      res2.on('end', () => {
        parseString(body.trim(), (error, result) => {  // XML テキストを XML オブジェクトに変換
          console.log(result);
          var data = {
            title: 'News List',
            content: result.rss.channel[0].item
          };
          res.render('index', data);
        });
      });
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app18
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app18
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (ニュース一覧を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X19]
  [Express] データベース「SQLite」からレコードをまとめて取得
  
[内容]
  パッケージ「sqlite3」を導入してデータベース「SQLite」からレコードをまとめて取得
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app19
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ npm install sqlite3 --save (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (次のパッケージ更新のためにオプション「--save」を使用)

  => 設定ファイル「package.json」にパッケージ「sqlite3」の情報が記録される
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ npm update (パッケージ更新)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンド「npm start」実行時の内部エラー回避策)
  
  => 必要ライブラリが古いバージョンまでしか存在していないことが内部エラーの原因、この処置は的外れ
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ sqlite3 sample.sqlite3 (ローカルDB「sample」を作成ならびに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル作成
  > create table Person (
  >   name text,
  >   mail text
  > );
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('AAA', 'AAA@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('BBB', 'BBB@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('CCC', 'CCC@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  AAA | AAA@google.com
  BBB | BBB@google.com
  CCC | CCC@google.com
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <% for (let i in content) { %>
      <tr>
        <td><%=content[i].name %></td>
        <td><%=content[i].mail %></td>
      </tr>
    <% } %>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  table {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 0px;
    width: 50%;
  }
  
  table tr {
    color: Crimson;
    font-size: 20px;
  }
  
  table tr td {
    padding: 5px;
    text-align: center;
    border: 2px solid Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  router.get('/', (req, res, next) => {
    database.serialize(() => {
      database.all('select * from Person', (err, row) => {  // レコード全てをまとめて取得
        if (!err) {
          var data = {
            title: 'Select',
            content: row,
          };
          res.render('index', data);
        }
      });
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app19
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  Error: /lib64/libstdc++.so.6: version `CXXABI_1.3.8' not found ...
  
  => パッケージ「sqlite3」の要求ライブラリ「CXXABI_1.3.8」がシステムに存在しない
  --------------------------------------------------
    
    $ cd $HOME
    $ strings /lib64/libstdc++.so.6 | grep -E CXXABI
    
    コマンドの実行結果
    --------------------------------------------------
    CXXABI_1.3
    CXXABI_1.3.1
    CXXABI_1.3.2
    CXXABI_1.3.3
    CXXABI_1.3.4
    CXXABI_1.3.5
    CXXABI_1.3.6
    CXXABI_1.3.7 => エラーで言及の「CXXABI_1.3.8」が存在しないので、最新の「GCC」のビルドでライブラリを一新する
    CXXABI_TM_1
    --------------------------------------------------
    
    $ firefox
    $ http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/
    
    コマンドの実行結果
    --------------------------------------------------
    (最新バージョンを「gcc-12.1.0」と判断)
    --------------------------------------------------
    
    $ cd $HOME
    $ wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-12.1.0/gcc-12.1.0.tar.gz
    
    コマンドの実行結果
    --------------------------------------------------
    (本体をダウンロード)
    --------------------------------------------------
    
    $ cd $HOME
    $ wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-12.1.0/sha512.sum
    
    コマンドの実行結果
    --------------------------------------------------
    (チェックサムをダウンロード)
    --------------------------------------------------
    
    $ cd $HOME
    $ sha512sum --check sha512.sum (検証開始)
    
    コマンドの実行結果
    --------------------------------------------------
    gcc-12.1.0.tar.gz: 完了 => その他ファイルが見つからないメッセージが出力されるが問題なし
    --------------------------------------------------
    
    $ cd $HOME
    $ sudo tar -zxf gcc-12.1.0.tar.gz -C /usr/local/src (ファイルの解凍と展開)
    
    コマンドの実行結果
    --------------------------------------------------
    (出力なし) => 5分程かかる
    --------------------------------------------------
    
    $ cd /usr/local/src/gcc-12.1.0
    $ ./contrib/download_prerequisites (スクリプト実行)
    
    コマンドの実行結果
    --------------------------------------------------
    All prerequisites downloaded successfully.
    --------------------------------------------------
    
    $ cd /usr/local/src/gcc-12.1.0
    $ mkdir build (ディレクトリ作成)
    
    コマンドの実行結果
    --------------------------------------------------
    All prerequisites downloaded successfully.
    --------------------------------------------------
    
    $ cd /usr/local/src/gcc-12.1.0/build
    $ ../configure --enable-languages=c,c++ --prefix=/usr/local --disable-bootstrap --disable-multilib (スクリプト実行)
    
    コマンドの実行結果
    --------------------------------------------------
    config.status: creating Makefile
    --------------------------------------------------
    
    $ cd /usr/local/src/gcc-12.1.0/build
    $ make (ビルド実行)
    
    コマンドの実行結果
    --------------------------------------------------
    (省略) => 80分程かかる
    --------------------------------------------------
    
    $ cd /usr/local/src/gcc-12.1.0/build
    $ sudo make install (インストール)
    
    コマンドの実行結果
    --------------------------------------------------
    (省略) => 5分程かかる
    --------------------------------------------------
    
    $ cd /usr/local/src/gcc-12.1.0/build
    $ gcc --version (バージョン確認)
    
    コマンドの実行結果
    --------------------------------------------------
    gcc (GCC) 12.1.0
    --------------------------------------------------
    
    $ cd /usr/local/src/gcc-12.1.0/build
    $ make clean (一時ファイル削除)
    
    コマンドの実行結果
    --------------------------------------------------
    (省略)
    --------------------------------------------------
    
    # cd /etc/ld.so.conf.d => この作業は「root」で行う
    # echo /usr/local/lib64 >> usr_local_lib64.conf (設定ファイル追記)
    
    コマンドの実行結果
    --------------------------------------------------
    (省略)
    --------------------------------------------------
    
    # cd /usr/local/lib64 => この作業は「root」で行う
    # mv libstdc++.so.6.0.30-gdb.py back_libstdc++.so.6.0.30-gdb.py (バックアップ)
    
    コマンドの実行結果
    --------------------------------------------------
    (省略)
    --------------------------------------------------
    
    # cd /usr/local/lib64 => この作業は「root」で行う
    # ldconfig (ライブラリ参照の更新)
    
    コマンドの実行結果
    --------------------------------------------------
    (省略)
    --------------------------------------------------
    
  $ cd $HOME/app19
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (データベース「SQLite」からデータ取得)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X20]
  [Express] データベース「SQLite」からレコードを順番に取得
  
[内容]
  パッケージ「sqlite3」を導入してデータベース「SQLite」からレコードを順番に取得
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app20
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app20
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app20
  $ npm install sqlite3 (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app20
  $ sqlite3 sample.sqlite3 (ローカルDB「sample」を作成ならびに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル作成
  > create table Person (
  >   name text,
  >   mail text
  > );
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('AAA', 'AAA@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('BBB', 'BBB@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('CCC', 'CCC@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  AAA | AAA@google.com
  BBB | BBB@google.com
  CCC | CCC@google.com
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app20
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <%-content %>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app20
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  table {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 0px;
    width: 50%;
  }
  
  table tr {
    color: Crimson;
    font-size: 20px;
  }
  
  table tr td {
    padding: 5px;
    text-align: center;
    border: 2px solid Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app20
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  router.get('/', (req, res, next) => {
    database.serialize(() => {
      var body = '';
      database.each('select * from Person',  // レコードを順番に取得
        (err, row) => {
          if (!err) {
            body += '<tr><td>' + row.name + '</td><td>' + row.mail + '</td></tr>';
          }
        }, 
        (err, cnt) => {  // 引数「cnt」には取得したレコード数が渡される
          if (!err) {
            var data = {
              title: 'Select',
              content: body,
            };
            res.render('index', data);
          }
        }
      );
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app20
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app20
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (データベース「SQLite」からデータ取得)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X21]
  [Express] データベース「SQLite」にレコードを新規作成
  
[内容]
  上記「X20」のソースを基にデータベース「SQLite」にレコードを新規作成する処理を追加
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app21
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ npm install sqlite3 (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ sqlite3 sample.sqlite3 (ローカルDB「sample」を作成ならびに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル作成
  > create table Person (
  >   name text,
  >   mail text
  > );
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('AAA', 'AAA@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('BBB', 'BBB@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('CCC', 'CCC@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  AAA | AAA@google.com
  BBB | BBB@google.com
  CCC | CCC@google.com
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <%-content %>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ vi views/input.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <form method="post" action="/input">
    <label for="name">NAME</label><input type="text" id="name" name="name">
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail">
    <input type="submit" value="Click">
  </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 0px;
    width: 50%;
  }
  
  table tr {
    color: Crimson;
    font-size: 20px;
  }
  
  table tr td {
    padding: 5px;
    text-align: center;
    border: 2px solid Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  router.get('/', (req, res, next) => {
    database.serialize(() => {
      var body = '';
      database.each('select * from Person',  // レコードを順番に取得
        (err, row) => {
          if (!err) {
            body += '<tr><td>' + row.name + '</td><td>' + row.mail + '</td></tr>';
          }
        }, 
        (err, cnt) => {  // 引数「cnt」には取得したレコード数が渡される
          if (!err) {
            var data = {
              title: 'Select',
              content: body,
            };
            res.render('index', data);
          }
        }
      );
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ vi routes/input.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var input = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  input.get('/input', (req, res, next) => {
    var data = {
      title: 'Input',
    };
    res.render('input', data);
  });
  
  input.post('/input', (req, res, next) => {
    var name = req.body.name;
    var mail = req.body.mail;
    database.serialize(() => {
      database.run('insert into Person values (?, ?)', name, mail);
    });
    res.redirect('/');
  });
  
  module.exports = input;
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var inputRouter = require('./routes/input');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', inputRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app21
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (データベース「SQLite」からデータ取得)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/input
  
  コマンドの実行結果
  --------------------------------------------------
  (USER に「DDD」、MAILに「DDD@google.com」)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X22]
  [Express] データベース「SQLite」から特定のレコードのみを取得
  
[内容]
  データベース「SQLite」から特定のレコードのみを取得する

[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app22
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ npm install sqlite3 (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ sqlite3 sample.sqlite3 (ローカルDB「sample」を作成ならびに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル作成
  > create table Person (
  >   name text,
  >   mail text
  > );
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('AAA', 'AAA@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('BBB', 'BBB@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('CCC', 'CCC@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  AAA | AAA@google.com
  BBB | BBB@google.com
  CCC | CCC@google.com
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <tr><td><%=content.name %></td><td><%=content.mail %></td></tr>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ vi views/input.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <form method="post" action="/input">
    <label for="name">NAME</label><input type="text" id="name" name="name">
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail">
    <input type="submit" value="Click">
  </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 0px;
    width: 50%;
  }
  
  table tr {
    color: Crimson;
    font-size: 20px;
  }
  
  table tr td {
    padding: 5px;
    text-align: center;
    border: 2px solid Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ vi routes/input.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var input = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  input.get('/input', (req, res, next) => {
    var data = {
      title: 'Input',
    };
    res.render('input', data);
  });
  
  input.post('/input', (req, res, next) => {
    var name = req.body.name;
    var mail = req.body.mail;
    database.serialize(() => {
      database.get('select * from Person where name = ? and mail = ?', [ name, mail ], (err, row) => {
        if (!err) {
          var data = {
            title: 'Result',
            content: row,
          }
          res.render('index', data);
        }
      });
    });
  });
  
  module.exports = input;
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var inputRouter = require('./routes/input');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', inputRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app22
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/input
  
  コマンドの実行結果
  --------------------------------------------------
  (USER に「AAA」、MAILに「AAA@google.com」)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/input
  
  コマンドの実行結果
  --------------------------------------------------
  (データベース「SQLite」から該当データ取得)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X23]
  [Express] データベース「SQLite」のレコードを更新
  
[内容]
  上記「X20」のソースを基にデータベース「SQLite」のレコードを更新する処理を追加
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app23
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ npm install sqlite3 (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ sqlite3 sample.sqlite3 (ローカルDB「sample」を作成ならびに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル作成
  > create table Person (
  >   name text,
  >   mail text
  > );
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('AAA', 'AAA@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('BBB', 'BBB@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('CCC', 'CCC@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  AAA | AAA@google.com
  BBB | BBB@google.com
  CCC | CCC@google.com
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <%-content %>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ vi views/input.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <form method="post" action="/input">
    <label for="name">NAME</label><input type="text" id="name" name="name" value="<%=content.name %>" readonly>
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail" value="<%=content.mail %>">
    <input type="submit" value="Click">
  </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 0px;
    width: 50%;
  }
  
  table tr {
    color: Crimson;
    font-size: 20px;
  }
  
  table tr td {
    padding: 5px;
    text-align: center;
    border: 2px solid Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  router.get('/', (req, res, next) => {
    database.serialize(() => {
      var body = '';
      database.each('select * from Person',  // レコードを順番に取得
        (err, row) => {
          if (!err) {
            body += '<tr><td>' + row.name + '</td><td>' + row.mail + '</td></tr>';
          }
        }, 
        (err, cnt) => {  // 引数「cnt」には取得したレコード数が渡される
          if (!err) {
            var data = {
              title: 'Select',
              content: body,
            };
            res.render('index', data);
          }
        }
      );
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ vi routes/input.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var input = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  input.get('/input', (req, res, next) => {
    var obj = {
      name: req.query.name,
      mail: req.query.mail,
    }
    var data = {
      title: 'Input',
      content: obj,
    };
    res.render('input', data);
  });
  
  input.post('/input', (req, res, next) => {
    var name = req.body.name;
    var mail = req.body.mail;
    database.serialize(() => {
      database.run('update Person set mail = ? where name = ?', mail, name);
    });
    res.redirect('/');
  });
  
  module.exports = input;
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var inputRouter = require('./routes/input');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', inputRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app23
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (データベース「SQLite」からデータ取得)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/input/?name=AAA&mail=AAA@google.com
  
  コマンドの実行結果
  --------------------------------------------------
  (MAILを「AAA@yahoo.co.jp」に更新)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X24]
  [Express] データベース「SQLite」のレコードを削除
  
[内容]
  上記「X20」のソースを基にデータベース「SQLite」のレコードを削除する処理を追加
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app24
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ npm install sqlite3 (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ sqlite3 sample.sqlite3 (ローカルDB「sample」を作成ならびに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル作成
  > create table Person (
  >   name text,
  >   mail text
  > );
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('AAA', 'AAA@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('BBB', 'BBB@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('CCC', 'CCC@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  AAA | AAA@google.com
  BBB | BBB@google.com
  CCC | CCC@google.com
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <%-content %>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ vi views/input.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <form method="post" action="/input">
    <label for="name">NAME</label><input type="text" id="name" name="name" value="<%=content.name %>" readonly>
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail" value="<%=content.mail %>" readonly>
    <input type="submit" value="Click">
  </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 0px;
    width: 50%;
  }
  
  table tr {
    color: Crimson;
    font-size: 20px;
  }
  
  table tr td {
    padding: 5px;
    text-align: center;
    border: 2px solid Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  router.get('/', (req, res, next) => {
    database.serialize(() => {
      var body = '';
      database.each('select * from Person',  // レコードを順番に取得
        (err, row) => {
          if (!err) {
            body += '<tr><td>' + row.name + '</td><td>' + row.mail + '</td></tr>';
          }
        }, 
        (err, cnt) => {  // 引数「cnt」には取得したレコード数が渡される
          if (!err) {
            var data = {
              title: 'Select',
              content: body,
            };
            res.render('index', data);
          }
        }
      );
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ vi routes/input.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var input = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  input.get('/input', (req, res, next) => {
    var obj = {
      name: req.query.name,
      mail: req.query.mail,
    }
    var data = {
      title: 'Input',
      content: obj,
    };
    res.render('input', data);
  });
  
  input.post('/input', (req, res, next) => {
    var name = req.body.name;
    var mail = req.body.mail;
    database.serialize(() => {
      database.run('delete from Person where name = ? and mail = ?', name, mail);
    });
    res.redirect('/');
  });
  
  module.exports = input;
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var inputRouter = require('./routes/input');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', inputRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app24
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (データベース「SQLite」からデータ取得)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/input/?name=AAA&mail=AAA@google.com
  
  コマンドの実行結果
  --------------------------------------------------
  (ボタン押下でレコードを削除)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X25]
  [Express] バリデーターで入力チェック
  
[内容]
  上記「X21」のソースを基にパッケージ「express-validator」を導入して入力チェックを行う処理を追加
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app25
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ npm install sqlite3 express-validator (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ sqlite3 sample.sqlite3 (ローカルDB「sample」を作成ならびに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル作成
  > create table Person (
  >   name text,
  >   mail text
  > );
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('AAA', 'AAA@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('BBB', 'BBB@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values ('CCC', 'CCC@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  AAA | AAA@google.com
  BBB | BBB@google.com
  CCC | CCC@google.com
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <%-content %>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ vi views/input.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 入力チェックのエラー表示用 --->
  <div><%-result %></div>
  
  <form method="post" action="/input">
    <label for="name">NAME</label><input type="text" id="name" name="name" value="<%=content.name %>">
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail" value="<%=content.mail %>">
    <input type="submit" value="Click">
  </form>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 0px;
    width: 50%;
  }
  
  table tr {
    color: Crimson;
    font-size: 20px;
  }
  
  table tr td {
    padding: 5px;
    text-align: center;
    border: 2px solid Crimson;
  }

  ul {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
    list-style-type: none;
  }
  
  ul li {
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var sqlite3 = require('sqlite3');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  router.get('/', (req, res, next) => {
    database.serialize(() => {
      var body = '';
      database.each('select * from Person',  // レコードを順番に取得
        (err, row) => {
          if (!err) {
            body += '<tr><td>' + row.name + '</td><td>' + row.mail + '</td></tr>';
          }
        }, 
        (err, cnt) => {  // 引数「cnt」には取得したレコード数が渡される
          if (!err) {
            var data = {
              title: 'Select',
              content: body,
            };
            res.render('index', data);
          }
        }
      );
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ vi routes/input.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var input = express.Router();
  var sqlite3 = require('sqlite3');
  var { check, validationResult } = require('express-validator');
  
  var database = new sqlite3.Database('sample.sqlite3');
  
  input.get('/input', (req, res, next) => {
    var data = {
      title: 'Input',
      result: '',
      content: { name: '', mail: '' },
    };
    res.render('input', data);
  });
  
  input.post('/input', [
    check('name', 'NAME は入力必須').notEmpty(),
    check('mail', 'MAIL は入力必須').notEmpty(),
    check('mail', 'MAIL はメールアドレス入力').isEmail(),
    // check('age', 'AGE は入力必須').notEmpty(),
    // check('age', 'AGE は数値入力').isInt(),
    // check('age', 'AGE の入力範囲').custom((val) => { return val >= 0 & val <= 120 }),
  ], 
  (req, res, next) => {
    var error = validationResult(req);
    if (!error.isEmpty()) {
      var body = '<ul>';
      var arr = error.array();
      for (let i in arr) body += '<li>' + arr[i].msg + '</li>';
      body += '</ul>';
      var data = {
        title: 'Input',
        result: body,
        content: { name: req.body.name, mail: req.body.mail },
      };
      res.render('input', data);
    } else {
      var name = req.body.name;
      var mail = req.body.mail;
      database.serialize(() => {
        database.run('insert into Person values (?, ?)', name, mail);
      });
      res.redirect('/');
    }
  });
  
  module.exports = input;
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var inputRouter = require('./routes/input');
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', inputRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app25
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (データベース「SQLite」からデータ取得)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/input
  
  コマンドの実行結果
  --------------------------------------------------
  (未入力でボタン押下時にエラーメッセージ出力)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X26]
  [Express] パッケージ「sequelize」を導入して「ORM」を実現する
  
[内容]
  パッケージ「sequelize」を導入して「ORM(オブジェクトとデータベースのマッピング)」を実現する
    データベースは「SQLite」でテーブル名は従来の「Person」、項目も「user」と「mail」のみで作成する
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app26
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npm install sqlite3 sequelize sequelize-cli (追加インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npx sequelize-cli init (初期化)
  
  コマンドの実行結果
  --------------------------------------------------
  Created "config/config.json"
  Successfully created models folder at "/home/makoto/app26/models".
  Successfully created migrations folder at "/home/makoto/app26/migrations".
  Successfully created seeders folder at "/home/makoto/app26/seeders".
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi config/config.json (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "development": {                // 開発環境(単体テスト環境)
      "database": "db-dev",         // データベース名
      "dialect": "sqlite",          // データベースの種類
      "storage": "db-dev.sqlite3"   // ファイル名
    },
    "test": {                       // テスト環境(結合テスト環境)
      "database": "db-test",        // データベース名
      "dialect": "sqlite",          // データベースの種類
      "storage": "db-test.sqlite3"  // ファイル名
    },
    "production": {                 // 本番環境(リリース環境)
      "database": "db-live",        // データベース名
      "dialect": "sqlite",          // データベースの種類
      "storage": "db-live.sqlite3"  // ファイル名
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npx sequelize-cli model:generate --name Person --attributes name:string,mail:string (モデル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  New model was created at /home/makoto/app26/models/person.js .
  New migration was created at /home/makoto/app26/migrations/20220715043545-create-person.js .
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npx sequelize-cli db:migrate --env development (マイグレーション)
  
  コマンドの実行結果
  --------------------------------------------------
  Loaded configuration file "config/config.json".
  Using environment "development".
  == 20220715043545-create-person: migrating =======
  == 20220715043545-create-person: migrated (0.239s)
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ ls -l *.sqlite3 (データベースファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-r--r--. 1 makoto makoto 20480  7月 15 13:36 db-dev.sqlite3
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ sqlite3 db-dev.sqlite3 (ローカルDB「db-dev」に接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル一覧
  > .tables
  
  コマンドの実行結果
  --------------------------------------------------
  People
  SequelizeMeta
  --------------------------------------------------
  
  > テーブル確認
  > .schema People
  
  コマンドの実行結果
  --------------------------------------------------
  CREATE TABLE `People` ( // テーブル名が「Person」ではなく「People」なのは不具合？
    `id` INTEGER PRIMARY KEY AUTOINCREMENT,
    `name` VARCHAR(255),
    `mail` VARCHAR(255),
    `createdAt` DATETIME NOT NULL,
    `updatedAt` DATETIME NOT NULL
  );
  --------------------------------------------------
  
  > レコード一覧
  > select * from People;
  
  コマンドの実行結果
  --------------------------------------------------
  (レコード無し)
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npx sequelize-cli seed:generate --name create-person (シーディングのスクリプト作成)
  
  コマンドの実行結果
  --------------------------------------------------
  seeders folder at "/home/makoto/app26/seeders" already exists.
  New seed was created at /home/makoto/app26/seeders/20220715044448-create-person.js .
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi seeders/20220715044448-create-person.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  'use strict';
  
  module.exports = {
    async up (queryInterface, Sequelize) {
      await queryInterface.bulkInsert('People', [  // テーブル名を「Person」ではなく「People」に合わせた
        {
          name: 'AAA',
          mail: 'AAA@google.com',
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          name: 'BBB',
          mail: 'BBB@google.com',
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          name: 'CCC',
          mail: 'CCC@google.com',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ], {});
    },
  
    async down (queryInterface, Sequelize) {
      // await queryInterface.bulkDelete('People', null, {});
    }
  };
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npx sequelize-cli db:seed:all (シーディング実行)
  
  コマンドの実行結果
  --------------------------------------------------
  Loaded configuration file "config/config.json".
  Using environment "development".
  == 20220715044448-create-person: migrating =======
  == 20220715044448-create-person: migrated (0.434s)
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ sqlite3 db-dev.sqlite3 (ローカルDB「db-dev」に接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル一覧
  > .tables
  
  コマンドの実行結果
  --------------------------------------------------
  People
  SequelizeMeta
  --------------------------------------------------
  
  > テーブル確認
  > .schema People
  
  コマンドの実行結果
  --------------------------------------------------
  CREATE TABLE `People` ( // テーブル名が「Person」ではなく「People」なのは不具合？
    `id` INTEGER PRIMARY KEY AUTOINCREMENT,
    `name` VARCHAR(255),
    `mail` VARCHAR(255),
    `createdAt` DATETIME NOT NULL,
    `updatedAt` DATETIME NOT NULL
  );
  --------------------------------------------------
  
  > レコード一覧
  > select * from People;
  
  コマンドの実行結果
  --------------------------------------------------
  1 | AAA | AAA@google.com | 2022-07-15 04:50:11.518 +00:00 | 2022-07-15 04:50:11.518 +00:00
  2 | BBB | BBB@google.com | 2022-07-15 04:50:11.518 +00:00 | 2022-07-15 04:50:11.518 +00:00
  3 | CCC | CCC@google.com | 2022-07-15 04:50:11.518 +00:00 | 2022-07-15 04:50:11.518 +00:00
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi views/index.ejs (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  <table>
    <% for (let i in content) { %>
      <tr><td><%=content[i].id %><td><%=content[i].name %></td><td><%=content[i].mail %></td></tr>
    <% } %>
  </table>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Crimson;
    font-size: 20px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px 15px 15px 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px 10px 10px 10px;
    margin: 10px 10px 10px 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 0px;
    width: 50%;
  }
  
  table tr {
    color: Crimson;
    font-size: 20px;
  }
  
  table tr td {
    padding: 5px;
    text-align: center;
    border: 2px solid Crimson;
  }
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi routes/index.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var database = require('../models/index');
  
  router.get('/', (req, res, next) => {
    database.Person.findAll().then((val) => {
      var data = {
        title: 'Select',
        content: val,
      }
      res.render('index', data);
    });
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  Executing (default): 
  SELECT `id`, `name`, `mail`, `createdAt`, `updatedAt` FROM `People` AS `Person`;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi views/name.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 指定された「ID」のレコードのみ表示 --->
  <form method="post" action="/name">
    <label for="id">ID</label><input type="text" id="id" name="id">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi routes/name.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var name = express.Router();
  var database = require('../models/index');
  
  name.get('/name', (req, res, next) => {
    var data = {
      title: 'Name',
    }
    res.render('name', data);
  });
  
  name.post('/name', (req, res, next) => {
    database.Person.findAll({ where: { id: req.body.id } }).then((val) => {
      var data = {
        title: 'Select',
        content: val,
      }
      res.render('index', data);
    });
  });
  
  module.exports = name;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var nameRouter = require('./routes/name');  // 追加
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', nameRouter);  // 追加
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/name => 画面上の「ID」に「1」と入力してボタン押下
  
  コマンドの実行結果
  --------------------------------------------------
  Executing (default): 
  SELECT `id`, `name`, `mail`, `createdAt`, `updatedAt` FROM `People` AS `Person` WHERE `Person`.`id` = '1';
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi views/operator.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 指定された「ID」以下のレコードのみ表示 --->
  <form method="post" action="/operator">
    <label for="name">ID</label><input type="text" id="id" name="id">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi routes/operator.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var operator = express.Router();
  var database = require('../models/index');
  var { Op } = require('sequelize');
  
  operator.get('/operator', (req, res, next) => {
    var data = {
      title: 'Operator',
    }
    res.render('operator', data);
  });
  
  operator.post('/operator', (req, res, next) => {
    database.Person.findAll({ where: { id: { [Op.lte]: req.body.id } } }).then((val) => {
      var data = {
        title: 'Select',
        content: val,
      }
      res.render('index', data);
    });
  });
  
  module.exports = operator;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var nameRouter = require('./routes/name');
  var operatorRouter = require('./routes/operator');  // 追加
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', nameRouter);
  app.use('/', operatorRouter);  // 追加
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/operator => 画面上の「ID」に「2」と入力してボタン押下
  
  コマンドの実行結果
  --------------------------------------------------
  Executing (default): 
  SELECT `id`, `name`, `mail`, `createdAt`, `updatedAt` FROM `People` AS `Person` WHERE `Person`.`id` <= '2';
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi views/like.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 指定された「NAME」を含むレコードのみ表示 --->
  <form method="post" action="/like">
    <label for="name">NAME</label><input type="text" id="name" name="name">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi routes/like.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var like = express.Router();
  var database = require('../models/index');
  var { Op } = require('sequelize');
  
  like.get('/like', (req, res, next) => {
    var data = {
      title: 'Like',
    }
    res.render('like', data);
  });
  
  like.post('/like', (req, res, next) => {
    database.Person.findAll({ where: { name: { [Op.like]: '%' + req.body.name + '%' } } }).then((val) => {
      var data = {
        title: 'Select',
        content: val,
      }
      res.render('index', data);
    });
  });
  
  module.exports = like;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var nameRouter = require('./routes/name');
  var operatorRouter = require('./routes/operator');
  var likeRouter = require('./routes/like');  // 追加
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', nameRouter);
  app.use('/', operatorRouter);
  app.use('/', likeRouter);  // 追加
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/like => 画面上の「NAME」に「A」と入力してボタン押下
  
  コマンドの実行結果
  --------------------------------------------------
  Executing (default): 
  SELECT `id`, `name`, `mail`, `createdAt`, `updatedAt` FROM `People` AS `Person` WHERE `Person`.`name` LIKE '%A%';
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi views/cond.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 指定された「ID」と「NAME」が共に一致するレコードのみ表示 --->
  <form method="post" action="/cond">
    <label for="id">ID</label><input type="text" id="id" name="id">
    <label for="name">NAME</label><input type="text" id="name" name="name">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi routes/cond.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var cond = express.Router();
  var database = require('../models/index');
  var { Op } = require('sequelize');
  
  cond.get('/cond', (req, res, next) => {
    var data = {
      title: 'Cond',
    }
    res.render('cond', data);
  });
  
  cond.post('/cond', (req, res, next) => {
    database.Person.findAll({ where: {
      [Op.and] : [
        { id: { [Op.eq] : req.body.id } },
        { name: { [Op.eq] : req.body.name } },
      ]
    } }).then((val) => {
      var data = {
        title: 'Select',
        content: val,
      }
      res.render('index', data);
    });
  });
  
  module.exports = cond;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var nameRouter = require('./routes/name');
  var operatorRouter = require('./routes/operator');
  var likeRouter = require('./routes/like');
  var condRouter = require('./routes/cond');  // 追加
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', nameRouter);
  app.use('/', operatorRouter);
  app.use('/', likeRouter);
  app.use('/', condRouter);  // 追加
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/cond => 画面上の「ID」に「1」、「NAME」に「AAA」と入力してボタン押下
  
  コマンドの実行結果
  --------------------------------------------------
  Executing (default): 
  SELECT `id`, `name`, `mail`, `createdAt`, `updatedAt` FROM `People` AS `Person`
  WHERE (`Person`.`id` = '1' AND `Person`.`name` = 'AAA');
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi views/add.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 指定した「NAME」と「MAIL」のレコードを登録 --->
  <form method="post" action="/add">
    <label for="name">NAME</label><input type="text" id="name" name="name">
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi routes/add.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var add = express.Router();
  var database = require('../models/index');
  
  add.get('/add', (req, res, next) => {
    var data = {
      title: 'Add',
    }
    res.render('add', data);
  });
  
  add.post('/add', (req, res, next) => {
    database.sequelize.sync()
      .then(() => {
        database.Person.create({
          name: req.body.name,
          mail: req.body.mail,
        });
      })
      .then(() => {
        res.redirect('/');
      });
  });
  
  module.exports = add;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ vi app.js (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  
  var indexRouter = require('./routes/index');
  var nameRouter = require('./routes/name');
  var operatorRouter = require('./routes/operator');
  var likeRouter = require('./routes/like');
  var condRouter = require('./routes/cond');
  var addRouter = require('./routes/add');  // 追加
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  app.use('/', nameRouter);
  app.use('/', operatorRouter);
  app.use('/', likeRouter);
  app.use('/', condRouter);
  app.use('/', addRouter); // 追加
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app26
  $ npm start
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/add => 画面上の「NAME」に「DDD」、「MAIL」に「DDD@google.com」と入力してボタン押下
  
  コマンドの実行結果
  --------------------------------------------------
  Executing (default): 
  INSERT INTO `People` (`id`,`name`,`mail`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[XXX]
  [Node] //
  
[内容]
  同上
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi app.js
  
  コマンドの実行結果
  --------------------------------------------------
  //
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node app.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (Hello World を確認)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[001]
  Meet the Node console
  
[内容]
  コンソール出力
    アプリケーション起動のメッセージをコンソール出力
    
[確認]
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[002]
  Start a Working Express Server
  
[内容]
  HTTPリクエスト毎に対応メソッドで処理
    リクエスト「GET」と「POST」毎に処理を記述
  
[確認]
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  app.get('/', function(req, res) {
    res.send('GET');
  });
  
  app.post('/', function(req, res) {
    res.send('POST')
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl (-X GET) http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  GET
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl -X POST http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  POST
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[003]
  Serve an HTML File
  
[内容]
  HTMLファイルの提供
    メソッド「sendFile」を使用する
  
[確認]
  $ cd $HOME/app01
  $ vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  <title>SAMPLE</title>
  </head>
  <body>
  <p>Hello World</p>
  <p>Hello World</p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  app.get('/', function(req, res) {
    res.sendFile(__dirname + '/sample.html')
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl (-X GET) http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  <title>SAMPLE</title>
  </head>
  <body>
  <p>Hello World</p>
  <p>Hello World</p>
  </body>
  </html>
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[004]
  Serve Static Assets
  
[内容]
  静的ファイル(画像・CSS等)の提供
    メソッド「static」を使用
  
[確認]
  $ cd $HOME/app01
  $ mkdir -p public/css
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi public/css/style.css
  
  コマンドの実行結果
  --------------------------------------------------
  p {
    color: Crimson;
    font-size: 25px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  
  <!-- CSS --->
  <link rel='stylesheet' href='css/style.css'>
  
  <title>SAMPLE</title>
  </head>
  <body>
  <p>Hello World</p>
  <p>Hello World</p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  app.get('/', function(req, res) {
    res.sendFile(__dirname + '/sample.html');
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (CSSが反映されていない)
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  // CSS => public/css/style.css
  app.use(express.static('public'));
  
  app.get('/', function(req, res) {
    res.sendFile(__dirname + '/sample.html');
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (CSSが反映された)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[005]
  Serve JSON on a Specific Route
  
[内容]
  JSONオブジェクトを返す
    res.json({ "key1": "AAA" })
  
[確認]
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  app.get('/', function(req, res) {
    res.json({
      "key1": "AAA",
      "key2": "BBB",
      "key3": "CCC"
    });
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl (-X GET) http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  {"key1":"AAA","key2":"BBB","key3":"CCC"}
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[006]
  Use the .env File
  
[内容]
  隠しファイル「.env」に環境変数「UPPER_STYLE=設定値」を追加
    アプリ側から環境変数を「process.env.UPPER_STYLE」で参照
  
[確認]
  $ cd $HOME/app01
  $ npm install dotenv --save (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ npm list (パッケージ一覧)
  
  コマンドの実行結果
  --------------------------------------------------
  app01@1.0.1 /home/makoto/app01
    dotenv@16.0.1
    express@4.18.1
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi .env
  
  コマンドの実行結果
  --------------------------------------------------
  UPPER_STYLE=UPPER
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  let dotenv = require('dotenv');
  dotenv.config();
  
  app.get('/', function(req, res) {
    if (process.env.UPPER_STYLE === 'UPPER') {
      res.json({
        "key1": "AAA",
        "key2": "BBB",
        "key3": "CCC"
      });
    } else {
      res.json({
        "key1": "aaa",
        "key2": "bbb",
        "key3": "ccc"
      });
    }
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl (-X GET) http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  {"key1":"AAA","key2":"BBB","key3":"CCC"}
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[007]
  Implement a Root-Level Request Logger Middleware
  
[内容]
  ミドルウェア関数
    下記の引数を持つ
      リクエスト(req)
      レスポンス(res)
      次アクセス(next)
  
[確認]
  $ cd $HOME/app01
  $ vi main.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  const Func1 = (req, res, next) => {
    req.key1 = req.protocol;
    console.log('Func1');
    next();
  }
  
  const Func2 = (req, res, next) => {
    req.key2 = req.method;
    console.log('Func2');
    next();
  }
  
  const Func3 = (req, res, next) => {
    req.key3 = req.path;
    console.log('Func3');
    next();
  }
  
  const Func4 = (req, res, next) => {
    req.key4 = req.hostname;
    console.log('Func4');
    next();
  }
  
  const Func5 = (req, res, next) => {
    req.key5 = req.ip;
    console.log('Func5');
    next();
  }
  
  app.use(Func1);
  app.use(Func2);
  app.use(Func3);
  app.use(Func4);
  app.use(Func5);
  
  app.get('/', function(req, res) {
    res.json({
      "key1": req.key1,
      "key2": req.key2,
      "key3": req.key3,
      "key4": req.key4,
      "key5": req.key5
    });
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  Func1  // ミドルウェア関数が自動的に実行
  Func2  // ミドルウェア関数が自動的に実行
  Func3  // ミドルウェア関数が自動的に実行
  Func4  // ミドルウェア関数が自動的に実行
  Func5  // ミドルウェア関数が自動的に実行
  --------------------------------------------------
  
  $ cd $HOME/app01 <- 別の端末から実行
  $ curl (-X GET) http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  {"key1":"http","key2":"GET","key3":"/","key4":"localhost","key5":"::1"}
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[008]
  Chain Middleware to Create a Time Server
  
[内容]
  ミドルウェア関数をチェーン構成で統合
  
[確認]
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  app.get('/', function(req, res, next) {
    req.key1 = req.protocol;
    console.log('Func1');
    next();
  }, function(req, res, next) {
    req.key2 = req.method;
    console.log('Func2');
    next();
  }, function(req, res, next) {
    req.key3 = req.path;
    console.log('Func3');
    next();
  }, function(req, res, next) {
    req.key4 = req.hostname;
    console.log('Func4');
    next();
  }, function(req, res, next) {
    req.key5 = req.ip;
    console.log('Func5');
    next();
  }, function(req, res, next) {
    res.json({
      "key1": req.key1,
      "key2": req.key2,
      "key3": req.key3,
      "key4": req.key4,
      "key5": req.key5
    });
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  Func1  // ミドルウェア関数が自動的に実行
  Func2  // ミドルウェア関数が自動的に実行
  Func3  // ミドルウェア関数が自動的に実行
  Func4  // ミドルウェア関数が自動的に実行
  Func5  // ミドルウェア関数が自動的に実行
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl (-X GET) http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  {"key1":"http","key2":"GET","key3":"/","key4":"localhost","key5":"::1"}
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[009]
  Get Route Parameter Input from the Client
  
[内容]
  ルートパラメータ
    パラメータ名とパラメータ値を「/」で区切ってURL中に指定
  
  (例)
    http://example.com/user/AAAA/pass/BBBB => user: AAAA, pass: BBBB
  
[確認]
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  app.get('/user/:user/pass/:pass', function(req, res) {
    res.json({
      user: req.params.user,
      pass: req.params.pass
    });
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl (-X GET) http://localhost:3000/user/AAAA/pass/BBBB
  
  コマンドの実行結果
  --------------------------------------------------
  { "user":"AAAA", "pass":"BBBB" }
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[010]
  Get Query Parameter Input from the Client
  
[内容]
  クエリパラメータ
    クエリー文字列の始まりに「?」を付ける
    クエリー文字列は一個以上のパラメータ名とパラメータ値のペアから構成される
    パラメータ名とパラメータ値は「=」で組にまとめる
    複数ペアの場合は「&」で区切る
  
  (例)
    http://example.com/?user=AAAA&pass=BBBB => user: AAAA, pass: BBBB
  
[確認]
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let app = express();
  
  app.get('/', function(req, res) {
    res.json({
      user: req.query.user,
      pass: req.query.pass
    });
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl (-X GET) http://localhost:3000/?user=AAAA\&pass=BBBB
  
  コマンドの実行結果
  --------------------------------------------------
  { "user":"AAAA", "pass":"BBBB" } => 文字「&」の前にエスケープ「\」を忘れないこと
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[011]
  Use body-parser to Parse POST Requests
  
[内容]
  リクエスト「POST」で送付されるデータ解析
    モジュール「body-parser」を使用
  
[確認]
  $ cd $HOME/app01
  $ npm install body-parser --save (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ npm list (パッケージ一覧)
  
  コマンドの実行結果
  --------------------------------------------------
  app01@1.0.1 /home/makoto/app01
    body-parser@1.20.0
    dotenv@16.0.1
    express@4.18.1
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let parser = require('body-parser');
  let app = express();
  
  // エンコード方式
  app.use(parser.urlencoded({ extended: false }));
  
  app.post('/', function(req, res) {
    res.json({
      user: req.body.user,
      pass: req.body.pass
    });
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ cd $HOME/app01 <= 別の端末から実行
  $ curl -X POST -d 'user=AAAA&pass=BBBB' http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  { "user":"AAAA", "pass":"BBBB" }
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[012]
  Get Data from POST Requests
  
[内容]
  フォーム送信リクエスト「POST」のデータ解析
    モジュール「body-parser」を使用
  
[確認]
  $ cd $HOME/app01
  $ vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  <title>SAMPLE</title>
  </head>
  <body>

  <!-- FORM --->
  <form action='/' method='POST'>
    <input type='text' name='user'>
    <input type='text' name='pass'>
    <button type='submit'>Submit</button>
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ vi index.js
  
  コマンドの実行結果
  --------------------------------------------------
  let express = require('express');
  let parser = require('body-parser');
  let app = express();
  
  // エンコード方式
  app.use(parser.urlencoded({ extended: false }));
  
  app.get('/', function(req, res) {
    res.sendFile(__dirname + '/sample.html');
  });
  
  app.post('/', function(req, res) {
    res.json({
      user: req.body.user,
      pass: req.body.pass
    });
  });
  
  app.listen(3000, function() {
    console.log('APP started on port 3000');
  });
  --------------------------------------------------
  
  $ cd $HOME/app01
  $ node index.js
  
  コマンドの実行結果
  --------------------------------------------------
  APP started on port 3000
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  { "user":"AAAA", "pass":"BBBB" }
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[Y01]
  [Express] ジェネレーターでアプリケーション生成
  
[内容]
  同上 => これ以降はジェネレーターの生成コードを改造していく形で記述
  
[確認]
  $ cd $HOME
  $ sudo npm install express-generator --global --save (グローバルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs app02 (アプリケーション生成) => テンプレートエンジン「EJS」を使用
  
  コマンドの実行結果
  --------------------------------------------------
  create : app02/
  create : app02/public/
  create : app02/public/javascripts/
  create : app02/public/images/
  create : app02/public/stylesheets/
  create : app02/public/stylesheets/style.css
  create : app02/routes/
  create : app02/routes/index.js
  create : app02/routes/users.js
  create : app02/views/
  create : app02/views/error.ejs
  create : app02/views/index.ejs
  create : app02/app.js
  create : app02/package.json
  create : app02/bin/
  create : app02/bin/www
  
  change directory:
    $ cd app02

  install dependencies:
    $ npm install
  
  run the app:
    $ DEBUG=app02:* npm start
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ npm install (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ npm list (パッケージ一覧)
  
  コマンドの実行結果
  --------------------------------------------------
  app02@0.0.0 /home/makoto/app02
    cookie-parser@1.4.6
    debug@2.6.9
    ejs@2.6.2
    express@4.16.4
    http-errors@1.6.3
    morgan@1.9.1
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ DEBUG=app02:* npm start (アプリケーション実行) => アプリ「app02」の全ての内部ログ出力を指定
  
  コマンドの実行結果
  --------------------------------------------------
  > app02@0.0.0 start
  > node ./bin/www
  
  app02:server Listening on port 3000 +0ms
  ...
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/ (ブラウザから確認)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[Y02]
  [Express] テンプレートエンジン「EJS」を使用
  
[内容]
  同上
  
[確認]
  $ cd $HOME/app02
  $ npm list (パッケージ一覧)
  
  コマンドの実行結果
  --------------------------------------------------
  app02@0.0.0 /home/makoto/app02
    cookie-parser@1.4.6
    debug@2.6.9
    ejs@2.6.2
    express@4.16.4
    http-errors@1.6.3
    morgan@1.9.1
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi package.json (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "app02",
    "version": "0.0.0",
    "private": true,
    "scripts": {
      "start": "node ./bin/www" => コマンド「npm start」の実行時に「node ./bin/www」を呼出
    },
    "dependencies": {
      "cookie-parser": "~1.4.4",
      "debug": "~2.6.9",
      "ejs": "~2.6.1",
      "express": "~4.16.1",
      "http-errors": "~1.6.3",
      "morgan": "~1.9.1"
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi bin/www (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  #!/usr/bin/env node
  
  var app = require('../app');
  var debug = require('debug')('app02:server'); => デバッグ関連のコードがあるのはありがたい
  var http = require('http');
  
  var port = normalizePort(process.env.PORT || '3000'); => パッケージ「dotenv」が無いので「3000」で固定
  app.set('port', port);
  var server = http.createServer(app);
  
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  
  function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
  }
  
  function onError(error) {
    if (error.syscall !== 'listen') throw error;
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind); => 起動時の「app02:server Listening on port ...」のメッセージ
  }
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi app.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  var indexRouter = require('./routes/index');
  var app = express();
  
  // view engine
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  
  // handler
  app.use('/', indexRouter);
  
  // catch 404 and forward to error handler
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  // error handler
  app.use(function(err, req, res, next) {

    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    
    // render the error page
    res.status(err.status || 500);
    res.render('error');

  });
  
  // module export
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi routes/index.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  
  router.get('/', function(req, res, next) {
    res.render('index', {
      content1: 'Hello World 1',
      content2: 'Hello World 2',
      content3: 'Hello World 3'
    });
  });
  
  // module export
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi views/index.ejs (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  
  <!-- CSS --->
  <link rel='stylesheet' href='stylesheets/style.css'>
  
  <title>SAMPLE</title>
  </head>
  <body>
    <p><%-content1 %></p>
    <p><%-content2 %></p>
    <p><%-content3 %></p>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi public/stylesheets/style.css (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  p {
    color: Crimson;
    font-size: 25px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ DEBUG=app02:* npm start (アプリケーション実行)
  
  コマンドの実行結果
  --------------------------------------------------
  > app02@0.0.0 start
  > node ./bin/www
  
  app02:server Listening on port 3000 +0ms
  ...
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/ (ブラウザから確認)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[Y03]
  [Express] 入力した「URL」を問合わせて「IPv4」を求める
  
[内容]
  同上
  
[確認]
  $ cd $HOME/app02
  $ npm install dns url --save (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi routes/index.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var dns = require('dns');
  var url = require('url');
  
  router.get('/', function(req, res, next) {
    res.sendFile('/home/makoto/app02/views/index.html'); => もっと良い方法は無いのか？
  });
  
  router.post('/', function(req, res, next) {
    let URL = url.parse(req.body.url);
    let OBJ = { family: 4 };
    
    dns.lookup(URL.hostname, OBJ, (error, addr, family) => {
      if (!error) {
        res.render('index', {
          content1: URL.hostname,
          content2: addr
        });
      } else {
        console.log(error);
      }
    });
  });
  
  // module export
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi views/index.html (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  
  <!-- CSS --->
  <link rel='stylesheet' href='stylesheets/style.css'>
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- FORM --->
  <form action='/' method='POST'>
    <label for='url'>URL</label><input type='text' id='url' name='url'>
    <button type='submit'>Submit</button>
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi views/index.ejs (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  
  <!-- CSS --->
  <link rel='stylesheet' href='stylesheets/style.css'>
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- RESULT --->
  <div id=result>
    <p>ホスト名 : <%-content1 %></p>
    <p>アドレス : <%-content2 %></p>
  </div>

  <!-- RETURN --->
  <a id=return href='http://localhost:3000/'>戻る</a>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi stylesheets/style.css (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 50%;
  }
  
  label, input[type='text'] {
    padding: 15px;
    color: Crimson;
    font-size: 20px;
  }
  
  button {
    padding: 20px;
    margin-left: 15px;
    font-size: 25px;
  }
  
  #result {
    border: 3px solid Crimson;
    margin: 5% 25%;
    padding: 15px;
  }
  
  #result p {
    font-size: 25px;
    margin: 5px;
    padding: 5px;
  }
  
  #return {
    display: block;
    margin: -4% 25%;
    padding; 5px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ DEBUG=app02:* npm start (アプリケーション実行)
  
  コマンドの実行結果
  --------------------------------------------------
  > app02@0.0.0 start
  > node ./bin/www
  
  app02:server Listening on port 3000 +0ms
  ...
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/ (ブラウザから確認)
  
  コマンドの実行結果
  --------------------------------------------------
  (URL「https://github.com」を送信)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[Y04]
  [Express] 入力データをローカルのデータベース「MongoDB」に登録
  
[内容]
  同上

[確認]
  $ cd $HOME/app02
  $ sudo vi /etc/yum.repos.d/mongodb-org-4.0.repo
  
  コマンドの実行結果
  --------------------------------------------------
  [mongodb-org-4.0]
  name=MongoDB Repository
  baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/
  gpgcheck=1
  enabled=1
  gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ sudo yum -y install mongodb-org
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ sudo systemctl disable mongod
  
  コマンドの実行結果
  --------------------------------------------------
  Removed symlink /etc/systemd/system/multi-user.target.wants/mongod.service.
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ sudo systemctl start mongod
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ mongo (ローカルDBに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ npm install mongoose --save (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi database/model.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  const mongoose = require('mongoose');
  
  const userSchema = new mongoose.Schema({
    name: { type: String },  // 氏名
    addr: { type: String }   // 住所
  });
  
  module.exports = mongoose.model('User', userSchema, 'User');
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi routes/index.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var user = require('../database/model');
  
  function findData(OBJ) {
    return new Promise((res, rej) => {
      user
      .find(OBJ, { _id: 0, __v: 0 })
      .sort({ _id: 1 })
      .exec( function(err, doc) {
        if (!err) {
          res(doc);  // 状態が「成功」になる => 引数「doc」はメソッド「then」の引数「doc」に渡される
        } else {
          rej(err);  // 状態が「失敗」になる => 引数「err」はメソッド「catch」の引数「err」に渡される
        }
      });
    });
  }
  
  function makeData(OBJ) {
    return new Promise((res, rej) => {
      let TMP = new user();
      TMP.name = OBJ.name;
      TMP.addr = OBJ.addr;
      TMP.save( function(err, doc) {
        if (!err) {
          res(doc);  // 状態が「成功」になる => 引数「doc」はメソッド「then」の引数「doc」に渡される
        } else {
          rej(err);  // 状態が「失敗」になる => 引数「err」はメソッド「catch」の引数「err」に渡される
        }
      });
    });
  }
  
  async function dataMain(OBJ) {
    try {
      let TMP = await findData(OBJ);
      if (TMP.length === 0) await makeData(OBJ);
    }
    catch (err) {
      console.log(err);
    }
  }
  
  router.get('/', function(req, res, next) {
    res.sendFile('/home/makoto/app02/views/index.html');
  });
  
  router.post('/', function(req, res, next) {
    dataMain({ name: req.body.name, addr: req.body.addr });
    res.sendFile('/home/makoto/app02/views/result.html');
  });
  
  // module export
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi app.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  var mongoose = require('mongoose');
  var indexRouter = require('./routes/index');
  
  // local database
  var DB  = 'testdb';
  var OP1 = 'retryWrites=true&w=majority';
  var OP2 = { useNewUrlParser: true, useUnifiedTopology: true };
  
  // database connect
  var URI = `mongodb://localhost/${DB}?${OP1}`;
  mongoose.connect(URI, OP2);
  
  // get database connection
  var conn = mongoose.connection;
  conn.on('error', console.error.bind(console, 'MongoDB connection error:'));
  
  // application instance
  var app = express();
  
  // view engine
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  
  // handler
  app.use('/', indexRouter);
  
  // catch 404 and forward to error handler
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  // error handler
  app.use(function(err, req, res, next) {

    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    
    // render the error page
    res.status(err.status || 500);
    res.render('error');

  });
  
  // module export
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi views/index.html (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  
  <!-- CSS --->
  <link rel='stylesheet' href='stylesheets/style.css'>
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- FORM --->
  <form action='/' method='POST'>
    <label for='name'>名前</label><input type='text' id='name' name='name'>
    <label for='addr'>住所</label><input type='text' id='addr' name='addr'>
    <button type='submit'>登録</button>
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi views/result.html (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  
  <!-- CSS --->
  <link rel='stylesheet' href='stylesheets/style.css'>
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- RESULT --->
  <div id=result>
    <p>データ登録が完了しました</p>
  </div>
  
  <!-- RETURN --->
  <a id=return href='http://localhost:3000/'>戻る</a>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi public/stylesheets/style.css (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 80%;
  }
  
  label, input[type='text'] {
    padding: 15px;
    color: Crimson;
    font-size: 20px;
  }
  
  button {
    padding: 20px;
    margin-left: 15px;
    font-size: 25px;
  }
  
  #result {
    border: 3px solid Crimson;
    margin: 5% 25%;
    padding: 15px;
  }
  
  #result p {
    font-size: 25px;
    margin: 5px;
    padding: 5px;
  }
  
  #return {
    display: block;
    margin: -4% 25%;
    padding; 5px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ DEBUG=app02:* npm start (アプリケーション実行)
  
  コマンドの実行結果
  --------------------------------------------------
  > app02@0.0.0 start
  > node ./bin/www
  
  app02:server Listening on port 3000 +0ms
  ...
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (名前「上杉」、住所「新潟県」と入力して送信ボタン押下)
  (名前「武田」、住所「山梨県」と入力して送信ボタン押下)
  (名前「毛利」、住所「広島県」と入力して送信ボタン押下)
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ mongo
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  testdb  0.000GB
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > コレクション一覧
  > show collections
  
  コマンドの実行結果
  --------------------------------------------------
  Locate
  Person
  Todo
  User  // 該当コレクション
  --------------------------------------------------
  
  > ドキュメント一覧(検索条件を指定しない)
  > db.User.find()
  
  コマンドの実行結果
  --------------------------------------------------
  { "_id" : ObjectId("62bbd6a95faca7563ac42bbc"), "name" : "上杉", "addr" : "新潟県", "__v" : 0 }
  { "_id" : ObjectId("62bbd6dd5faca7563ac42bc1"), "name" : "武田", "addr" : "山梨県", "__v" : 0 }
  { "_id" : ObjectId("62bbd6fd5faca7563ac42bc4"), "name" : "毛利", "addr" : "広島県", "__v" : 0 }
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[Y05]
  [Express] ファイルのアップロード機能を実装
  
[内容]
  同上
  
[確認]
  $ cd $HOME/app02
  $ npm install multer path --save (ローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi routes/index.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var multer = require('multer');
  var path = require('path');
  
  // アップロード設定
  var storage = multer.diskStorage({
    destination: function(req, file, cb) {
      cb(null, 'public/uploads/');  // 保存先は「app02/public/uploads」直下
    },
    filename: function(req, file, cb) {
      cb(null, file.originalname);  // 保存ファイル名は元のファイル名を使用
    }
  });
  
  // アップロード設定を詠み込む
  var upload = multer({ storage: storage });
  
  router.get('/', function(req, res, next) {
    res.sendFile('/home/makoto/app02/views/index.html');
  });
  
  router.post('/', upload.single('AAA'), function(req, res) {
    res.sendFile('/home/makoto/app02/views/index.html');
  });
  
  // module export
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi app.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  var indexRouter = require('./routes/index');

  // application instance
  var app = express();
  
  // view engine
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  
  // handler implements
  app.use('/', indexRouter);
  
  // catch 404 and forward to error handler
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  // error handler
  app.use(function(err, req, res, next) {

    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    
    // render the error page
    res.status(err.status || 500);
    res.render('error');
  
  });
  
  // module export
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi views/index.html (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
  <meta charset="utf-8">
  
  <!-- CSS --->
  <link rel='stylesheet' href='stylesheets/style.css'>
  
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- FORM --->
  <form action='/' method='POST' enctype='multipart/form-data'>
    <input type='file' name='AAA'>
    <button type='submit'>UPLOAD</button>
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ vi public/stylesheets/style.css (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  form {
    margin: 15px auto;
    border: 2px solid Crimson;
    padding: 15px;
    width: 80%;
  }
  
  form input[type='file'] {
    padding: 15px;
    color: Crimson;
    font-size: 30px;
    width: 80%;
    border: 2px solid Crimson;
  }
  
  form button {
    padding: 20px;
    margin-left: 15px;
    font-size: 20px;
  }
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ mkdir -p public/uploads
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) => ディレクトリが無いとアップロードするファイルが作成できずにエラー発生
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ DEBUG=app02:* npm start (アプリケーション実行)
  
  コマンドの実行結果
  --------------------------------------------------
  > app02@0.0.0 start
  > node ./bin/www
  
  app02:server Listening on port 3000 +0ms
  ...
  --------------------------------------------------
  
  $ cd $HOME/app02 <= 別の端末から実行
  $ touch test.txt
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (ファイル「test.txt」を選択して送信)
  --------------------------------------------------
  
  $ cd $HOME/app02
  $ find /home/makoto -name test.txt
  
  コマンドの実行結果
  --------------------------------------------------
  /home/makoto/app02/public/uploads/test.txt
  /home/makoto/app02/test.txt
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
