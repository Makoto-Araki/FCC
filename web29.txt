================================================================================
[X1] ブランチ「master」で新規作成
[X2] ブランチ「sub1」で機能追加
[X3] 実行環境「Node」と付属するパッケージ管理「npm」の導入と基本操作
[01] How to Use package.json, the Core of Any Node.js Project or npm Package
[02] Add a Description to Your package.json
[03] Add Keywords to Your package.json
[04] Add a License to Your package.json
[05] Add a Version to Your package.json
[06] Expand Your Project with External Packages from npm
[07] Manage npm Dependencies By Understanding Semantic Versioning
[08] Use the Tilde-Character to Always Use the Latest Patch Version of a Dependency
[09] Use the Caret-Character to Use the Latest Minor Version of a Dependency
[10] Remove a Package from Your Dependencies
================================================================================
[X1]
  ブランチ「master」で新規作成
  
[内容]
  ブランチ「master(デフォルト)」でソース記述
  
  サービス「GitHub」
    User  : Makoto-Araki
    Pass  : (秘密)
    Name  : APP(リポジトリ) -> 作成直後のリポジトリ内は空
    URI   : https://github.com/Makoto-Araki/APP.git
    Token : (パスワード認証廃止でアップの度に生成が必要)
  
[確認]
  $ cd $HOME/APP
  $ git init
  
  コマンドの実行結果
  --------------------------------------------------
  Initialized empty Git repository in /home/makoto/APP/.git/
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git config --global -l
  
  コマンドの実行結果
  --------------------------------------------------
  user.name=Makoto-Araki
  user.email=mj-araki@ivy.ocn.ne.jp
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git remote add APP https://github.com/Makoto-Araki/APP.git
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし) -> サービス「GitHub」のリポジトリ「APP」をローカル名「APP」で紐付け
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git remote -v
  
  コマンドの実行結果
  --------------------------------------------------
  APP	https://github.com/Makoto-Araki/APP.git (fetch)
  APP	https://github.com/Makoto-Araki/APP.git (push)
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git branch
  
  コマンドの実行結果
  --------------------------------------------------
  * master -> ローカルブランチが「master」を確認
  --------------------------------------------------
  
  $ cd $HOME/APP/mod
  $ vi mod01.js
  
  コマンドの実行結果
  --------------------------------------------------
  // 関数 + 名前付きエクスポート
  export const myAdd1 = (x, y) => x + y;
  --------------------------------------------------
  
  $ cd $HOME/APP/mod
  $ vi mod02.js
  
  コマンドの実行結果
  --------------------------------------------------
  // 関数 + 名前付きエクスポート
  export const myAdd2 = (x, y, z) => x + y + z;
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ vi myApp.js
  
  コマンドの実行結果
  --------------------------------------------------
  // 名前付きエクスポートのインポート + 別名
  import { myAdd1 as add1 } from './mod/mod01.js';
  import { myAdd2 as add2 } from './mod/mod02.js';
  
  // インポート関数を使用
  console.log(add1(2, 1));     // 3
  console.log(add2(3, 2, 1));  // 6
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ vi myApp.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>MY APP</title>
  </head>
  <body>
  
  // HTML
  <main></main>
  
  // CSS
  <style></style>
  
  // JSスクリプト指定
  <script type='module' src='myApp.js'></script>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ (ブラウザ起動)
  $ http://localhost/myApp.html
  
  コマンドの実行結果
  --------------------------------------------------
  3  // add1(2, 1)
  6  // add2(3, 2, 1)
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git status
  
  コマンドの実行結果
  --------------------------------------------------
  # On branch master
  #
  # Initial commit
  #
  # Untracked files:
  #   (use "git add <file>..." to include in what will be committed)
  #
  #	mod/        // コミット対象
  #	myApp.html  // コミット対象
  #	myApp.js    // コミット対象
  #
  nothing added to commit but untracked files present (use "git add" to track)
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git add mod myApp*
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし) -> コミット対象にする
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git status
  
  コマンドの実行結果
  --------------------------------------------------
  # On branch master
  #
  # Initial commit
  #
  # Changes to be committed:
  #   (use "git rm --cached <file>..." to unstage)
  #
  #	new file:   mod/mod01.js  // コミット対象
  #	new file:   mod/mod02.js  // コミット対象
  #	new file:   myApp.html    // コミット対象
  #	new file:   myApp.js      // コミット対象
  #
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git commit -m '2022-06-06-01'
  
  コマンドの実行結果
  --------------------------------------------------
  [master (root-commit) 6544a93] 2022-06-06-01
    4 files changed, 26 insertions(+)
  
  // コミットされたファイル一覧
  create mode 100644 mod/mod01.js
  create mode 100644 mod/mod02.js
  create mode 100644 myApp.html
  create mode 100644 myApp.js
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git status
  
  コマンドの実行結果
  --------------------------------------------------
  # On branch master
  nothing to commit, working directory clean
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git push APP master
  
  コマンドの実行結果
  --------------------------------------------------
  Counting objects: 7, done.
  Delta compression using up to 4 threads.
  Compressing objects: 100% (5/5), done.
  Writing objects: 100% (7/7), 834 bytes | 0 bytes/s, done.
  Total 7 (delta 0), reused 0 (delta 0)
  
  // ローカルブランチ「master」からリポジトリ「APP」のリモートブランチ「master」へ送信(push)
  To https://github.com/Makoto-Araki/APP.git
  * [new branch]      master -> master
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X2]
  ブランチ「sub1」で機能追加
  
[内容]
  ブランチ「sub1」で関数「sub1」を機能追加
  
  サービス「GitHub」
    User  : Makoto-Araki
    Pass  : (秘密)
    Name  : APP(リポジトリ)
    URI   : https://github.com/Makoto-Araki/APP.git
    Token : (パスワード認証廃止でアップの度に生成が必要)
  
[確認]
  $ cd $HOME/APP
  $ git pull APP master
  
  コマンドの実行結果
  --------------------------------------------------
  // リモートリポジトリ「APP」のブランチ「master」からローカルリポジトリのブランチ「master」にダウンロード
  From https://github.com/Makoto-Araki/APP
  * branch            master     -> FETCH_HEAD
  Already up-to-date.
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git branch
  
  コマンドの実行結果
  --------------------------------------------------
  * master  // 作業ブランチ「master」
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git branch sub1
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし) -> ローカルリポジトリにブランチ「sub1」を作成
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git branch
  
  コマンドの実行結果
  --------------------------------------------------
  * master  // 作業ブランチ「master」
    sub1    // 作成されたブランチ「sub1」
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git checkout sub1
  
  コマンドの実行結果
  --------------------------------------------------
  Switched to branch 'sub1'  // 作業ブランチ変更
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git branch
  
  コマンドの実行結果
  --------------------------------------------------
    master  // 現在は作業ブランチではない
  * sub1    // 作業ブランチ
  --------------------------------------------------
  
  $ cd $HOME/APP/mod
  $ vi mod01.js
  
  コマンドの実行結果
  --------------------------------------------------
  // 関数 + 名前付きエクスポート
  export const myAdd1 = (x, y) => x + y;
  export const mySub1 = (x, y) => x - y;  // 追加
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ vi myApp.js
  
  コマンドの実行結果
  --------------------------------------------------
  // 名前付きエクスポートのインポート + 別名
  import { myAdd1 as add1 } from './mod/mod01.js';
  import { myAdd2 as add2 } from './mod/mod02.js';
  import { mySub1 as sub1 } from './mod/mod01.js';  // 追加
  
  // インポート関数を使用
  console.log(add1(2, 1));     // 3
  console.log(add2(3, 2, 1));  // 6
  console.log(sub1(2, 1));     // 1 追加
  --------------------------------------------------
  
  $ (ブラウザ起動)
  $ http://localhost/myApp.html
  
  コマンドの実行結果
  --------------------------------------------------
  3  // add1(2, 1)
  6  // add2(3, 2, 1)
  1  // sub1(2, 1)
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git status
  
  コマンドの実行結果
  --------------------------------------------------
  # On branch sub1
  # Changes not staged for commit:
  #   (use "git add <file>..." to update what will be committed)
  #   (use "git checkout -- <file>..." to discard changes in working directory)
  #
  #	modified:   mod/mod01.js  // コミット対象
  #	modified:   myApp.js      // コミット対象
  #
  no changes added to commit (use "git add" and/or "git commit -a")
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git add mod/mod01.js myApp.js
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし) -> コミット対象にする
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git status
  
  コマンドの実行結果
  --------------------------------------------------
  # On branch sub1
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #	modified:   mod/mod01.js  // コミット対象
  #	modified:   myApp.js      // コミット対象
  #
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git commit -m '2022-06-06-02'
  
  コマンドの実行結果
  --------------------------------------------------
  [sub1 736d06b] 2022-06-06-02
    2 files changed, 3 insertions(+)
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git status
  
  コマンドの実行結果
  --------------------------------------------------
  # On branch master
  nothing to commit, working directory clean
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git push -u APP sub1
  
  コマンドの実行結果
  --------------------------------------------------
  Counting objects: 9, done.
  Delta compression using up to 4 threads.
  Compressing objects: 100% (5/5), done.
  Writing objects: 100% (5/5), 548 bytes | 0 bytes/s, done.
  Total 5 (delta 1), reused 0 (delta 0)
  remote: Resolving deltas: 100% (1/1), completed with 1 local object.
  remote: 
  remote: Create a pull request for 'sub1' on GitHub by visiting:
  remote:      https://github.com/Makoto-Araki/APP/pull/new/sub1
  remote: 
  To https://github.com/Makoto-Araki/APP.git
    * [new branch]      sub1 -> sub1  // ローカルブランチ「sub1」をリモートブランチ「sub1」として作成
  Branch sub1 set up to track remote branch sub1 from APP.
  --------------------------------------------------
  
    $ (下記の操作を行う)
    $ (GitHub -> Makoto-Araki/APP -> タブ「Pull-Request」-> ボタン「Compute & Pull Request」)
    
    コマンドの実行結果
    --------------------------------------------------
    // 第一段階
    画面下部の各ファイルの修正内容を確認

    // 第二段階
    上記がOKの場合はコメント欄にメッセージ追加

    // 第三段階
    ボタン「Create Pull Request」
    --------------------------------------------------
    
    $ (下記の操作を行う)
    $ (GitHub -> Makoto-Araki/APP -> タブ「Commits」-> ボタン「Merge Pull Request」)

    コマンドの実行結果
    --------------------------------------------------
    // 第一段階
    画面下部のコメント欄にメッセージ追加

    // 第二段階
    ボタン「Confirm Merge」-> ブランチ「sub1」の「Pull-Request」が完了した

    // 第三段階
    ボタン「Delete Branch」-> ブランチ「sub1」が削除された
    --------------------------------------------------
    
  $ cd $HOME/APP
  $ git checkout master
  
  コマンドの実行結果
  --------------------------------------------------
  Switched to branch 'master'  // 作業ブランチ変更
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git branch
  
  コマンドの実行結果
  --------------------------------------------------
  * master  // 作業ブランチ
    sub1    // 現在は作業ブランチではない
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git branch -d sub1
  
  コマンドの実行結果
  --------------------------------------------------
  // 警告が出るが「GitHub」上でマージ済みのためブランチ「sub1」の削除は問題なし
  
  warning: deleting branch 'sub1' that has been merged to
           'refs/remotes/APP/sub1', but not yet merged to HEAD.
  Deleted branch sub1 (was 736d06b).
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git branch
  
  コマンドの実行結果
  --------------------------------------------------
  * master  // 作業ブランチ
  --------------------------------------------------
  
  $ cd $HOME/APP
  $ git pull APP master
  
  コマンドの実行結果
  --------------------------------------------------
  remote: Enumerating objects: 1, done.
  remote: Counting objects: 100% (1/1), done.
  remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0
  Unpacking objects: 100% (1/1), done.
  From https://github.com/Makoto-Araki/APP
    * branch            master     -> FETCH_HEAD
  Updating 6544a93..816beb3
  Fast-forward
  mod/mod01.js | 1 +   // 1 箇所追加
  myApp.js     | 2 ++  // 2 箇所追加
    2 files changed, 3 insertions(+)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X3]
  実行環境「Node」と付属するパッケージ管理「npm」の導入と基本操作
  
[内容]
  実行環境「Node」と付属するパッケージ管理「npm」の導入と基本操作
  
[確認]
  $ cd $HOME
  $ sudo yum -y install nodejs npm
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 実行環境「Node」とパッケージ管理「npm」を導入
  --------------------------------------------------
  
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v6.17.1 -> 実行環境「Node」のバージョンが古い
  --------------------------------------------------
  
  $ cd $HOME
  $ npm --version
  
  コマンドの実行結果
  --------------------------------------------------
  3.10.10 -> パッケージ管理「npm」のバージョンが古い
  --------------------------------------------------
  
  $ cd $HOME
  $ sudo yum -y remove nodejs npm
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> リポジトリ内のものはバージョンが古いので削除
  --------------------------------------------------
  
  $ cd $HOME
  $ sudo yum -y install https://rpm.nodesource.com/pub_11.x/el/7/x86_64/nodesource-release-el7-1.noarch.rpm
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 専用リポジトリをインストール
  --------------------------------------------------
  
  $ cd $HOME
  $ ls -ltrA /etc/yum.repos.d
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-r--r--. 1 root root  183  4月  2  2011 adobe-linux-x86_64.repo
  -rw-r--r--. 1 root root  477  7月 31  2014 nux-dextop.repo
  -rw-r--r--. 1 root root  474 10月 26  2018 nodesource-el7.repo  // 追加
  -rw-r--r--. 1 root root  591  5月  2  2019 ius.repo
  -rw-r--r--. 1 root root  669  5月  2  2019 ius-testing.repo
  -rw-r--r--. 1 root root  669  5月  2  2019 ius-archive.repo
  -rw-r--r--. 1 root root  173 10月  5  2019 google-chrome.repo
  -rw-r--r--. 1 root root 1919  9月 24  2020 docker-ce.repo
  -rw-r--r--. 1 root root 1050 11月  1  2020 epel.repo
  -rw-r--r--. 1 root root 1149 11月  1  2020 epel-testing.repo
  -rw-r--r--. 1 root root  616 11月 24  2020 CentOS-x86_64-kernel.repo
  -rw-r--r--. 1 root root  314 11月 24  2020 CentOS-fasttrack.repo
  -rw-r--r--. 1 root root 8515 11月 24  2020 CentOS-Vault.repo
  -rw-r--r--. 1 root root 1331 11月 24  2020 CentOS-Sources.repo
  -rw-r--r--. 1 root root  630 11月 24  2020 CentOS-Media.repo
  -rw-r--r--. 1 root root  649 11月 24  2020 CentOS-Debuginfo.repo
  -rw-r--r--. 1 root root 1309 11月 24  2020 CentOS-CR.repo
  -rw-r--r--. 1 root root 1664 11月 24  2020 CentOS-Base.repo
  -rw-r--r--. 1 root root  200  7月  6 12:34 mongodb-org-4.0.repo
  --------------------------------------------------
  
  $ cd $HOME
  $ sudo yum -y install nodejs
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 実行環境「Node」を導入
  --------------------------------------------------
  
  $ cd $HOME
  $ sudo npm update -g npm
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> パッケージ管理「npm」を更新
  --------------------------------------------------
  
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v11.15.0 -> 実行環境「Node」が「v6.17.1」から「v11.15.0」にアップ
  --------------------------------------------------
  
  $ cd $HOME
  $ npm --version
  
  コマンドの実行結果
  --------------------------------------------------
  6.14.13 -> パッケージ管理「npm」が「3.10.10」から「6.14.13」にアップ
  --------------------------------------------------
  
  $ cd $HOME
  $ command -v nvm
  
  コマンドの実行結果
  --------------------------------------------------
  nvm -> 実行環境「Node」のバージョン管理「nvm」もインストール済み
  --------------------------------------------------
  
  $ cd $HOME
  $ nvm install stable --latest-npm
  
  コマンドの実行結果
  --------------------------------------------------
  Creating default alias: default -> stable (-> v16.5.0)
  --------------------------------------------------
  
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.5.0 -> 実行環境「Node」が「v11.15.0」から「v16.5.0」にアップ
  --------------------------------------------------
  
  $ cd $HOME
  $ npm --version
  
  コマンドの実行結果
  --------------------------------------------------
  7.19.1 -> パッケージ管理「npm」が「6.14.13」から「7.19.1」にアップ
  --------------------------------------------------
  
  $ cd $HOME
  $ nvm --version
  
  コマンドの実行結果
  --------------------------------------------------
  0.33.11 -> 実行環境「Node」のバージョン管理「nvm」のバージョン確認
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[01]
  How to Use package.json, the Core of Any Node.js Project or npm Package
  
[内容]
  設定ファイル「pakage.json」の編集
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-01
    URL  : https://FCC1-01.makotoaraki.repl.co
  
[確認]
  $ cd $HOME
  $ mkdir app12
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  This utility will walk you through creating a package.json file.
  It only covers the most common items, and tries to guess sensible defaults.
  
  See `npm help init` for definitive documentation on these fields
  and exactly what they do.
  
  Use `npm install <pkg>` afterwards to install a package and
  save it as a dependency in the package.json file.
  
  Press ^C at any time to quit.  // 中断は「Ctrl + C」で行う
  package name: (app12)          // そのまま「Enter」
  version: (1.0.0) 0.0.1         // 入力欄に「0.0.1」と入力
  description: npm-test          // 入力欄に「npm-test」と入力
  entry point: (index.js)        // そのまま「Enter」
  test command:                  // そのまま「Enter」
  git repository:                // そのまま「Enter」
  keywords: app12                // 入力欄に「app12」と入力
  author: Makoto-Araki           // 入力欄に「Makoto-Araki」と入力
  license: (ISC)                 // そのまま「Enter」
  About to write to /home/makoto/app12/package.json:
  
  {
    "name": "app12",
    "version": "0.0.1",
    "description": "npm-test",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "keywords": [
      "app12"
    ],
    "author": "Makoto-Araki",
    "license": "ISC"
  }
  
  Is this OK? (yes)              // そのまま「Enter」
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ npm install express --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> オプション「--save」でファイル「package.json」に記録
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ npm install -g express-generator
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> オプション「-g」でシステム全体にインストール
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ npm ls
  
  コマンドの実行結果
  --------------------------------------------------
  app12@0.0.1 /home/makoto/app12  // カレントディレクトリのパッケージ情報を表示
  └── express@4.17.1              // パッケージはツリー構成で表示される
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ npm ls -g
  
  コマンドの実行結果
  --------------------------------------------------
  /home/makoto/.nvm/versions/node/v16.5.0/lib  // システム全体のパッケージ情報を表示
  ├── express-generator@4.16.1                 // システム全体にインストールしたパッケージが表示
  └── npm@7.19.1
  --------------------------------------------------
  
  $ cd $HOME/app12
  $ cat package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "app12",
    "version": "0.0.1",
    "description": "npm-test",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "keywords": [
      "app12"
    ],
    "author": "Makoto-Araki",
    "license": "ISC",
    "dependencies": {
      "express": "^4.17.1"
    }
  }
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[02]
  Add a Description to Your package.json
  
[内容]
  キー「description」でパッケージ説明
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-02
    URL  : https://FCC1-02.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
[03]
  Add Keywords to Your package.json
  
[内容]
  キー「keywords」で関連用語を登録
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-03
    URL  : https://FCC1-03.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
[04]
  Add a License to Your package.json
  
[内容]
  キー「license」でユーザーにライセンス通知
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-04
    URL  : https://FCC1-04.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
[05]
  Add a Version to Your package.json
  
[内容]
  キー「version」でバージョンを表示する
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-05
    URL  : https://FCC1-05.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
[06]
  Expand Your Project with External Packages from npm
  
[内容]
  キー「dependencies」でパッケージ間の依存関係を指示
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-06
    URL  : https://FCC1-06.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
[07]
  Manage npm Dependencies By Understanding Semantic Versioning
  
[内容]
  バージョン表記を「2.10.2」に修正 -> 2(MAJOR).10(MINOR).2(PATCH)
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-07
    URL  : https://FCC1-07.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
[08]
  Use the Tilde-Character to Always Use the Latest Patch Version of a Dependency
  
[内容]
  バージョン表記を「~2.10.2」に修正 -> パッチレベル「2.10.x」で自動更新
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-08
    URL  : https://FCC1-08.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
[09]
  Use the Caret-Character to Use the Latest Minor Version of a Dependency
  
[内容]
  バージョン表記を「^2.10.2」に修正 -> マイナーレベル「2.x.x」で自動更新
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-09
    URL  : https://FCC1-09.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
[10]
  Remove a Package from Your Dependencies
  
[内容]
  依存関係リストからパッケージ削除 -> パッケージをリストから単に削除すれば良い
  
  Replit
    User : MakotoAraki
    Pass : (秘密)
    Name : FCC1-10
    URL  : https://FCC1-10.makotoaraki.repl.co
  
[確認]
  // 上記「01」を参照
  
================================================================================
