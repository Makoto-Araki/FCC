================================================================================
[01] Create a Basic JavaScript Object
[02] Use Dot Notation to Access the Properties of an Object
[03] Create a Method on an Object
[04] Make Code More Reusable with the this Keyword
[05] Define a Constructor Function
[06] Use a Constructor to Create Objects
[07] Extend Constructors to Receive Arguments
[08] Verify an Object's Constructor with instanceof
[09] Understand Own Properties
[10] Use Prototype Properties to Reduce Duplicate Code
[11] Iterate Over All Properties
[12] Understand the Constructor Property
[13] Change the Prototype to a New Object
[14] Remember to Set the Constructor Property when Changing the Prototype
[15] Understand Where an Object’s Prototype Comes From
[16] Understand the Prototype Chain
[17] Use Inheritance So You Don't Repeat Yourself
[18] Inherit Behaviors from a Supertype
[19] Set the Child's Prototype to an Instance of the Parent
[20] Reset an Inherited Constructor Property
[21] Add Methods After Inheritance
[22] Override Inherited Methods
[23] Use a Mixin to Add Common Behavior Between Unrelated Objects
[24] Use Closure to Protect Properties Within an Object from Being Modified Externally
[25] Understand the Immediately Invoked Function Expression (IIFE)
[26] Use an IIFE to Create a Module
================================================================================
[01]
  Create a Basic JavaScript Object
  
[内容]
  オブジェクト紹介
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // オブジェクト
    const OBJ = {
      key1: 10,
      key2: 10,
      key3: 10
    }
    
    // 出力
    console.log(OBJ);
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[02]
  Use Dot Notation to Access the Properties of an Object
  
[内容]
  オブジェクトのプロパティにアクセス
    表記「オブジェクト.プロパティ名」
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // オブジェクト
    const OBJ = {
      key1: 10,
      key2: 10,
      key3: 10
    }
    
    // 出力
    console.log(OBJ.key1);  // 10
    console.log(OBJ.key2);  // 10
    console.log(OBJ.key3);  // 10
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[03]
  Create a Method on an Object
  
[内容]
  オブジェクトにメソッド(関数)を追加
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // オブジェクト
    const OBJ = {
      key1: 10,
      key2: 10,
      key3: 10,
      sum: function() { return OBJ.key1 + OBJ.key2 + OBJ.key3 ; }
      avg: function() { return OBJ.sum() / 3 ; }
    }
    
    // 出力
    console.log(OBJ.sum());  // 30
    console.log(OBJ.avg());  // 10
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[04]
  Make Code More Reusable with the this Keyword
  
[内容]
  キーワード「this」を使用
    オブジェクト名が変更されてもメソッドは使用可能
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // オブジェクト
    const OBJ = {
      key1: 10,
      key2: 10,
      key3: 10,
      sum: function() { return this.key1 + this.key2 + this.key3 ; }
      avg: function() { return this.sum() / 3 ; }
    }
    
    // 出力
    console.log(OBJ.sum());  // 30
    console.log(OBJ.avg());  // 10
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[05]
  Define a Constructor Function
  
[内容]
  コンストラクタ関数で擬似的なクラス実装 => 内部でオブジェクト生成
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
      this.sum = () => this.key1 + this.key2 + this.key3;
      this.avg = () => this.sum() / 3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    const OBJ2 = new OBJ(20, 20, 20);
    
    // 出力(1)
    console.log(OBJ1.sum());  // 30
    console.log(OBJ1.avg());  // 10
    
    // 出力(2)
    console.log(OBJ2.sum());  // 60
    console.log(OBJ2.avg());  // 20
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[06]
  Use a Constructor to Create Objects
  
[内容]
  コンストラクタ関数からオブジェクト生成
  
[確認]
  // 上記「05」を参照
  
================================================================================
[07]
  Extend Constructors to Receive Arguments
  
[内容]
  コンストラクタ関数の引数指定を可能にする
  
[確認]
  // 上記「05」を参照
  
================================================================================
[08]
  Verify an Object's Constructor with instanceof
  
[内容]
  コンストラクタ由来のオブジェクトか検証
    演算子「instanceof」
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
      this.sum = () => this.key1 + this.key2 + this.key3;
      this.avg = () => this.sum() / 3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    const OBJ2 = new OBJ(20, 20, 20);
    
    // コンストラクタ由来のオブジェクトか検証
    console.log(OBJ1 instanceof OBJ);  // true
    console.log(OBJ2 instanceof OBJ);  // true
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[09]
  Understand Own Properties
  
[内容]
  各プロパティが固有プロパティか確認
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
      this.sum = () => this.key1 + this.key2 + this.key3;
      this.avg = () => this.sum() / 3;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    
    // 各プロパティが固有プロパティか確認(1)
    console.log(OBJ1.hasOwnProperty('sum'));  // true
    console.log(OBJ1.hasOwnProperty('avg'));  // true
    
    // 各プロパティが固有プロパティか確認(2)
    console.log('sum' in OBJ1);  // true
    console.log('avg' in OBJ1);  // true
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[10]
  Use Prototype Properties to Reduce Duplicate Code
  
[内容]
  プロトタイプを使用してコード量を削減
    プロトタイプ配下は全インスタンスで共有 => オブジェクト生成時にメモリ節約
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下のメソッド
    OBJ.prototype.sum = function() {
      return this.key1 + this.key2 + this.key3 ;
    }
    
    // プロトタイプ配下のメソッド
    OBJ.prototype.avg = function() {
      return this.sum() / 3 ;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    
    // 出力
    console.log(OBJ1.sum());  // 30
    console.log(OBJ1.avg());  // 10
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[11]
  Iterate Over All Properties
  
[内容]
  全プロパティを固有プロパティかプロトタイプか判定
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下のメソッド
    OBJ.prototype.sum = function() {
      return this.key1 + this.key2 + this.key3 ;
    }
    
    // プロトタイプ配下のメソッド
    OBJ.prototype.avg = function() {
      return this.sum() / 3 ;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    
    // 各プロパティを固有プロパティかプロトタイプか確認
    for (name in OBJ1)
      console.log(`${name} : ${OBJ1.hasOwnProperty(name)}`);
    
    // key1 : true
    // key2 : true
    // key3 : true
    // sum : false => プロトタイプ
    // avg : false => プロトタイプ
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[12]
  Understand the Constructor Property
  
[内容]
  プロパティ「constructor」
    オブジェクトのコンストラクタ関数を参照
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下のメソッド
    OBJ.prototype.sum = function() {
      return this.key1 + this.key2 + this.key3 ;
    }
    
    // プロトタイプ配下のメソッド
    OBJ.prototype.avg = function() {
      return this.sum() / 3 ;
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    
    // オブジェクトのコンストラクタ関数を参照
    console.log(OBJ1.constructor);  // function OBJ(P1, P2, P3)
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[13]
  Change the Prototype to a New Object
  
[内容]
  プロトタイプをオブジェクトでまとめて指定
    プロパティ「constructor」まで上書き => 値が「function Object」に初期化されてしまう
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下をオブジェクトでまとめて指定
    OBJ.prototype = {
      sum() { return this.key1 + this.key2 + this.key3; },
      avg() { return this.sum() / 3; }
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    
    // オブジェクトのコンストラクタ関数を参照
    console.log(OBJ1.constructor);  // function OBJ(P1, P2, P3) => function Object() に上書き
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[14]
  Remember to Set the Constructor Property when Changing the Prototype
  
[内容]
  プロパティ「constructor」の上書きを阻止
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下をオブジェクトでまとめて指定
    OBJ.prototype = {
      constructor: OBJ,  // 追加
      sum() { return this.key1 + this.key2 + this.key3; },
      avg() { return this.sum() / 3; }
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    
    // オブジェクトのコンストラクタ関数を参照
    console.log(OBJ1.constructor);  // function OBJ(P1, P2, P3)
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[15]
  Understand Where an Object’s Prototype Comes From
  
[内容]
  メソッド「isPrototypeOf」
    オブジェクトが指定プロタイプ由来かを確認
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下をオブジェクトでまとめて指定
    OBJ.prototype = {
      constructor: OBJ,
      sum() { return this.key1 + this.key2 + this.key3; },
      avg() { return this.sum() / 3; }
    }
    
    // コンストラクタ関数からオブジェクト生成
    const OBJ1 = new OBJ(10, 10, 10);
    
    // オブジェクト(OBJ1)が指定プロタイプ(OBJ)由来かを確認
    console.log(OBJ.prototype.isPrototypeOf(OBJ1));  // true
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[16]
  Understand the Prototype Chain
  
[内容]
  プロトタイプチェーン
    別オブジェクトのプロトタイプを自分のプロトタイプとして使用する
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数(1)
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下をオブジェクトでまとめて指定
    OBJ.prototype = {
      constructor: OBJ,
      sum() { return this.key1 + this.key2 + this.key3; },
      avg() { return this.sum() / 3; }
    }
    
    // コンストラクタ関数(2)
    function OTHER(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // 他オブジェクトのプロトタイプを使用する
    OTHER.prototype = new OBJ();
    
    // コンストラクタ関数からオブジェクト生成
    const OH1 = new OTHER(10, 10, 10);
    
    // 出力
    console.log(OH1.constructor);  // function OBJ(P1, P2, P3) => コンストラクタは「OBJ」のまま
    console.log(OH1.sum());        // 30
    console.log(OH1.avg());        // 10
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[17]
  Use Inheritance So You Don't Repeat Yourself
  
[内容]
  一方のプロトタイプに重複コードを移動
  
[確認]
  // 上記「16」を参照
  
================================================================================
[18]
  Inherit Behaviors from a Supertype
  
[内容]
  メソッド「Object.create」を使用して上記「16」のプロトタイプチェーンを実現
    変更前 : OTHER.prototype = new OBJ();
    変更後 : OTHER.prototype = Object.create(OBJ.prototype);
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数(1)
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下をオブジェクトでまとめて指定
    OBJ.prototype = {
      constructor: OBJ,
      sum() { return this.key1 + this.key2 + this.key3; },
      avg() { return this.sum() / 3; }
    }
    
    // コンストラクタ関数(2)
    function OTHER(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // 他オブジェクトのプロトタイプを使用する
    OTHER.prototype = Object.create(OBJ.prototype);
    
    // コンストラクタ関数からオブジェクト生成
    const OH1 = new OTHER(10, 10, 10);
    
    // 出力
    console.log(OH1.constructor);  // function OBJ(P1, P2, P3) => コンストラクタは「OBJ」のまま
    console.log(OH1.sum());        // 30
    console.log(OH1.avg());        // 10
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[19]
  Set the Child's Prototype to an Instance of the Parent
  
[内容]
  メソッド「Object.create」を使用
  
[確認]
  // 上記「18」を参照
  
================================================================================
[20]
  Reset an Inherited Constructor Property
  
[内容]
  コンストラクタ修正
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数(1)
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下をオブジェクトでまとめて指定
    OBJ.prototype = {
      constructor: OBJ,
      sum() { return this.key1 + this.key2 + this.key3; },
      avg() { return this.sum() / 3; }
    }
    
    // コンストラクタ関数(2)
    function OTHER(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // 他オブジェクトのプロトタイプを使用する
    OTHER.prototype = Object.create(OBJ.prototype);
    
    // コンストラクタ修正
    OTHER.prototype.constructor = OTHER;
    
    // コンストラクタ関数からオブジェクト生成
    const OH1 = new OTHER(10, 10, 10);
    
    // 出力
    console.log(OH1.constructor);  // function OTHER(P1, P2, P3) => コンストラクタが「OTHER」に修正
    console.log(OH1.sum());        // 30
    console.log(OH1.avg());        // 10
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[21]
  Add Methods After Inheritance
  
[内容]
  プロトタイプにメソッド追加
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数(1)
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下をオブジェクトでまとめて指定
    OBJ.prototype = {
      constructor: OBJ,
      sum() { return this.key1 + this.key2 + this.key3; },
      avg() { return this.sum() / 3; }
    }
    
    // コンストラクタ関数(2)
    function OTHER(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // 他オブジェクトのプロトタイプを使用する
    OTHER.prototype = Object.create(OBJ.prototype);
    
    // コンストラクタ修正
    OTHER.prototype.constructor = OTHER;
    
    // プロトタイプにメソッド追加
    OTHER.prototype.mul = function() { return this.key1 * this.key2 * this.key3; }
    
    // コンストラクタ関数からオブジェクト生成
    const OH1 = new OTHER(10, 10, 10);
    
    // 出力
    console.log(OH1.constructor);  // function OTHER(P1, P2, P3)
    console.log(OH1.sum());        // 30
    console.log(OH1.avg());        // 10
    console.log(OH1.mul());        // 1000
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[22]
  Override Inherited Methods
  
[内容]
  プロトタイプのメソッドをオーバーライド
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // コンストラクタ関数(1)
    function OBJ(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // プロトタイプ配下をオブジェクトでまとめて指定
    OBJ.prototype = {
      constructor: OBJ,
      sum() { return this.key1 + this.key2 + this.key3; },
      avg() { return this.sum() / 3; }
    }
    
    // コンストラクタ関数(2)
    function OTHER(P1, P2, P3) {
      this.key1 = P1;
      this.key2 = P2;
      this.key3 = P3;
    }
    
    // 他オブジェクトのプロトタイプを使用する
    OTHER.prototype = Object.create(OBJ.prototype);
    
    // コンストラクタ修正
    OTHER.prototype.constructor = OTHER;
    
    // プロトタイプに関数追加
    OTHER.prototype.mul = function() { return this.key1 * this.key2 * this.key3 ; }
    
    // プロトタイプのメソッドをオーバーライド
    OTHER.prototype.sum = function() { return (this.key1 + this.key2 + this.key3) * 2 ; }
    
    // コンストラクタ関数からオブジェクト生成
    const OH1 = new OTHER(10, 10, 10);
    
    // 出力
    console.log(OH1.constructor);  // function OTHER(P1, P2, P3)
    console.log(OH1.sum());        // 60 => オーバーライド
    console.log(OH1.avg());        // 20 => オーバーライドにより変化
    console.log(OH1.mul());        // 1000
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[23]
  Use a Mixin to Add Common Behavior Between Unrelated Objects
  
[内容]
  共有関数
    関数の引数にオブジェクトを指定、オブジェクト間で同一の関数を共有
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // 共有関数
    const add = function(OBJ) {
      OBJ.add = (P1, P2) => P1 + P2 ;
    }
    
    // オブジェクト
    const OBJ1 = { key1: 100, key2: 200 }
    const OBJ2 = { key1: 101, key2: 201 }
    
    // 各オブジェクトに共有関数を実装
    add(OBJ1);
    add(OBJ2);
    
    // プロパティ一覧
    console.log(Object.keys(OBJ1));  // [ key1, key2, add ]
    console.log(Object.keys(OBJ2));  // [ key1, key2, add ]
    
    // 共有関数を実行
    console.log(OBJ1.add(10, 15));  // 25
    console.log(OBJ2.add(10, 15));  // 25
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[24]
  Use Closure to Protect Properties Within an Object from Being Modified Externally
  
[内容]
  クロージャー
  
  (例1)
    // 関数「Add」はクロージャー「Sub(関数)」を返す
    function Add(P1) {
      let CN = 10;
      return function Sub(P2) { return P1 + P2 + CN; }
    }
    
    // クロージャー作成
    let sub1 = Add(10);  // 内部に「P1 = 10」、「CN = 10」、ロジック「(P2) => 10 + P2 + 10」を持つ
    let sub2 = Add(20);  // 内部に「P1 = 20」、「CN = 10」、ロジック「(P2) => 20 + P2 + 10」を持つ
    let sub3 = Add(30);  // 内部に「P1 = 30」、「CN = 10」、ロジック「(P2) => 30 + P2 + 10」を持つ
    let sub4 = Add(40);  // 内部に「P1 = 40」、「CN = 10」、ロジック「(P2) => 40 + P2 + 10」を持つ
    
    // クロージャー実行
    console.log(sub1(5));  // 10 + 5 + 10 => 25
    console.log(sub2(5));  // 20 + 5 + 10 => 35
    console.log(sub3(5));  // 30 + 5 + 10 => 45
    console.log(sub4(5));  // 40 + 5 + 10 => 55
    
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // クロージャー定義
    function Accumlator() {
      let VAL = 0;                     // クロージャー変数
      function Add(P1) { VAL += P1; }  // クロージャー関数
      function Sub(P1) { VAL -= P1; }  // クロージャー関数
      
      return {
        inc: function() { Add(1); },     // クロージャー関数を内包
        dec: function() { Sub(1); },     // クロージャー関数を内包
        val: function() { return VAL; }  // クロージャー変数を内包
      }
    }
    
    // クロージャー生成
    const A1 = Accumlator();  // クロージャー変数や関数を内包している
    const A2 = Accumlator();  // クロージャー変数や関数を内包している
    
    // クロージャー操作(1)
    A1.inc();
    A1.inc();

    // クロージャー操作(2)
    A2.dec();
    A2.dec();

    // 出力
    console.log(A1.val());  // 2
    console.log(A2.val());  // -2
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[25]
  Understand the Immediately Invoked Function Expression (IIFE)
  
[内容]
  即時関数(IIFE)
    無名ブロックで変数にも格納しない
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // 通常関数
    function Func() { console.log('通常関数: Hello'); }
    
    // 即時関数(IIFE)
    (function() { console.log('即時関数: Hello'); })()
    
    // 通常関数はコール必要
    Func();
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
[26]
  Use an IIFE to Create a Module
  
[内容]
  即時関数を使用してモジュール作成
  
[確認]
  # cd /var/www/html
  # vi sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>SAMPLE</title>
  </head>
  <body>
  
  <!-- HTML --->
  <main></main>
  
  <!-- CSS --->
  <style></style>
  
  <!-- JS --->
  <script>
    
    // 即時関数(IIFE)を使用してモジュール作成
    const Calc = (() => {
      return {
        add: (OBJ) => OBJ.add = (P1, P2) => P1 + P2,
        sub: (OBJ) => OBJ.sub = (P1, P2) => P1 - P2,
        mul: (OBJ) => OBJ.mul = (P1, P2) => P1 * P2,
        div: (OBJ) => OBJ.div = (P1, P2) => P1 / P2
      }
    })();
    
    // オブジェクト
    const OBJ1 = { key1: 100, key2: 200 }
    const OBJ2 = { key1: 101, key2: 201 }
    
    // 各オブジェクトに共有関数を実装
    Calc.add(OBJ1);
    Calc.add(OBJ2);
    
    // 共有関数を実行
    console.log(OBJ1.add(12, 11));  // 23
    console.log(OBJ2.add(22, 21));  // 43
    
  </script>
  
  </body>
  </html>
  --------------------------------------------------
  
  # firefox
  # http://localhost/sample.html
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  確認完了!
  
================================================================================
