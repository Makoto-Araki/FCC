================================================================================
[X01] //
[001] Learn How JavaScript Assertions Work
[002] Test if a Variable or Function is Defined
[003] Use Assert.isOK and Assert.isNotOK
[004] Test for Truthiness
[005] Use the Double Equals to Assert Equality
[006] Use the Triple Equals to Assert Strict Equality
[007] Assert Deep Equality with .deepEqual and .notDeepEqual
[008] Compare the Properties of Two Elements
[009] Test if One Value is Below or At Least as Large as Another
[010] Test if a Value Falls within a Specific Range
[011] Test if a Value is an Array
[012] Test if an Array Contains an Item
[013] Test if a Value is a String
[014] Test if a String Contains a Substring
[015] Use Regular Expressions to Test a String
[016] Test if an Object has a Property
[017] Test if a Value is of a Specific Data Structure Type
[018] Test if an Object is an Instance of a Constructor
[019] Run Functional Tests on API Endpoints using Chai-HTTP
[020] Run Functional Tests on API Endpoints using Chai-HTTP II
[021] Run Functional Tests on an API Response using Chai-HTTP III - PUT method
[022] Run Functional Tests on an API Response using Chai-HTTP IV - PUT method
[023] Simulate Actions Using a Headless Browser
[024] Run Functional Tests using a Headless Browser
[025] Run Functional Tests using a Headless Browser II
================================================================================
[X01]
  [Mocha] JSコードの単体テストレベルの動作確認(1)
  
[内容]
  JSコードの単体テストレベルの動作確認を行い、結果はブラウザ出力する
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs cha01
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ npm install request mongoose mocha chai zombie --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha01",
    "version": "0.0.0",
    "private": true,
    "scripts": {
      "start": "node ./bin/www",
      "test": "mocha --reporter spec"  // 追加
    },
    "dependencies": {
      "chai": "^4.3.6",
      "cookie-parser": "~1.4.4",
      "debug": "~2.6.9",
      "ejs": "~2.6.1",
      "express": "~4.16.1",
      "http-errors": "~1.6.3",
      "mocha": "^10.0.0",
      "mongoose": "^6.4.7",
      "morgan": "~1.9.1",
      "request": "^2.88.2",
      "zombie": "^6.1.4"
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/database => 専用ディレクトリ作成
  $ mongod --nojournal --noprealloc --dbpath ./ (ローカルDB作成)
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ mongo (ローカルDBに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'AAA', mail : 'AAA@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'BBB', mail : 'BBB@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'CCC', mail : 'CCC@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント一覧(表示可否を指定)
  > db.Person.find( {}, { _id: 0 } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "AAA", "mail" : "AAA@google.com" }
  { "name" : "BBB", "mail" : "BBB@google.com" }
  { "name" : "CCC", "mail" : "CCC@google.com" }
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ vi views/index.ejs (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 画面上部にメッセージ表示 --->
  <div><p><%=message %></p></div>
  
  <!-- 取得データをテーブル表示 --->
  <table>
    <tr>
      <td>NAME</td>
      <td>MAIL</td>
    </tr>
    <% for (let i in content) { %>
    <tr>
      <td><%=content[i].name %></td>
      <td><%=content[i].mail %></td>
    </tr>
    <% } %>
  </table>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ vi views/add.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 画面上部にメッセージ表示 --->
  <div><p><%=message %></p></div>
  
  <!-- 指定した「NAME」と「MAIL」のレコードを登録 --->
  <form method="post" action="/add">
    <label for="name">NAME</label><input type="text" id="name" name="name">
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  div {
    padding: 10px;
    margin: 15px auto;
    color: White;
    background-color: Black;
    width: 60%;
  }
  
  div p {
    padding: 10px 15px;
    margin: 10px 10px;
    font-size: 20px;
    text-align: center;
  }
  
  ul {
    padding: 5px;
    margin: 15px auto;
    color: Crimson;
    width: 60%;
  }
  
  ul li {
    padding: 0px 15px;
    margin: 0px 10px;
    font-size: 20px;
    text-align: left;
    list-style-type: none;
  }
  
  form {
    padding: 8px;
    margin: 15px auto;
    color: Black;
    background-color: White;
    border: 2px solid Black;
    width: 60%;
  }
  
  label {
    display: block;
    padding: 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Black;
    font-size: 25px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px;
    margin: 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    padding: 0px;
    margin: 15px auto;
    width: 62%;
  }
  
  table th {
    padding: 0px;
    margin: 0px;
    color: White;
    background-color: Black;
  }
  
  table tr {
    padding: 0px;
    margin: 0px;
    color: Black;
    background-color: White;
    border: 2px solid Black;
  }
  
  table td {
    padding: 10px;
    margin: 0px;
    text-align: center;
    font-size: 20px;
    border: 2px solid Black;
  }
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ vi routes/index.js (ファイル確認または編集) => モデル関連を別ファイル構成にした時にうまく動かないので一緒にした
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var mongoose = require('mongoose');
  
  var Schema = new mongoose.Schema({
    name: { type: String },  // 氏名
    mail: { type: String },  // メールアドレス
  });
  
  var Person = mongoose.model('Person', Schema, 'Person');
  
  router.get('/', async function(req, res, next) {
    try {
      var data = {
        title: 'データ一覧画面',
        message: '全データを一覧表示しています',
        content: await Person.find(),
      }
      res.render('index', data);
    } catch {
      res.status(404);
      res.send({ error: "Person doesn't exist!" });
    }
  });
  
  router.get('/add', function(req, res, next) {
    var data = {
      title: '入力画面',
      message: 'NAMEとMAILを入力してください',
    }
    res.render('add', data);
  });
  
  router.post('/add', async function(req, res, next) {
    try {
      await Person.create({
        name: req.body.name,
        mail: req.body.mail,
      });
      res.redirect('/');
    } catch {
      res.status(404);
      res.send({ error: "Insert failed!" });
    }
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ vi app.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  var mongoose = require('mongoose');
  var indexRouter = require('./routes/index');
  
  var database = mongoose.connect("mongodb://localhost/testdb");
  var connect = mongoose.connection;
  connect.on('error', console.error.bind(console, 'MongoDB connection error:'));
  connect.once('open', () => console.log('MongoDB connection successful'))
  
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ vi test/test.js (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  const Browser = require('zombie');
  const chai = require('chai');
  const expect = chai.expect;
  const assert = chai.assert;
  
  Browser.localhost('localhost', 3000);  // ヘッドレスブラウザ接続先
  const browser = new Browser();         // ヘッドレスブラウザ生成
  
  before(function(done) {
    browser.visit('/', done);
  });
  
  describe('GET - http://localhost:3000/', function() {
    it('It should be successful', function() {
      browser.assert.success();
    });
  });
  
  describe('GET - http://localhost:3000/', function() {
    it('It should be successful', function() {
      browser.assert.success();
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ npm start (アプリケーション実行)
  
  コマンドの実行結果
  --------------------------------------------------
  MongoDB connection successful => Ctrl + C で停止
  --------------------------------------------------
  
  $ cd $HOME/cha01 <= 別の端末から実行
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@0.0.0 test
  > mocha --reporter spec
  
  GET - http://localhost:3000/
    ✔ It should be successful
  
  GET - http://localhost:3000/
    ✔ It should be successful
  
  2 passing (247ms)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (データベースから取得データを表示)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/add => 画面上の「NAME」に「DDD」、「MAIL」は「DDD@google.com」を入力でボタン押下
  
  コマンドの実行結果
  --------------------------------------------------
  (データ登録を確認)
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ mongo
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  testdb  0.000GB  // 該当データベース
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > ドキュメント一覧(検索条件を指定しない)
  > db.Person.find()
  
  コマンドの実行結果
  --------------------------------------------------
  { "_id" : ObjectId("62dd2a6c4e29b5b8b465de41"), "name" : "AAA", "mail" : "AAA@google.com" }
  { "_id" : ObjectId("62dd2a7a4e29b5b8b465de42"), "name" : "BBB", "mail" : "BBB@google.com" }
  { "_id" : ObjectId("62dd2a894e29b5b8b465de43"), "name" : "CCC", "mail" : "CCC@google.com" }
  { "_id" : ObjectId("62dd2d00620660b2b38149ad"), "name" : "DDD", "mail" : "DDD@google.com", "__v" : 0 }
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[001]
  Learn How JavaScript Assertions Work
  
[内容]
  評価コード内で「Null」か「Null ではない」かを判定する記述を使用する
  
  評価コード
    対象(P1)はNull(ではない)
    ・メソッド「expect」 -> expect(P1).to.be.null;
    ・メソッド「expect」 -> expect(P1).to.not.be.null;
    ・メソッド「assert」 -> assert.isNull(P1);
    ・メソッド「assert」 -> assert.isNotNull(P1);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha01/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha01/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha01",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha01/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('P1 = null', function() {
      it('結果: Null', function() {
        let P1 = null;
        expect(P1).to.be.null;
      });
    });
    // パターン2
    describe('P1 = 110', function() {
      it('結果: Null ではない', function() {
        let P1 = 110;
        expect(P1).to.not.be.null;
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('P1 = null', function() {
      it('結果: Null', function() {
        let P1 = null;
        assert.isNull(P1);
      });
    });
    // パターン2
    describe('P1 = 110', function() {
      it('結果: Null ではない', function() {
        let P1 = 110;
        assert.isNotNull(P1);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha01
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    P1 = null
      ✔ 結果: Null
    P1 = 110
      ✔ 結果: Null ではない
  
  // 単体テスト結果2
  Test - assert
    P1 = null
      ✔ 結果: Null
    P1 = 110
      ✔ 結果: Null ではない
  
  4 passing (9ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[002]
  Test if a Variable or Function is Defined
  
[内容]
  評価コード内で「未定義」か「定義済」かを判定する記述を使用する
  
  評価コード
    対象(P1)は未定義(でない)
    ・メソッド「expect」 -> expect(P1).to.be.undefined;
    ・メソッド「expect」 -> expect(P1).to.not.be.undefined;
    ・メソッド「assert」 -> assert.isUndefined(P1);
    ・メソッド「assert」 -> assert.isDefined(P1);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha02/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha02/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha02
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha02
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha02
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha02",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha02/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('P1', function() {
      it('結果: 未定義', function() {
        let P1;
        expect(P1).to.be.undefined;
      });
    });
    // パターン2
    describe('P1 = 110', function() {
      it('結果: 定義済み', function() {
        let P1 = 110;
        expect(P1).to.not.be.undefined;
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('P1', function() {
      it('結果: 未定義', function() {
        let P1;
        assert.isUndefined(P1);
      });
    });
    // パターン2
    describe('P1 = 110', function() {
      it('結果: 定義済み', function() {
        let P1 = 110;
        assert.isDefined(P1);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha02
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    P1
      ✔ 結果: 未定義
    P1 = 110
      ✔ 結果: 定義済み
  
  // 単体テスト結果2
  Test - assert
    P1
      ✔ 結果: 未定義
    P1 = 110
      ✔ 結果: 定義済み
  
  4 passing (7ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[003]
  Use Assert.isOK and Assert.isNotOK
  
[内容]
  評価コード内で「真(OK)」か「偽(NG)」かを判定する記述を使用する
  
  評価コード
    対象(P1)は真(偽)
    ・メソッド「expect」 -> expect(P1).to.be.ok;
    ・メソッド「expect」 -> expect(P1).to.not.be.ok;
    ・メソッド「assert」 -> assert.isOk(P1);
    ・メソッド「assert」 -> assert.isNotOk(P1);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha03/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha03/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha03
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha03
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha03
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha03",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha03/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('110 === 110', function() {
      it('結果: 真(true)', function() {
        let P1 = 110;
        let P2 = 110;
        expect(P1 === P2).to.be.ok;
      });
    });
    // パターン2
    describe('110 === 120', function() {
      it('結果: 偽(false)', function() {
        let P1 = 110;
        let P2 = 120;
        expect(P1 === P2).to.not.be.ok;
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('110 === 110', function() {
      it('結果: 真(true)', function() {
        let P1 = 110;
        let P2 = 110;
        assert.isOk(P1 === P2);
      });
    });
    // パターン2
    describe('110 === 120', function() {
      it('結果: 偽(false)', function() {
        let P1 = 110;
        let P2 = 120;
        assert.isNotOk(P1 === P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha03
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    110 === 110
      ✔ 結果: 真(true)
    110 === 120
      ✔ 結果: 偽(false)
  
  // 単体テスト結果2
  Test - assert
    110 === 110
      ✔ 結果: 真(true)
    110 === 120
      ✔ 結果: 偽(false)
  
  4 passing (8ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[004]
  Test for Truthiness
  
[内容]
  評価コード内で「真(true)」か「偽(false)」かを判定する記述を使用する
  
  評価コード
    対象(P1)は真(偽)
    ・メソッド「expect」 -> expect(P1).to.be.true;
    ・メソッド「expect」 -> expect(P1).to.be.false;
    ・メソッド「assert」 -> assert.isTrue(P1);
    ・メソッド「assert」 -> assert.isFalse(P1);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha04/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha04/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha04
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha04
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha04
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha04",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha04/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('110 === 110', function() {
      it('結果: 真(true)', function() {
        let P1 = 110;
        let P2 = 110;
        expect(P1 === P2).to.be.true;
      });
    });
    // パターン2
    describe('110 === 120', function() {
      it('結果: 偽(false)', function() {
        let P1 = 110;
        let P2 = 120;
        expect(P1 === P2).to.be.false;
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('110 === 110', function() {
      it('結果: 真(true)', function() {
        let P1 = 110;
        let P2 = 110;
        assert.isTrue(P1 === P2);
      });
    });
    // パターン2
    describe('110 === 120', function() {
      it('結果: 偽(false)', function() {
        let P1 = 110;
        let P2 = 120;
        assert.isFalse(P1 === P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha04
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    110 === 110
      ✔ 結果: 真(true)
    110 === 120
      ✔ 結果: 偽(false)
  
  // 単体テスト結果2
  Test - assert
    110 === 110
      ✔ 結果: 真(true)
    110 === 120
      ✔ 結果: 偽(false)
  
  4 passing (8ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[005]
  Use the Double Equals to Assert Equality
  
[内容]
  評価コード内で比較演算子「==」に相当する記述を使用する
  
  評価コード
    数値(P1)と数値(P2)は等価(でない)
    ・メソッド「expect」 -> expect(P1).to.equal(P2);
    ・メソッド「expect」 -> expect(P1).to.not.equal(P2);
    ・メソッド「assert」 -> assert.equal(P1, P2);
    ・メソッド「assert」 -> assert.notEqual(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha05/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha05/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha05
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha05
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha05
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha05",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha05/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('110 == 110', function() {
      it('結果: 等価', function() {
        let P1 = 110;
        let P2 = 110;
        expect(P1).to.equal(P2);
      });
    });
    // パターン2
    describe('110 != 120', function() {
      it('結果: 非等価', function() {
        let P1 = 110;
        let P2 = 120;
        expect(P1).to.not.equal(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('110 == 110', function() {
      it('結果: 等価', function() {
        let P1 = 110;
        let P2 = 110;
        assert.equal(P1, P2);
      });
    });
    // パターン2
    describe('110 != 120', function() {
      it('結果: 非等価', function() {
        let P1 = 110;
        let P2 = 120;
        assert.notEqual(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha05
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    110 == 110
      ✔ 結果: 等価
    110 != 120
      ✔ 結果: 非等価
  
  // 単体テスト結果2
  Test - assert
    110 == 110
      ✔ 結果: 等価
    110 != 120
      ✔ 結果: 非等価
  
  4 passing (8ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[006]
  Use the Triple Equals to Assert Strict Equality
  
[内容]
  評価コード内で比較演算子「===」に相当する記述を使用する
  
  評価コード
    数値(P1)と数値(P2)は等価(でない)
    ・メソッド「expect」 -> expect(P1).to.deep.equal(P2);
    ・メソッド「expect」 -> expect(P1).to.not.deep.equal(P2);
    ・メソッド「assert」 -> assert.strictEqual(P1, P2);
    ・メソッド「assert」 -> assert.notStrictEqual(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha06/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha06/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha06
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha06
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha06
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha06",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha06/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('110 === 110', function() {
      it('結果: 等価', function() {
        let P1 = 110;
        let P2 = 110;
        expect(P1).to.deep.equal(P2);
      });
    });
    // パターン2
    describe('110 !== 120', function() {
      it('結果: 非等価', function() {
        let P1 = 110;
        let P2 = 120;
        expect(P1).to.not.deep.equal(P2);
      });
    });
  });
  
  describe('Func1 - assert', function() {
    // パターン1
    describe('110 === 110', function() {
      it('結果: 等価', function() {
        let P1 = 110;
        let P2 = 110;
        assert.strictEqual(P1, P2);
      });
    });
    // パターン2
    describe('110 !== 120', function() {
      it('RET', function() {
        let P1 = 110;
        let P2 = 120;
        assert.notStrictEqual(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha06
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    110 === 110
      ✔ 結果: 等価
    110 !== 120
      ✔ 結果: 非等価
  
  // 単体テスト結果2
  Func1 - assert
    110 === 110
      ✔ 結果: 等価
    110 !== 120
      ✔ RET
  
  4 passing (8ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[007]
  Assert Deep Equality with .deepEqual and .notDeepEqual
  
[内容]
  評価コード内でオブジェクト同士を比較する記述を使用する
  
  評価コード
    オブジェクト(OBJ1)とオブジェクト(OBJ2)は同一(でない)
    ・メソッド「expect」 -> expect(OBJ1).to.deep.equal(OBJ2);
    ・メソッド「expect」 -> expect(OBJ1).to.not.deep.equal(OBJ2);
    ・メソッド「assert」 -> assert.deepEqual(OBJ1, OBJ2);
    ・メソッド「assert」 -> assert.notDeepEqual(OBJ1, OBJ2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha07/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha07/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha07
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha07
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha07
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha07",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha07/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('OBJ1 === OBJ2', function() {
      it('結果: 同一', function() {
        let OBJ1 = { key1: 'A', key2: 'B' };
        let OBJ2 = { key1: 'A', key2: 'B' };
        expect(OBJ1).to.deep.equal(OBJ2);
      });
    });
    // パターン2
    describe('OBJ1 !== OBJ2', function() {
      it('結果: 同一でない', function() {
        let OBJ1 = { key1: 'A', key2: 'B' };
        let OBJ2 = { key1: '1', key2: 'B' };
        expect(OBJ1).to.not.deep.equal(OBJ2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('OBJ1 === OBJ2', function() {
      it('結果: 同一', function() {
        let OBJ1 = { key1: 'A', key2: 'B' };
        let OBJ2 = { key1: 'A', key2: 'B' };
        assert.deepEqual(OBJ1, OBJ2);
      });
    });
    // パターン2
    describe('OBJ1 !== OBJ2', function() {
      it('結果: 同一でない', function() {
        let OBJ1 = { key1: 'A', key2: 'B' };
        let OBJ2 = { key1: '1', key2: 'B' };
        assert.notDeepEqual(OBJ1, OBJ2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha07
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    OBJ1 === OBJ2
      ✔ 結果: 同一
    OBJ1 !== OBJ2
      ✔ 結果: 同一でない
  
  // 単体テスト結果2
  Test - assert
    OBJ1 === OBJ2
      ✔ 結果: 同一
    OBJ1 !== OBJ2
      ✔ 結果: 同一でない
  
  4 passing (9ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[008]
  Compare the Properties of Two Elements
  
[内容]
  評価コード内で数値同士を比較する記述を使用する(1)
  
  評価コード
    数値(P1)は数値(P2)より大きい ｰ 数値(P1)は数値(P2)以下
    ・メソッド「expect」 -> expect(P1).to.be.above(P2);
    ・メソッド「expect」 -> expect(P1).to.be.at.most(P2);
    ・メソッド「assert」 -> assert.isAbove(P1, P2);
    ・メソッド「assert」 -> assert.isAtMost(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha08/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha08/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha08
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha08
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha08
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha08",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha08/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('120 > 110', function() {
      it('結果: 120 は 110 より大きい', function() {
        let P1 = 120;
        let P2 = 110;
        expect(P1).to.be.above(P2);
      });
    });
    // パターン2
    describe('110 <= 110', function() {
      it('結果: 110 は 110 以下', function() {
        let P1 = 110;
        let P2 = 110;
        expect(P1).to.be.at.most(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('120 > 110', function() {
      it('結果: 120 は 110 より大きい', function() {
        let P1 = 120;
        let P2 = 110;
        assert.isAbove(P1, P2);
      });
    });
    // パターン2
    describe('110 <= 110', function() {
      it('結果: 110 は 110 以下', function() {
        let P1 = 110;
        let P2 = 110;
        assert.isAtMost(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha08
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    120 > 110
      ✔ 結果: 120 は 110 より大きい
    110 <= 110
      ✔ 結果: 110 は 110 以下
  
  // 単体テスト結果2
  Test - assert
    120 > 110
      ✔ 結果: 120 は 110 より大きい
    110 <= 110
      ✔ 結果: 110 は 110 以下
  
  4 passing (9ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[009]
  Test if One Value is Below or At Least as Large as Another
  
[内容]
  評価コード内で数値同士を比較する記述を使用する(2)
  
  評価コード
    数値(P1)は数値(P2)より小さい ｰ 数値(P1)は数値(P2)以上
    ・メソッド「expect」 -> expect(P1).to.be.below(P2);
    ・メソッド「expect」 -> expect(P1).to.be.at.least(P2);
    ・メソッド「assert」 -> assert.isBelow(P1, P2);
    ・メソッド「assert」 -> assert.isAtLeast(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha09/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha09/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha09
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha09
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha09
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha09",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha09/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('100 < 110', function() {
      it('結果: 100 は 110 より小さい', function() {
        let P1 = 100;
        let P2 = 110;
        expect(P1).to.be.below(P2);
      });
    });
    // パターン2
    describe('110 >= 110', function() {
      it('結果: 110 は 110 以上', function() {
        let P1 = 110;
        let P2 = 110;
        expect(P1).to.be.at.least(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('100 < 110', function() {
      it('結果: 100 は 110 より小さい', function() {
        let P1 = 100;
        let P2 = 110;
        assert.isBelow(P1, P2);
      });
    });
    // パターン2
    describe('110 >= 110', function() {
      it('結果: 110 は 110 以上', function() {
        let P1 = 110;
        let P2 = 110;
        assert.isAtLeast(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha09
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    100 < 110
      ✔ 結果: 100 は 110 より小さい
    110 >= 110
      ✔ 結果: 110 は 110 以上
  
  // 単体テスト結果2
  Test - assert
    100 < 110
      ✔ 結果: 100 は 110 より小さい
    110 >= 110
      ✔ 結果: 110 は 110 以上
  
  4 passing (9ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[010]
  Test if a Value Falls within a Specific Range
  
[内容]
  評価コード内で数値が設定範囲内の記述を使用する
  
  評価コード
    数値(P1)が数値(P2)から範囲(P3)の範囲内にある(ない)
    ・メソッド「expect」 -> expect(P1).to.be.closeTo(P2, P3);
    ・メソッド「expect」 -> expect(P1).not.to.be.closeTo(P2, 10);
    ・メソッド「assert」 -> assert.approximately(P1, P2, 10);
    ・メソッド「assert」 -> 存在しない
    
[確認]
  $ cd $HOME
  $ mkdir -p cha10/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha10/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha10
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha10
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha10
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha10",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha10/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('110 -> 110 - 120 - 130', function() {
      it('結果: 110 は 110 - 130 の範囲', function() {
        let P1 = 110;
        let P2 = 120;
        let P3 = 10;
        expect(P1).to.be.closeTo(P2, P3);
      });
    });
    // パターン2
    describe('131 -> 110 - 120 - 130', function() {
      it('結果: 131 は 110 - 130 の範囲外', function() {
        let P1 = 131;
        let P2 = 120;
        let P3 = 10;
        expect(P1).not.to.be.closeTo(P2, P3);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('110 -> 110 - 120 - 130', function() {
      it('結果: 110 は 110 - 130 の範囲', function() {
        let P1 = 110;
        let P2 = 120;
        let P3 = 10;
        assert.approximately(P1, P2, P3);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha10
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    110 -> 110 - 120 - 130
      ✔ 結果: 110 は 110 - 130 の範囲
    131 -> 110 - 120 - 130
      ✔ 結果: 131 は 110 - 130 の範囲外
  
  // 単体テスト結果2
  Test - assert
    110 -> 110 - 120 - 130
      ✔ 結果: 110 は 110 - 130 の範囲
  
  3 passing (10ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[011]
  Test if a Value is an Array
  
[内容]
  評価コード内で対象が配列か否かの記述を使用する
  
  評価コード
    対象(P1)が配列(でない)
    ・メソッド「expect」 -> expect(P1).to.be.an('array');
    ・メソッド「expect」 -> expect(P1).to.not.be.an('array');
    ・メソッド「assert」 -> assert.isArray(P1);
    ・メソッド「assert」 -> assert.isNotArray(P1);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha11/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha11/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha11
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha11
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha11
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha11",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha11/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('[110, 120, 130]', function() {
      it('結果: 配列', function() {
        let P1 = [110, 120, 130];
        expect(P1).to.be.an('array');
      });
    });
    // パターン2
    describe('110', function() {
      it('結果: 配列でない', function() {
        let P1 = 110;
        expect(P1).to.not.be.an('array');
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('[110, 120, 130]', function() {
      it('結果: 配列', function() {
        let P1 = [110, 120, 130];
        assert.isArray(P1);
      });
    });
    // パターン2
    describe('110', function() {
      it('結果: 配列でない', function() {
        let P1 = 110;
        assert.isNotArray(P1);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha11
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    [110, 120, 130]
      ✔ 結果: 配列
    110
      ✔ 結果: 配列でない
  
  // 単体テスト結果2
  Test - assert
    [110, 120, 130]
      ✔ 結果: 配列
    110
      ✔ 結果: 配列でない
  
  4 passing (10ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[012]
  Test if an Array Contains an Item
  
[内容]
  評価コード内で対象が配列に含まれているか否かの記述を使用する
  
  評価コード
    対象(P1)が配列(P2)に含まれている(いない)
    ・メソッド「expect」 -> expect(P1).to.be.an('array').that.includes(P2);
    ・メソッド「expect」 -> expect(P1).to.not.be.an('array').that.includes(P2);
    ・メソッド「assert」 -> assert.include(P1, P2);
    ・メソッド「assert」 -> assert.notInclude(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha12/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha12/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha12
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha12
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha12
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha12",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha12/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('120 -> [110, 120, 130]', function() {
      it('結果: 含む', function() {
        let P1 = [110, 120, 130];
        let P2 = 120;
        expect(P1).to.be.an('array').that.includes(P2);
      });
    });
    // パターン2
    describe('100 -> [110, 120, 130]', function() {
      it('結果: 含まない', function() {
        let P1 = [110, 120, 130];
        let P2 = 100;
        expect(P1).to.be.an('array').that.not.include(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('120 -> [110, 120, 130]', function() {
      it('結果: 含む', function() {
        let P1 = [110, 120, 130];
        let P2 = 120;
        assert.include(P1, P2);
      });
    });
    // パターン2
    describe('100 -> [110, 120, 130]', function() {
      it('結果: 含まない', function() {
        let P1 = [110, 120, 130];
        let P2 = 100;
        assert.notInclude(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha12
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    120 -> [110, 120, 130]
      ✔ 結果: 含む
    100 -> [110, 120, 130]
      ✔ 結果: 含まない
  
  // 単体テスト結果2
  Test - assert
    120 -> [110, 120, 130]
      ✔ 結果: 含む
    100 -> [110, 120, 130]
      ✔ 結果: 含まない
  
  4 passing (10ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[013]
  Test if a Value is a String
  
[内容]
  評価コード内で対象が文字列か否かの記述を使用する
  
  評価コード
    対象(P1)が文字列(でない)
    ・メソッド「expect」 -> expect(P1).to.be.a('string');
    ・メソッド「expect」 -> expect(P1).to.not.be.a('string');
    ・メソッド「assert」 -> assert.isString(P1);
    ・メソッド「assert」 -> assert.isNotString(P1);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha13/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha13/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha13
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha13
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha13
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha13",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha13/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('Hello', function() {
      it('結果: 文字列', function() {
        let P1 = 'Hello';
        expect(P1).to.be.a('string');
      });
    });
    // パターン2
    describe('100', function() {
      it('結果: 文字列でない', function() {
        let P1 = 100;
        expect(P1).not.to.be.a('string');
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('Hello', function() {
      it('結果: 文字列', function() {
        let P1 = 'Hello';
        assert.isString(P1);
      });
    });
    // パターン2
    describe('100', function() {
      it('結果: 文字列でない', function() {
        let P1 = 100;
        assert.isNotString(P1);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha13
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    Hello
      ✔ 結果: 文字列
    100
      ✔ 結果: 文字列でない
  
  // 単体テスト結果2
  Test - assert
    Hello
      ✔ 結果: 文字列
    100
      ✔ 結果: 文字列でない
  
  4 passing (10ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[014]
  Test if a String Contains a Substring
  
[内容]
  評価コード内で文字列(P2)が文字列(P1)に含まれているか否かの記述を使用する
  
  評価コード
    文字列(P2)が文字列(P1)に含まれている(いない)
    ・メソッド「expect」 -> expect(P1).to.be.a('string').that.includes(P2);
    ・メソッド「expect」 -> expect(P1).to.not.be.a('string').that.includes(P2);
    ・メソッド「assert」 -> assert.include(P1, P2);
    ・メソッド「assert」 -> assert.notInclude(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha14/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha14/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha14
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha14
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha14
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha14",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha14/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('CCC -> AAABBBCCCDDDEEE', function() {
      it('結果: 含む', function() {
        let P1 = 'AAABBBCCCDDDEEE';
        let P2 = 'CCC';
        expect(P1).to.be.a('string').that.includes(P2);
      });
    });
    // パターン2
    describe('ZZZ -> AAABBBCCCDDDEEE', function() {
      it('結果: 含まない', function() {
        let P1 = 'AAABBBCCCDDDEEE';
        let P2 = 'ZZZ';
        expect(P1).to.be.a('string').that.not.include(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('CCC -> AAABBBCCCDDDEEE', function() {
      it('結果: 含む', function() {
        let P1 = 'AAABBBCCCDDDEEE';
        let P2 = 'CCC';
        assert.include(P1, P2);
      });
    });
    // パターン2
    describe('ZZZ -> AAABBBCCCDDDEEE', function() {
      it('結果: 含まない', function() {
        let P1 = 'AAABBBCCCDDDEEE';
        let P2 = 'ZZZ';
        assert.notInclude(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha14
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    CCC -> AAABBBCCCDDDEEE
      ✔ 結果: 含む
    ZZZ -> AAABBBCCCDDDEEE
      ✔ 結果: 含まない
  
  // 単体テスト結果2
  Test - assert
    CCC -> AAABBBCCCDDDEEE
      ✔ 結果: 含む
    ZZZ -> AAABBBCCCDDDEEE
      ✔ 結果: 含まない
  
  4 passing (10ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[015]
  Use Regular Expressions to Test a String
  
[内容]
  評価コード内で文字列(P1)が正規表現(P2)に合致するか否かの記述を使用する
  
  評価コード
    文字列(P1)が正規表現(P2)に合致する(しない)
    ・メソッド「expect」 -> expect(P1).to.match(P2);
    ・メソッド「expect」 -> expect(P1).to.not.match(P2);
    ・メソッド「assert」 -> assert.match(P1, P2);
    ・メソッド「assert」 -> assert.notMatch(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha15/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha15/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha15
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha15
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha15
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha15",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha15/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('CCC -> AAABBBCCCDDDEEE', function() {
      it('結果: 合致する', function() {
        let P1 = 'AAABBBCCCDDDEEE';
        let P2 = /CCC/;
        expect(P1).to.match(P2);
      });
    });
    // パターン2
    describe('ZZZ -> AAABBBCCCDDDEEE', function() {
      it('結果: 合致しない', function() {
        let P1 = 'AAABBBCCCDDDEEE';
        let P2 = /ZZZ/;
        expect(P1).to.not.match(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('CCC -> AAABBBCCCDDDEEE', function() {
      it('結果: 合致する', function() {
        let P1 = 'AAABBBCCCDDDEEE';
        let P2 = /CCC/;
        assert.match(P1, P2);
      });
    });
    // パターン2
    describe('ZZZ -> AAABBBCCCDDDEEE', function() {
      it('結果: 合致しない', function() {
        let P1 = 'AAABBBCCCDDDEEE';
        let P2 = /ZZZ/;
        assert.notMatch(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha15
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    CCC -> AAABBBCCCDDDEEE
      ✔ 結果: 合致する
    ZZZ -> AAABBBCCCDDDEEE
      ✔ 結果: 合致しない
  
  // 単体テスト結果2
  Test - assert
    CCC -> AAABBBCCCDDDEEE
      ✔ 結果: 合致する
    ZZZ -> AAABBBCCCDDDEEE
      ✔ 結果: 合致しない
  
  4 passing (9ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[016]
  Test if an Object has a Property
  
[内容]
  評価コード内でオブジェクト(P1)に属性(P2)に存在するか否かの記述を使用する
  
  評価コード
    オブジェクト(P1)に属性(P2)が存在する(しない)
    ・メソッド「expect」 -> expect(P1).to.have.property(P2);
    ・メソッド「expect」 -> expect(P1).to.not.have.property(P2);
    ・メソッド「assert」 -> assert.property(P1, P2);
    ・メソッド「assert」 -> assert.notProperty(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha16/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha16/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha16
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha16
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha16
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha16",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha16/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('key2 -> OBJ', function() {
      it('結果: 属性が存在する', function() {
        let P1 = { key1: 'A', key2: 'B' };
        let P2 = 'key2';
        expect(P1).to.have.property(P2);
      });
    });
    // パターン2
    describe('key3 -> OBJ', function() {
      it('結果: 属性が存在しない', function() {
        let P1 = { key1: 'A', key2: 'B' };
        let P2 = 'key3';
        expect(P1).to.not.have.property(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('key2 -> OBJ', function() {
      it('結果: 属性が存在する', function() {
        let P1 = { key1: 'A', key2: 'B' };
        let P2 = 'key2';
        assert.property(P1, P2);
      });
    });
    // パターン2
    describe('key3 -> OBJ', function() {
      it('結果: 属性が存在しない', function() {
        let P1 = { key1: 'A', key2: 'B' };
        let P2 = 'key3';
        assert.notProperty(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha16
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    key2 -> OBJ
      ✔ 結果: 属性が存在する
    key3 -> OBJ
      ✔ 結果: 属性が存在しない
  
  // 単体テスト結果2
  Test - assert
    key2 -> OBJ
      ✔ 結果: 属性が存在する
    key3 -> OBJ
      ✔ 結果: 属性が存在しない
  
  4 passing (9ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[017]
  Test if a Value is of a Specific Data Structure Type
  
[内容]
  評価コード内でデータ(P1)とデータ型(P2)を比較する記述を使用する
  
  評価コード
    データ(P1)とデータ型(P2)が合致する(しない)
    ・メソッド「expect」 -> expect(P1).to.be.a(P2);
    ・メソッド「expect」 -> expect(P1).to.not.be.a(P2);
    ・メソッド「assert」 -> assert.typeOf(P1, P2);
    ・メソッド「assert」 -> assert.notTypeOf(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha17/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha17/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha17
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha17
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha17
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha17",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha17/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  describe('Test - expect', function() {
    // パターン1
    describe('110 === Number', function() {
      it('結果: 110 === Number', function() {
        let P1 = 110;
        let P2 = 'number';
        expect(P1).to.be.a(P2);
      });
    });
    // パターン2
    describe('110 !== String', function() {
      it('結果: 110 !== String', function() {
        let P1 = 110;
        let P2 = 'string';
        expect(P1).to.not.be.a(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('110 === Number', function() {
      it('結果: 110 === Number', function() {
        let P1 = 110;
        let P2 = 'number';
        assert.typeOf(P1, P2);
      });
    });
    // パターン2
    describe('110 !== String', function() {
      it('結果: 110 !== String', function() {
        let P1 = 110;
        let P2 = 'string';
        assert.notTypeOf(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha17
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    110 === Number
      ✔ 結果: 110 === Number
    110 !== String
      ✔ 結果: 110 !== String
  
  // 単体テスト結果2
  Test - assert
    110 === Number
      ✔ 結果: 110 === Number
    110 !== String
      ✔ 結果: 110 !== String
  
  4 passing (9ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[018]
  Test if an Object is an Instance of a Constructor
  
[内容]
  評価コード内で変数(P1)はオブジェクト(P2)のインスタンスか否かを判定する
  
  評価コード
    変数(P1)はオブジェクト(P2)のインスタンス(ではない)
    ・メソッド「expect」 -> expect(P1).to.be.an.instanceOf(P2);
    ・メソッド「expect」 -> expect(P1).to.not.be.an.instanceOf(P2);
    ・メソッド「assert」 -> assert.instanceOf(P1, P2);
    ・メソッド「assert」 -> assert.notInstanceOf(P1, P2);
  
[確認]
  $ cd $HOME
  $ mkdir -p cha18/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 今回は関数を作成しないが一応、作成した
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha18/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha18
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha18
  $ npm install mocha chai --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha18
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha18",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",  // 確認
      "mocha": "^9.0.3"  // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha18/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const expect = require('chai').expect;
  const assert = require('chai').assert;
  
  // 関数オブジェクト
  function FuncA() {}
  function FuncB() {}
  
  describe('Test - expect', function() {
    // パターン1
    describe('Func1 is instance of FuncA', function() {
      it('結果: True', function() {
        let P1 = new FuncA();
        let P2 = FuncA;
        expect(P1).to.be.an.instanceOf(P2);
      });
    });
    // パターン2
    describe('Func1 is instance of FuncA', function() {
      it('結果: False', function() {
        let P1 = new FuncA();
        let P2 = FuncB;
        expect(P1).to.not.be.an.instanceOf(P2);
      });
    });
  });
  
  describe('Test - assert', function() {
    // パターン1
    describe('Func1 is instance of FuncA', function() {
      it('結果: True', function() {
        let P1 = new FuncA();
        let P2 = FuncA;
        assert.instanceOf(P1, P2);
      });
    });
    // パターン2
    describe('Func1 is instance of FuncA', function() {
      it('結果: False', function() {
        let P1 = new FuncA();
        let P2 = FuncB;
        assert.notInstanceOf(P1, P2);
      });
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha18
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果1
  Test - expect
    Func1 is instance of FuncA
      ✔ 結果: True
    Func1 is instance of FuncA
      ✔ 結果: False
  
  // 単体テスト結果2
  Test - assert
    Func1 is instance of FuncA
      ✔ 結果: True
    Func1 is instance of FuncA
      ✔ 結果: False
  
  4 passing (9ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[019]
  Run Functional Tests on API Endpoints using Chai-HTTP
  
[内容]
  API試験(1)
  
[確認]
  $ cd $HOME
  $ mkdir -p cha19/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha19/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha19
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha19
  $ npm install mocha chai express request --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha19
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha19",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",      // 確認
      "express": "^4.17.1",  // 確認
      "mocha": "^9.0.3",     // 確認
      "request": "^2.88.2"   // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha19/app
  $ vi server.js
  
  コマンドの実行結果
  --------------------------------------------------
  // モジュールのインポート
  let express = require('express');
  
  // インスタンス生成
  let app = express();
  
  // GET - /name/:name
  app.get('/name/:name', (req, res) => res.send('Hello ' + req.params.name));
  
  // アプリケーション起動
  app.listen(3000, () => console.log('Listening on port 3000'));
  --------------------------------------------------
  
  $ cd $HOME/cha19/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const chai = require('chai');
  const expect = chai.expect;
  const assert = chai.assert;
  const request = require('request');
  
  // API試験(1)
  describe('GET - /name/:name', function() {
    
    // テスト項目を「expect」で記述
    describe('Expect', function() {
      let URL = 'http://localhost:3000/name/AAA';
      it('status: 200', function(done) {
        request(URL, function(err, res, body) {
          expect(res.statusCode).to.equal(200);
          done();
        });
      });
      it('return: Hello AAA', function(done) {
        request(URL, function(err, res, body) {
          expect(body).to.equal('Hello AAA');
          done();
        });
      });
    });
    
    // テスト項目を「assert」で記述
    describe('Assert', function() {
      let URL = 'http://localhost:3000/name/BBB';
      it('status: 200', function(done) {
        request(URL, function(err, res, body) {
          assert.equal(res.statusCode, 200);
          done();
        });
      });
      it('return: Hello BBB', function(done) {
        request(URL, function(err, res, body) {
          assert.equal(body, 'Hello BBB');
          done();
        });
      });
    });
    
  });
  --------------------------------------------------
  
  $ cd $HOME/cha19
  $ node app/server.js
  
  コマンドの実行結果
  --------------------------------------------------
  Listening on port 3000
  
  ■ <- 完了後に「Ctrl + C」で停止
  --------------------------------------------------
  
  $ cd $HOME/cha19 <- 別の端末から実行
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果
  GET - /name/:name
    Expect
      ✔ status: 200
      ✔ return: Hello AAA
    Assert
      ✔ status: 200
      ✔ return: Hello BBB
  
  4 passing (39ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[020]
  Run Functional Tests on API Endpoints using Chai-HTTP II
  
[内容]
  API試験(2)
  
[確認]
  $ cd $HOME
  $ mkdir -p cha20/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha20/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha20
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha20
  $ npm install mocha chai express request --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha20
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha20",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "chai": "^4.3.4",      // 確認
      "express": "^4.17.1",  // 確認
      "mocha": "^9.0.3",     // 確認
      "request": "^2.88.2"   // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha20/app
  $ vi server.js
  
  コマンドの実行結果
  --------------------------------------------------
  // モジュールのインポート
  let express = require('express');
  
  // インスタンス生成
  let app = express();
  
  // GET - /
  app.get('/', (req, res) => res.send('Hello ' + req.query.name));
  
  // アプリケーション起動
  app.listen(3000, () => console.log('Listening on port 3000'));
  --------------------------------------------------
  
  $ cd $HOME/cha20/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const chai = require('chai');
  const expect = chai.expect;
  const assert = chai.assert;
  const request = require('request');
  
  // API試験(2)
  describe('GET - /?name=[name]', function() {
    
    // テスト項目を「expect」で記述
    describe('Expect', function() {
      let URL = 'http://localhost:3000/?name=AAA';
      it('status: 200', function(done) {
        request(URL, function(err, res, body) {
          expect(res.statusCode).to.equal(200);
          done();
        });
      });
      it('return: Hello AAA', function(done) {
        request(URL, function(err, res, body) {
          expect(body).to.equal('Hello AAA');
          done();
        });
      });
    });
    
    // テスト項目を「assert」で記述
    describe('Assert', function() {
      let URL = 'http://localhost:3000/?name=BBB';
      it('status: 200', function(done) {
        request(URL, function(err, res, body) {
          assert.equal(res.statusCode, 200);
          done();
        });
      });
      it('return: Hello BBB', function(done) {
        request(URL, function(err, res, body) {
          assert.equal(body, 'Hello BBB');
          done();
        });
      });
    });
    
  });
  --------------------------------------------------
  
  $ cd $HOME/cha20
  $ node app/server.js
  
  コマンドの実行結果
  --------------------------------------------------
  Listening on port 3000
  
  ■ <- 完了後に「Ctrl + C」で停止
  --------------------------------------------------
  
  $ cd $HOME/cha20 <- 別の端末から実行
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果
  GET - /?name=[name]
    Expect
      ✔ status: 200
      ✔ return: Hello AAA
    Assert
      ✔ status: 200
      ✔ return: Hello BBB
  
  4 passing (54ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[021]
  Run Functional Tests on an API Response using Chai-HTTP III - PUT method
  
[内容]
  API試験(3)
  
[確認]
  $ cd $HOME
  $ mkdir -p cha21/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha21/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha21
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha21
  $ npm install body-parser mocha chai express request --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha21
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha21",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "body-parser": "^1.19.0",  // 確認
      "chai": "^4.3.4",          // 確認
      "express": "^4.17.1",      // 確認
      "mocha": "^9.0.3",         // 確認
      "request": "^2.88.2"       // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha21/app
  $ vi server.js
  
  コマンドの実行結果
  --------------------------------------------------
  // モジュールのインポート
  let express = require('express');
  let parser = require('body-parser');
  
  // インスタンス生成
  let app = express();
  
  // JSON
  app.use(parser.json());
  
  // PUT - /
  app.put('/', (req, res) => {
    let data = {};
    if (req.body && req.body.key) {
      switch(req.body.key) {
        case 'A': data = { key1: 'AAA', key2: 100 }; break;
        case 'B': data = { key1: 'BBB', key2: 200 }; break;
        case 'C': data = { key1: 'CCC', key2: 300 }; break;
        default : data = { key1: '---', key2: 999 }; break;
      }
    }
    res.json(data);
  });
  
  // アプリケーション起動
  app.listen(3000, () => console.log('Listening on port 3000'));
  --------------------------------------------------
  
  $ cd $HOME/cha21
  $ node app/server.js
  
  コマンドの実行結果
  --------------------------------------------------
  Listening on port 3000
  
  ■ <- 完了後に「Ctrl + C」で停止
  --------------------------------------------------
  
  $ cd $HOME/cha21
  $ curl -X PUT -H "Content-Type: application/json" -d '{ "key": "A" }' http://localhost:3000/
  $ curl -X PUT -H "Content-Type: application/json" -d '{ "key": "B" }' http://localhost:3000/
  $ curl -X PUT -H "Content-Type: application/json" -d '{ "key": "C" }' http://localhost:3000/
  $ curl -X PUT -H "Content-Type: application/json" -d '{ "key": "Z" }' http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  // コマンド「curl」からリクエスト「PUT」でJSONデータを送信して返信を受け取った
  
  {"key1":"AAA","key2":100}
  {"key1":"BBB","key2":200}
  {"key1":"CCC","key2":300}
  {"key1":"---","key2":999}
  --------------------------------------------------
  
  $ cd $HOME/cha21/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  const chai = require('chai');
  const expect = chai.expect;
  const assert = chai.assert;
  const request = require('request');
  
  // API試験(3)
  describe('PUT - /', function() {
    
    // テスト項目を「expect」で記述
    describe('Expect', function() {
      let OBJ = {
        url: 'http://localhost:3000/',
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ key: 'A' })
      };
      it('status: 200', function(done) {
        request(OBJ, function(err, res, body) {
          expect(res.statusCode).to.equal(200);
          done();
        });
      });
      it('key1: AAA', function(done) {
        request(OBJ, function(err, res, body) {
          let TMP = JSON.parse(res.body);
          expect(TMP.key1).to.equal('AAA');
          done();
        });
      });
      it('key2: 100', function(done) {
        request(OBJ, function(err, res, body) {
          let TMP = JSON.parse(res.body);
          expect(TMP.key2).to.equal(100);
          done();
        });
      });
    });
    
    // テスト項目を「assert」で記述
    describe('Assert', function() {
      let OBJ = {
        url: 'http://localhost:3000/',
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ key: 'A' })
      };
      it('status: 200', function(done) {
        request(OBJ, function(err, res, body) {
          assert.equal(res.statusCode, 200);
          done();
        });
      });
      it('key1: AAA', function(done) {
        request(OBJ, function(err, res, body) {
          let TMP = JSON.parse(res.body);
          assert.equal(TMP.key1, 'AAA');
          done();
        });
      });
      it('key2: 100', function(done) {
        request(OBJ, function(err, res, body) {
          let TMP = JSON.parse(res.body);
          assert.equal(TMP.key2, 100);
          done();
        });
      });
    });
    
  });
  --------------------------------------------------
  
  $ cd $HOME/cha21
  $ node app/server.js
  
  コマンドの実行結果
  --------------------------------------------------
  Listening on port 3000
  
  ■ <- 完了後に「Ctrl + C」で停止
  --------------------------------------------------
  
  $ cd $HOME/cha21 <- 別の端末から実行
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // 単体テスト結果
  PUT - /
    Expect
      ✔ status: 200 (51ms)
      ✔ key1: AAA
      ✔ key2: 100
    Assert
      ✔ status: 200
      ✔ key1: AAA
      ✔ key2: 100
  
  6 passing (80ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[022]
  Run Functional Tests on an API Response using Chai-HTTP IV - PUT method
  
[内容]
  上記「21」の復習
  
[確認]
  上記「21」を参照
  
================================================================================
[023]
  Simulate Actions Using a Headless Browser
  
[内容]
  ヘッドレスブラウザ
    画面(GUI)の存在しないブラウザ
  
  モジュール「Zombie」
    ヘッドレスブラウザを生成して画面(GUI)上の入力やボタン押下時や押下後の画面要素をバックグラウンドでテスト可能
  
[確認]
  $ cd $HOME
  $ mkdir -p cha23/views
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha23/app
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME
  $ mkdir -p cha23/test
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/cha23
  $ npm init
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ファイル「package.json」が作成される
  --------------------------------------------------
  
  $ cd $HOME/cha23
  $ npm install body-parser mocha chai express request zombie --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ディレクトリ「node_modules」内にインストール、ファイル「package.json」に依存関係が記述される
  --------------------------------------------------
  
  $ cd $HOME/cha23
  $ vi package.json
  
  コマンドの実行結果
  --------------------------------------------------
  {
    "name": "cha23",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"  // 修正前
      "test": "mocha --reporter spec"                        // 修正後
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "body-parser": "^1.19.0",  // 確認
      "chai": "^4.3.4",          // 確認
      "express": "^4.17.1",      // 確認
      "mocha": "^9.0.3",         // 確認
      "request": "^2.88.2"       // 確認
      "zombie": "^6.1.4"         // 確認
    }
  }
  --------------------------------------------------
  
  $ cd $HOME/cha23/views
  $ vi index.ejs
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html>
  <head>
    <meta charset="utf-8">
    <title>Zombie Test01</title>
  </head>
  <body>
    <style>
      form, p { text-align: center; }
      p { font-size: 20px; }
    </style>
    <form action='/key' method='POST'>
      <input type='text' id='key' name='key'>
      <button type='submit' id='submit'>Submit</button>
    </form>
    <hr>
    <div>
      <p id='P1'><%-content1 %></p>
      <p id='P2'><%-content2 %></p>
    </div>
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/cha23/app
  $ vi server.js
  
  コマンドの実行結果
  --------------------------------------------------
  // モジュールのインポート
  let express = require('express');
  let parser = require('body-parser');
  
  // インスタンス生成
  let app = express();
  
  // テンプレートエンジン「EJS」を使用
  app.set('view engine', 'ejs');
  
  // エンコード方式
  app.use(parser.urlencoded({ extended: false }));
  
  // GET - /
  app.get('/', (req, res) => {
    let data = { content1: '', content2: '' };
    res.render('index.ejs', data);
  });
  
  // POST - /key
  app.post('/key', (req, res) => {
    console.log(`${req.body.key} が送信されました`)
    let data = {};
    switch(req.body.key) {
      case 'A': data = { content1: 'AAA', content2: '100' }; break;
      case 'B': data = { content1: 'BBB', content2: '200' }; break;
      case 'C': data = { content1: 'CCC', content2: '300' }; break;
      default : data = { content1: '---', content2: '999' }; break;
    }
    res.render('index.ejs', data);
  });
  
  // アプリケーション起動
  app.listen(3000, () => console.log('Listening on port 3000'));
  --------------------------------------------------
  
  $ cd $HOME/cha23/test
  $ vi func.js
  
  コマンドの実行結果
  --------------------------------------------------
  // モジュールのインポート
  const Browser = require('zombie');
  const chai = require('chai');
  const expect = chai.expect;
  const assert = chai.assert;
  
  // 接続先
  Browser.localhost('localhost', 3000);
  
  // ヘッドレスブラウザの生成
  const browser = new Browser();
  
  // API試験準備
  before(function(done) {
    browser.visit('/', done);
  });
  
  // API試験(1)
  describe('Submit key=A to API', function() {
    before(function(done) {
      browser
      .fill('#key', 'A')  // Promiseを返す
      .then(() => browser.pressButton('#submit', done));
    });
    it('It should be successful', function() {
      browser.assert.success();
    });
    it('P1 should be AAA', function() {
      expect(browser.text('#P1')).to.equal('AAA');  // expect
    });
    it('P2 should be 100', function() {
      expect(browser.text('#P2')).to.equal('100');  // expect
    });
  });
  
  // API試験(2)
  describe('Submit key=B to API', function() {
    before(function(done) {
      browser
      .fill('#key', 'B')  // Promiseを返す
      .then(() => browser.pressButton('#submit', done));
    });
    it('It should be successful', function() {
      browser.assert.success();
    });
    it('P1 should be BBB', function() {
      assert.equal(browser.text('#P1'), 'BBB');  // assert
    });
    it('P2 should be 200', function() {
      assert.equal(browser.text('#P2'), '200');  // assert
    });
  });
  --------------------------------------------------
  
  $ cd $HOME/cha23
  $ node app/server.js
  
  コマンドの実行結果
  --------------------------------------------------
  Listening on port 3000
  A が送信されました
  B が送信されました
  
  ■ <- 完了後に「Ctrl + C」で停止
  --------------------------------------------------
  
  $ cd $HOME/cha23 <- 別の端末から実行
  $ npm test
  
  コマンドの実行結果
  --------------------------------------------------
  > cha01@1.0.0 test
  > mocha --reporter spec
  
  // テスト結果(1)
  Submit key=A to API
    ✔ It should be successful
    ✔ P1 should be AAA
    ✔ P2 should be 100
  
  // テスト結果(2)
  Submit key=B to API
    ✔ It should be successful
    ✔ P1 should be BBB
    ✔ P2 should be 200
  
  6 passing (185ms)
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[024]
  Run Functional Tests using a Headless Browser
  
[内容]
  上記「23」の復習
  
[確認]
  上記「23」を参照
  
================================================================================
[025]
  Run Functional Tests using a Headless Browser II
  
[内容]
  上記「23」の復習
  
[確認]
  上記「23」を参照
  
================================================================================
