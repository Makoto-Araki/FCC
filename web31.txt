================================================================================
[X01] [SQLite] コマンドライン基本操作
[X02] [MongoDB] コマンドライン基本操作
[001] Install and Set Up Mongoose
[002] Create a Model
[003] Create and Save a Record of a Model
[004] Create Many Records with model.create()
[005] Use model.find() to Search Your Database
[006] Use model.findOne() to Return a Single Matching Document from Your Database
[007] Use model.findById() to Search Your Database By _id
[008] Perform Classic Updates by Running Find, Edit, then Save
[009] Perform New Updates on a Document Using model.findOneAndUpdate()
[010] Delete One Document Using model.findByIdAndRemove
[011] Delete Many Documents with model.remove()
[012] Chain Search Query Helpers to Narrow Search Results
================================================================================
[X01]
  [SQLite] コマンドライン基本操作
  
[内容]
  [SQLite] コマンドライン基本操作
  
[確認]
  $ cd $HOME
  $ which sqlite3
  
  コマンドの実行結果
  --------------------------------------------------
  /usr/bin/sqlite3
  --------------------------------------------------
  
  $ cd $HOME
  $ sqlite3 sample.sqlite3 (ローカルDB「sample」を作成ならびに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > テーブル作成
  > create table Person (
  >   id integer,
  >   name text,
  >   mail text
  > );
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > テーブル一覧
  > .tables
  
  コマンドの実行結果
  --------------------------------------------------
  Person
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values (1, 'AAA', 'AAA@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values (2, 'BBB', 'BBB@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード登録
  > insert into Person values (3, 'CCC', 'CCC@google.com');
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  1 | AAA | AAA@google.com
  2 | BBB | BBB@google.com
  3 | CCC | CCC@google.com
  --------------------------------------------------
  
  > レコード一覧(検索条件を指定)
  > select * from Person where id = 1;
  
  コマンドの実行結果
  --------------------------------------------------
  1 | AAA | AAA@google.com
  --------------------------------------------------
  
  > レコード一覧(複数の検索条件を論理演算子で指定)
  > select * from Person where id = 1 or id = 2;
  
  コマンドの実行結果
  --------------------------------------------------
  1 | AAA | AAA@google.com
  2 | BBB | BBB@google.com
  --------------------------------------------------
  
  > レコード更新
  > update Person set mail = 'AAA@yahoo.co.jp' where id = 1;
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  1 | AAA | AAA@yahoo.co.jp  // 更新
  2 | BBB | BBB@google.com
  3 | CCC | CCC@google.com
  --------------------------------------------------
  
  > レコード削除
  > delete from Person where id = 1;
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > レコード一覧
  > select * from Person;
  
  コマンドの実行結果
  --------------------------------------------------
  2 | BBB | BBB@google.com
  3 | CCC | CCC@google.com
  --------------------------------------------------
  
  > テーブル削除
  > drop table Person;
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > テーブル一覧
  > .tables
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > シェルを抜ける
  > .exit
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[X02]
  [MongoDB] コマンドライン基本操作
  
[内容]
  [MongoDB] コマンドライン基本操作
  
[確認]
  $ cd $HOME
  $ sudo yum -y install mongodb-org
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME
  $ sudo systemctl disable mongod
  
  コマンドの実行結果
  --------------------------------------------------
  Removed symlink /etc/systemd/system/multi-user.target.wants/mongod.service.
  --------------------------------------------------
  
  $ cd $HOME/database => 専用ディレクトリ作成
  $ mongod --nojournal --noprealloc --dbpath ./ (ローカルDB作成)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME
  $ mongo (ローカルDBに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'AAA', mail : 'AAA@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'BBB', mail : 'BBB@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'CCC', mail : 'CCC@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > データベース一覧
  > show dbs
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  testdb  0.000GB  // ドキュメント作成時点でデータベース一覧に表示される
  --------------------------------------------------
  
  > コレクション一覧
  > show collections
  
  コマンドの実行結果
  --------------------------------------------------
  Person
  --------------------------------------------------
  
  > ドキュメント一覧(検索条件を指定しない)
  > db.Person.find()
  
  コマンドの実行結果
  --------------------------------------------------
  { "_id" : ObjectId("62dd170fe94cb049b119d89a"), "name" : "AAA", "mail" : "AAA@google.com" }
  { "_id" : ObjectId("62dd1721e94cb049b119d89b"), "name" : "BBB", "mail" : "BBB@google.com" }
  { "_id" : ObjectId("62dd1730e94cb049b119d89c"), "name" : "CCC", "mail" : "CCC@google.com" }
  --------------------------------------------------
  
  > ドキュメント一覧(検索条件を指定)
  > db.Person.find( { name: 'AAA' } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "_id" : ObjectId("62dd170fe94cb049b119d89a"), "name" : "AAA", "mail" : "AAA@google.com" }
  --------------------------------------------------
  
  > ドキュメント一覧(検索条件を比較演算子で指定)
  > db.Person.find( { name: { $eq: 'AAA' } } )
  
  コマンドの実行結果
  --------------------------------------------------
  比較演算子
    1. == : $eq
    2. != : $ne
    3. >  : $gt
    4. >= : $gte
    5. <  : $lt
    6. <= : $lte
    
  { "_id" : ObjectId("62dd170fe94cb049b119d89a"), "name" : "AAA", "mail" : "AAA@google.com" }
  --------------------------------------------------
  
  > ドキュメント一覧(複数の検索条件を論理演算子で指定)
  > db.Person.find(
  >   { 
  >     $or: [
  >       { name: 'AAA' },
  >       { name: 'BBB' }
  >     ]
  >   }
  > )
  
  コマンドの実行結果
  --------------------------------------------------
  論理演算子
    1. or  : $or
    2. and : $and
  
  { "_id" : ObjectId("62dd170fe94cb049b119d89a"), "name" : "AAA", "mail" : "AAA@google.com" }
  { "_id" : ObjectId("62dd1721e94cb049b119d89b"), "name" : "BBB", "mail" : "BBB@google.com" }
  --------------------------------------------------
  
  > ドキュメント一覧(表示可否を指定)
  > db.Person.find( {}, { _id: 0 } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "AAA", "mail" : "AAA@google.com" }
  { "name" : "BBB", "mail" : "BBB@google.com" }
  { "name" : "CCC", "mail" : "CCC@google.com" }
  --------------------------------------------------
  
  > ドキュメント一覧(表示件数を指定)
  > db.Person.find( {}, { _id: 0 } ).limit(2)
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "AAA", "mail" : "AAA@google.com" }
  { "name" : "BBB", "mail" : "BBB@google.com" }
  --------------------------------------------------
  
  > ドキュメント更新(挿入)
  > db.Person.update(
  >   { name: { $eq: 'DDD' } },              // 更新条件
  >   { $set: { mail: 'DDD@google.com' } },  // 更新内容
  >   true                                   // 更新または挿入(true), 更新のみ(false)
  > )
  
  コマンドの実行結果
  --------------------------------------------------
  更新演算子(Update Filter Operator)
    1. $set         : フィールドの値を指定した値で更新
    2. $inc         : フィールドの値を指定した値で増減
    3. $rename      : フィールド名を変更
    4. $setOnInsert : 第三引数が「true」で挿入「Insert」時のみフィールドの値を指定
    5. $unset       : フィールドを削除
    6. $currentDate : 現在時刻を設定
  
  WriteResult({
    "nMatched" : 0,
    "nUpserted" : 1,
    "nModified" : 0,
    "_id" : ObjectId("62dd198497e88f9477ba2bb2")
  })
  --------------------------------------------------
  
  > ドキュメント一覧
  > db.Person.find( {}, { _id: 0 } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "AAA", "mail" : "AAA@google.com" }
  { "name" : "BBB", "mail" : "BBB@google.com" }
  { "name" : "CCC", "mail" : "CCC@google.com" }
  { "name" : "DDD", "mail" : "DDD@google.com" }  // 更新または挿入
  --------------------------------------------------
  
  > ドキュメント削除(1件のみ削除)
  > db.Person.remove( { name: 'AAA' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nRemoved" : 1 })
  --------------------------------------------------
  
  > ドキュメント一覧
  > db.Person.find( {}, { _id: 0 } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "BBB", "mail" : "BBB@google.com" }
  { "name" : "CCC", "mail" : "CCC@google.com" }
  { "name" : "DDD", "mail" : "DDD@google.com" }
  --------------------------------------------------
  
  > ドキュメント削除(複数レコード削除)
  > db.Person.remove(
  >   {
  >     $or: [
  >       { name: 'BBB' },
  >       { name: 'CCC' }
  >     ]
  >   }
  > )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nRemoved" : 2 })
  --------------------------------------------------
  
  > ドキュメント一覧
  > db.Person.find( {}, { _id: 0 } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "DDD", "mail" : "DDD@google.com" }
  --------------------------------------------------
  
  > コレクション削除
  > db.Person.drop()
  
  コマンドの実行結果
  --------------------------------------------------
  true
  --------------------------------------------------
  
  > コレクション一覧
  > show collections
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  > データベース削除
  > db.dropDatabase()
  
  コマンドの実行結果
  --------------------------------------------------
  { "dropped" : "testdb", "ok" : 1 }
  --------------------------------------------------
  
  > データベース一覧
  > show dbs
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[001]
  Install and Set Up Mongoose
  
[内容]
  モジュール「mongoose」のインポート
    別ファイル「web30.txt」の「X28」のアレンジ
  
  (例)
    // モジュールのインポート
    var mongoose = require('mongoose');

    // スキーマ定義
    var Schema = new mongoose.Schema({
      name: { type: String },
      mail: { type: String },
    });
    
    // モデル作成
    var Person = mongoose.model('Person', Schema, 'Person');
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs mon01
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ npm install mongoose --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/database => 専用ディレクトリ作成
  $ mongod --nojournal --noprealloc --dbpath ./ (ローカルDB作成)
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ mongo (ローカルDBに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'AAA', mail : 'AAA@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'BBB', mail : 'BBB@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'CCC', mail : 'CCC@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント一覧(表示可否を指定)
  > db.Person.find( {}, { _id: 0 } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "AAA", "mail" : "AAA@google.com" }
  { "name" : "BBB", "mail" : "BBB@google.com" }
  { "name" : "CCC", "mail" : "CCC@google.com" }
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ vi views/index.ejs (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 画面上部にメッセージ表示 --->
  <div><p><%=message %></p></div>
  
  <!-- 取得データをテーブル表示 --->
  <table>
    <tr>
      <td>NAME</td>
      <td>MAIL</td>
    </tr>
    <% for (let i in content) { %>
    <tr>
      <td><%=content[i].name %></td>
      <td><%=content[i].mail %></td>
    </tr>
    <% } %>
  </table>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ vi views/add.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 画面上部にメッセージ表示 --->
  <div><p><%=message %></p></div>
  
  <!-- 指定した「NAME」と「MAIL」のレコードを登録 --->
  <form method="post" action="/add">
    <label for="name">NAME</label><input type="text" id="name" name="name">
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  div {
    padding: 10px;
    margin: 15px auto;
    color: White;
    background-color: Black;
    width: 60%;
  }
  
  div p {
    padding: 10px 15px;
    margin: 10px 10px;
    font-size: 20px;
    text-align: center;
  }
  
  ul {
    padding: 5px;
    margin: 15px auto;
    color: Crimson;
    width: 60%;
  }
  
  ul li {
    padding: 0px 15px;
    margin: 0px 10px;
    font-size: 20px;
    text-align: left;
    list-style-type: none;
  }
  
  form {
    padding: 8px;
    margin: 15px auto;
    color: Black;
    background-color: White;
    border: 2px solid Black;
    width: 60%;
  }
  
  label {
    display: block;
    padding: 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Black;
    font-size: 25px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px;
    margin: 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    padding: 0px;
    margin: 15px auto;
    width: 62%;
  }
  
  table tr, th {
    padding: 0px;
    margin: 0px;
    color: White;
    background-color: Black;
  }
  
  table td {
    padding: 10px;
    margin: 0px;
    text-align: center;
    font-size: 20px;
  }
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ vi routes/index.js (ファイル確認または編集) => モデル関連を別ファイル構成にした時にうまく動かないので一緒にした
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var mongoose = require('mongoose');
  
  var Schema = new mongoose.Schema({
    name: { type: String },  // 氏名
    mail: { type: String },  // メールアドレス
  });
  
  var Person = mongoose.model('Person', Schema, 'Person');
  
  router.get('/', async function(req, res, next) {
    try {
      var data = {
        title: 'データ一覧画面',
        message: '全データを一覧表示しています',
        content: await Person.find(),
      }
      res.render('index', data);
    } catch {
      res.status(404);
      res.send({ error: "Person doesn't exist!" });
    }
  });
  
  router.get('/add', function(req, res, next) {
    var data = {
      title: '入力画面',
      message: 'NAMEとMAILを入力してください',
    }
    res.render('add', data);
  });
  
  router.post('/add', async function(req, res, next) {
    try {
      await Person.create({
        name: req.body.name,
        mail: req.body.mail,
      });
      res.redirect('/');
    } catch {
      res.status(404);
      res.send({ error: "Insert failed!" });
    }
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ vi app.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  var mongoose = require('mongoose');
  var indexRouter = require('./routes/index');
  
  var database = mongoose.connect("mongodb://localhost/testdb");
  var connect = mongoose.connection;
  connect.on('error', console.error.bind(console, 'MongoDB connection error:'));
  connect.once('open', () => console.log('MongoDB connection successful'))
  
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ npm start (アプリケーション実行)
  
  コマンドの実行結果
  --------------------------------------------------
  MongoDB connection successful => Ctrl + C で停止
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (データベースから取得データを表示)
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/add => 画面上の「NAME」に「DDD」、「MAIL」は「DDD@google.com」を入力でボタン押下
  
  コマンドの実行結果
  --------------------------------------------------
  (データ登録を確認)
  --------------------------------------------------
  
  $ cd $HOME/mon01
  $ mongo
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  testdb  0.000GB  // 該当データベース
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > ドキュメント一覧(検索条件を指定しない)
  > db.Person.find()
  
  コマンドの実行結果
  --------------------------------------------------
  { "_id" : ObjectId("62dd2a6c4e29b5b8b465de41"), "name" : "AAA", "mail" : "AAA@google.com" }
  { "_id" : ObjectId("62dd2a7a4e29b5b8b465de42"), "name" : "BBB", "mail" : "BBB@google.com" }
  { "_id" : ObjectId("62dd2a894e29b5b8b465de43"), "name" : "CCC", "mail" : "CCC@google.com" }
  { "_id" : ObjectId("62dd2d00620660b2b38149ad"), "name" : "DDD", "mail" : "DDD@google.com", "__v" : 0 }
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[002]
  Create a Model
  
[内容]
  スキーマ定義からのモデル作成
    別ファイル「web30.txt」の「X28」のアレンジ
  
  (例)
    // モジュールのインポート
    var mongoose = require('mongoose');

    // スキーマ定義
    var Schema = new mongoose.Schema({
      name: { type: String },
      mail: { type: String },
    });
    
    // モデル作成
    var Person = mongoose.model('Person', Schema, 'Person');
  
[確認]
  // 上記「001」を参照
  
================================================================================
[003]
  Create and Save a Record of a Model
  
[内容]
  モデルからドキュメント作成
    別ファイル「web30.txt」の「X28」のアレンジ
  
  (例)
    router.post('/add', async function(req, res, next) {
      try {
        await Person.create({  // モデルからドキュメント作成
          name: req.body.name,
          mail: req.body.mail,
        });
        res.redirect('/');
      } catch {
        res.status(404);
        res.send({ error: "Insert failed!" });
      }
    });
  
[確認]
  // 上記「001」を参照
  
================================================================================
[004]
  Create Many Records with model.create()
  
[内容]
  モデルから複数ドキュメントを作成
    別ファイル「web30.txt」の「X28」のアレンジ
  
  (例)
    const arr = [
      { name: 'EEE', mail: 'EEE@google.com' },
      { name: 'FFF', mail: 'FFF@google.com' },
      { name: 'GGG', mail: 'GGG@google.com' },
    ];

    router.post('/add', async function(req, res, next) {
      try {
        await Person.create(arr);  // モデルから複数ドキュメントを作成
        res.redirect('/');
      } catch {
        res.status(404);
        res.send({ error: "Insert failed!" });
      }
    });
  
[確認]
  // 上記「001」を参照
  
================================================================================
[005]
  Use model.find() to Search Your Database
  
[内容]
  ドキュメントを取得
    別ファイル「web30.txt」の「X28」のアレンジ
  
  (例)
    router.get('/', async function(req, res, next) {
      try {
        var data = {
          title: 'データ一覧画面',
          message: '全データを一覧表示しています',
          content: await Person.find(),  // ドキュメントを取得
        }
        res.render('index', data);
      } catch {
        res.status(404);
        res.send({ error: "Person doesn't exist!" });
      }
    });
  
[確認]
  // 上記「001」を参照
  
================================================================================
[006]
  Use model.findOne() to Return a Single Matching Document from Your Database
  
[内容]
  最初の該当ドキュメントのみ取得
    別ファイル「web30.txt」の「X28」のアレンジ
  
  (例)
    router.get('/', async function(req, res, next) {
      try {
        var data = {
          title: 'データ一覧画面',
          message: '全データを一覧表示しています',
          content: await Person.findOne(),  // 最初の該当ドキュメントのみ取得
        }
        res.render('index', data);
      } catch {
        res.status(404);
        res.send({ error: "Person doesn't exist!" });
      }
    });
  
[確認]
  // 上記「001」を参照
  
================================================================================
[007]
  Use model.findById() to Search Your Database By _id
  
[内容]
  ドキュメントを識別子「_id」で検索
    別ファイル「web30.txt」の「X28」のアレンジ
  
  (例)
    router.get('/', async function(req, res, next) {
      try {
        var data = {
          title: 'データ一覧画面',
          message: '全データを一覧表示しています',
          content: await Person.findById({ _id: '62dd2a6c4e29b5b8b465de41' }),  // ドキュメントを識別子「_id」で検索
        }
        res.render('index', data);
      } catch {
        res.status(404);
        res.send({ error: "Person doesn't exist!" });
      }
    });
  
[確認]
  // 上記「001」を参照
  
================================================================================
[008]
  Perform Classic Updates by Running Find, Edit, then Save
  
[内容]
  ドキュメントの検索と更新(1)
  
  (例)
    router.post('/', async function(req, res, next) {
      var data = {
        title: '編集画面',
        message: 'レコードを編集してください',
        content: await Person.findOne({ name: req.body.name }),  // ドキュメントの検索
      }
      res.render('update', data);
    });
    
    router.post('/update', async function(req, res, next) {
      try {
        await Person.updateOne(
          { name: { $eq: req.body.name } },  // ドキュメントの更新 : 更新条件
          { $set: { mail: req.body.mail } }  // ドキュメントの更新 : 更新内容
        );
        res.redirect('/');
      } catch {
        res.status(404);
        res.send({ error: "Update failed!" });
      }
    });
  
[確認]
  $ cd $HOME
  $ node --version
  
  コマンドの実行結果
  --------------------------------------------------
  v16.15.00 => 問題なし
  --------------------------------------------------
  
  $ cd $HOME
  $ express --view=ejs mon02
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ npm install (設定ファイル「package.json」に従いローカルインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ npm install mongoose --save
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  $ cd $HOME/database => 専用ディレクトリ作成
  $ mongod --nojournal --noprealloc --dbpath ./ (ローカルDB作成)
  
  コマンドの実行結果
  --------------------------------------------------
  (Ctrl + C で停止)
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ mongo (ローカルDBに接続)
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'AAA', mail : 'AAA@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'BBB', mail : 'BBB@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント作成
  > db.Person.insert( { name : 'CCC', mail : 'CCC@google.com' } )
  
  コマンドの実行結果
  --------------------------------------------------
  WriteResult({ "nInserted" : 1 })
  --------------------------------------------------
  
  > ドキュメント一覧(表示可否を指定)
  > db.Person.find( {}, { _id: 0 } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "AAA", "mail" : "AAA@google.com" }
  { "name" : "BBB", "mail" : "BBB@google.com" }
  { "name" : "CCC", "mail" : "CCC@google.com" }
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ vi views/index.ejs (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 画面上部にメッセージ表示 --->
  <div><p><%=message %></p></div>
  
  <!-- 指定した「NAME」のレコードを登録 --->
  <form method="post" action="/">
    <label for="name">NAME</label><input type="text" id="name" name="name">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ vi views/update.ejs (新規作成)
  
  コマンドの実行結果
  --------------------------------------------------
  <!doctype html>
  <html lang="ja">
  <head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <title><%=title %></title>
  </head>
  <body>
  
  <!-- 画面上部にメッセージ表示 --->
  <div><p><%=message %></p></div>
  
  <!-- 指定した「NAME」のレコードの表示と更新 --->
  <form method="post" action="/update">
    <label for="name">NAME</label><input type="text" id="name" name="name" value="<%=content.name %>" readonly>
    <label for="mail">MAIL</label><input type="text" id="mail" name="mail" value="<%=content.mail %>">
    <input type="submit" value="Click">
  </form>
  
  </body>
  </html>
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ vi public/stylesheets/style.css (既存ファイルを以下のように書換)
  
  コマンドの実行結果
  --------------------------------------------------
  div {
    padding: 10px;
    margin: 15px auto;
    color: White;
    background-color: Black;
    width: 60%;
  }
  
  div p {
    padding: 10px 15px;
    margin: 10px 10px;
    font-size: 20px;
    text-align: center;
  }
  
  ul {
    padding: 5px;
    margin: 15px auto;
    color: Crimson;
    width: 60%;
  }
  
  ul li {
    padding: 0px 15px;
    margin: 0px 10px;
    font-size: 20px;
    text-align: left;
    list-style-type: none;
  }
  
  form {
    padding: 8px;
    margin: 15px auto;
    color: Black;
    background-color: White;
    border: 2px solid Black;
    width: 60%;
  }
  
  label {
    display: block;
    padding: 15px 15px;
    margin: 10px 10px -5px -5px;
    color: Black;
    font-size: 25px;
  }
  
  input[type='text'] {
    display: block;
    padding: 15px;
    margin: -10px 10px 10px 10px;
    color: Crimson;
    font-size: 20px;
    width: 90%;
  }
  
  input[type='submit'] {
    padding: 10px;
    margin: 10px;
    border: 3px solid Black;
    font-size: 25px;
  }
  
  table {
    padding: 0px;
    margin: 15px auto;
    width: 62%;
  }
  
  table tr, th {
    padding: 0px;
    margin: 0px;
    color: White;
    background-color: Black;
  }
  
  table td {
    padding: 10px;
    margin: 0px;
    text-align: center;
    font-size: 20px;
  }
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ vi routes/index.js (ファイル確認または編集) => モデル関連を別ファイル構成にした時にうまく動かないので一緒にした
  
  コマンドの実行結果
  --------------------------------------------------
  var express = require('express');
  var router = express.Router();
  var mongoose = require('mongoose');
  
  var Schema = new mongoose.Schema({
    name: { type: String },  // 氏名
    mail: { type: String },  // メールアドレス
  });
  
  var Person = mongoose.model('Person', Schema, 'Person');
  
  router.get('/', function(req, res, next) {
    try {
      var data = {
        title: '入力画面',
        message: '更新対象のNAMEを入力してください',
      }
      res.render('index', data);
    } catch {
      res.status(404);
      res.send({ error: "Person doesn't exist!" });
    }
  });
  
  router.post('/', async function(req, res, next) {
    var data = {
      title: '編集画面',
      message: 'レコードを編集してください',
      content: await Person.findOne({ name: req.body.name }),
    }
    res.render('update', data);
  });
  
  router.post('/update', async function(req, res, next) {
    try {
      await Person.updateOne(
        { name: { $eq: req.body.name } },  // 更新条件
        { $set: { mail: req.body.mail } }  // 更新内容
      );
      res.redirect('/');
    } catch {
      res.status(404);
      res.send({ error: "Update failed!" });
    }
  });
  
  module.exports = router;
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ vi app.js (ファイル確認または編集)
  
  コマンドの実行結果
  --------------------------------------------------
  var createError = require('http-errors');
  var express = require('express');
  var path = require('path');
  var cookieParser = require('cookie-parser');
  var logger = require('morgan');
  var mongoose = require('mongoose');
  var indexRouter = require('./routes/index');
  
  var database = mongoose.connect("mongodb://localhost/testdb");
  var connect = mongoose.connection;
  connect.on('error', console.error.bind(console, 'MongoDB connection error:'));
  connect.once('open', () => console.log('MongoDB connection successful'))
  
  var app = express();
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'ejs');
  
  app.use(logger('dev'));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use('/', indexRouter);
  
  app.use(function(req, res, next) {
    next(createError(404));
  });
  
  app.use(function(err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
  });
  
  module.exports = app;
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ npm start (アプリケーション実行)
  
  コマンドの実行結果
  --------------------------------------------------
  MongoDB connection successful => Ctrl + C で停止
  --------------------------------------------------
  
  $ firefox
  $ http://localhost:3000/
  
  コマンドの実行結果
  --------------------------------------------------
  (NAMEに「AAA」を入力後にボタン押下 => 編集画面上でMAILを「AAA@yahoo.co.jp」に変更後にボタン押下)
  --------------------------------------------------
  
  $ cd $HOME/mon02
  $ mongo
  
  コマンドの実行結果
  --------------------------------------------------
  (コマンドプロンプトが「>」に変更)
  --------------------------------------------------
  
  > データベース一覧
  > show dbs 
  
  コマンドの実行結果
  --------------------------------------------------
  admin   0.000GB
  config  0.000GB
  local   0.000GB
  testdb  0.000GB  // 該当データベース
  --------------------------------------------------
  
  > データベース作成(または切換)
  > use testdb
  
  コマンドの実行結果
  --------------------------------------------------
  switched to db testdb
  --------------------------------------------------
  
  > ドキュメント一覧(表示可否を指定)
  > db.Person.find( {}, { _id: 0 } )
  
  コマンドの実行結果
  --------------------------------------------------
  { "name" : "AAA", "mail" : "AAA@yahoo.co.jp" }  // 更新
  { "name" : "BBB", "mail" : "BBB@google.com" }
  { "name" : "CCC", "mail" : "CCC@google.com" }
  --------------------------------------------------
  
  > シェルを抜ける
  > exit
  
  コマンドの実行結果
  --------------------------------------------------
  bye
  --------------------------------------------------
  
  以下の記録に続く
  
================================================================================
[009]
  Perform New Updates on a Document Using model.findOneAndUpdate()
  
[内容]
  ドキュメントの検索と更新(2)
  
  (例)
    router.post('/update', async function(req, res, next) {
      try {
        await Person.findOneAndUpdate(
          { name: { $eq: req.body.name } },   // ドキュメントの検索 : 検索条件
          { $set: { mail: req.body.mail } },  // ドキュメントの更新 : 更新内容
          { new: false }                      // フラグ
        );
        res.redirect('/');
      } catch {
        res.status(404);
        res.send({ error: "Update failed!" });
      }
    });
  
[確認]
  // 上記「008」を参照
  
================================================================================
[010]
  Delete One Document Using model.findByIdAndRemove
  
[内容]
  ドキュメントの検索と削除(1)
  
  (例)
    router.post('/update', async function(req, res, next) {
      try {
        await Person.findByIdAndRemove({ _id: '612f4a87413de3b285a7f060' });  // 実装時は前画面から「_id」の保持が必要
        res.redirect('/');
      } catch {
        res.status(404);
        res.send({ error: "Update failed!" });
      }
    });
  
[確認]
  // 上記「008」を参照
  
================================================================================
[011]
  Delete Many Documents with model.remove()
  
[内容]
  ドキュメントの検索と削除(2)
  
  (例)
    router.post('/update', async function(req, res, next) {
      try {
        await Person.remove({ name: req.body.name });  // ドキュメントの削除
        res.redirect('/');
      } catch {
        res.status(404);
        res.send({ error: "Update failed!" });
      }
    });
  
[確認]
  // 上記「008」を参照
  
================================================================================
[012]
  Chain Search Query Helpers to Narrow Search Results
  
[内容]
  クエリーチェーン
  
  (例)
    router.get('/', async function(req, res, next) {
      try {
        var data = {
          title: 'データ一覧画面',
          message: '全データを一覧表示しています',
          content: await Person.find().sort({ name: -1 }).limit(2),  // NAMEを降順でソート、表示件数を二件のみ
        }
        res.render('index', data);
      } catch {
        res.status(404);
        res.send({ error: "Person doesn't exist!" });
      }
    });
  
[確認]
  // 上記「001」を参照
  
================================================================================
